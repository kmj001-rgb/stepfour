{
  "version": 3,
  "sources": ["../config/constants.js", "../lib/input-sanitizer.js", "../content/content-bundle.js"],
  "sourcesContent": ["// constants.js - Centralized configuration constants for StepTwo Gallery Scraper\n// CR-005: Extract magic numbers to constants for improved maintainability\n\nexport const PERFORMANCE_CONFIG = {\n  MEMORY_SAMPLE_INTERVAL_MS: 30000,\n  MEMORY_WARNING_THRESHOLD_BYTES: 100 * 1024 * 1024,\n  MEMORY_CRITICAL_THRESHOLD_BYTES: 150 * 1024 * 1024\n};\n\nexport const EXPORT_CONFIG = {\n  MAX_FILE_SIZE_BYTES: 50 * 1024 * 1024,\n  BATCH_SIZE: 100,\n  COMPRESSION_LEVEL: 6,\n  STREAMING_THRESHOLD: 500,\n  LARGE_DATASET_THRESHOLD: 1000\n};\n\nexport const QUEUE_CONFIG = {\n  MAX_SIZE: 1000,\n  MAX_AGE_MS: 30000,\n  UPDATE_THROTTLE_MS: 100,\n  MAX_PENDING_MESSAGES: 100\n};\n\nexport const TIMEOUT_CONFIG = {\n  MESSAGE_TIMEOUT_MS: 10000,\n  CONNECTION_TIMEOUT_MS: 5000,\n  KEEPALIVE_INTERVAL_MS: 25000,\n  DOWNLOAD_TIMEOUT_MS: 120000\n};\n", "// input-sanitizer.js - Comprehensive Input Sanitization System\n// Prevents XSS, injection attacks, and path traversal vulnerabilities\n// CR-019: Critical security hardening for user input processing\n\nconsole.log('\uD83D\uDEE1\uFE0F Loading Input Sanitizer System...');\n\n/**\n * InputSanitizer - Comprehensive input validation and sanitization\n * Provides methods to sanitize CSS selectors, URLs, filenames, and HTML content\n */\nclass InputSanitizer {\n  constructor(options = {}) {\n    this.options = {\n      // Selector sanitization options\n      maxSelectorLength: options.maxSelectorLength || 10000,\n      allowedSelectorChars: options.allowedSelectorChars || /^[a-zA-Z0-9\\s\\-_#.\\[\\]=:()>+~*,\"'|^$]+$/,\n      \n      // URL sanitization options\n      allowedProtocols: options.allowedProtocols || ['http:', 'https:'],\n      maxUrlLength: options.maxUrlLength || 2048,\n      \n      // Filename sanitization options\n      maxFilenameLength: options.maxFilenameLength || 255,\n      allowedFilenameChars: options.allowedFilenameChars || /^[a-zA-Z0-9\\-_. ()]+$/,\n      \n      // HTML sanitization options\n      escapeHtml: options.escapeHtml !== false,\n      \n      ...options\n    };\n    \n    // Dangerous patterns to block\n    this.dangerousPatterns = {\n      // CSS selector injection patterns\n      selector: [\n        /<script/i,\n        /javascript:/i,\n        /on\\w+=/i,\n        /eval\\(/i,\n        /expression\\(/i,\n        /<iframe/i,\n        /<embed/i,\n        /<object/i\n      ],\n      \n      // URL injection patterns\n      url: [\n        /javascript:/i,\n        /data:text\\/html/i,\n        /vbscript:/i,\n        /file:/i,\n        /<script/i,\n        /on\\w+=/i\n      ],\n      \n      // Path traversal patterns\n      path: [\n        /\\.\\./,\n        /\\/\\.\\./,\n        /\\.\\.[\\\\/]/,\n        /^[\\\\\\/]/,\n        /[\\\\/]$/\n      ]\n    };\n    \n    // Statistics tracking\n    this.stats = {\n      selectorsProcessed: 0,\n      urlsProcessed: 0,\n      filenamesProcessed: 0,\n      htmlProcessed: 0,\n      threatsBlocked: 0\n    };\n  }\n\n  /**\n   * Sanitize CSS selectors to prevent injection attacks\n   * @param {string} selector - CSS selector to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized selector or empty string if invalid\n   */\n  sanitizeSelector(selector, options = {}) {\n    this.stats.selectorsProcessed++;\n    \n    try {\n      // Input validation\n      if (!selector || typeof selector !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      selector = selector.trim();\n      \n      // Check length limits\n      if (selector.length === 0) {\n        return '';\n      }\n      \n      if (selector.length > this.options.maxSelectorLength) {\n        console.warn('\uD83D\uDEE1\uFE0F Selector exceeds maximum length:', selector.length);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Check for dangerous patterns\n      for (const pattern of this.dangerousPatterns.selector) {\n        if (pattern.test(selector)) {\n          console.warn('\uD83D\uDEE1\uFE0F Dangerous pattern detected in selector:', pattern);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Validate against allowed characters\n      if (!this.options.allowedSelectorChars.test(selector)) {\n        console.warn('\uD83D\uDEE1\uFE0F Invalid characters in selector:', selector);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Additional validation: Try to parse as CSS selector\n      // This catches malformed selectors that might cause errors\n      if (typeof document !== 'undefined') {\n        try {\n          // Test if selector is valid by attempting to query\n          document.querySelector(':root'); // Dummy query to ensure API is available\n          document.createDocumentFragment().querySelector(selector); // Will throw if invalid\n        } catch (e) {\n          // If we can't test the selector, be conservative but log the issue\n          console.warn('\uD83D\uDEE1\uFE0F Selector validation test failed:', e.message);\n          // Don't block here as some complex selectors might be valid but fail in fragment\n          // The character whitelist above should catch most issues\n        }\n      }\n      \n      // Additional security: Escape special characters that might cause issues\n      // But preserve valid CSS selector syntax\n      selector = selector\n        .replace(/[<>]/g, '') // Remove angle brackets entirely\n        .replace(/\\\\/g, '\\\\\\\\'); // Escape backslashes\n      \n      return selector;\n      \n    } catch (error) {\n      console.error('\u274C Selector sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Sanitize URLs to allow only safe protocols (http/https)\n   * @param {string} url - URL to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized URL or empty string if invalid\n   */\n  sanitizeURL(url, options = {}) {\n    this.stats.urlsProcessed++;\n    \n    try {\n      // Input validation\n      if (!url || typeof url !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      url = url.trim();\n      \n      // Check length limits\n      if (url.length === 0) {\n        return '';\n      }\n      \n      if (url.length > this.options.maxUrlLength) {\n        console.warn('\uD83D\uDEE1\uFE0F URL exceeds maximum length:', url.length);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Check for dangerous patterns\n      for (const pattern of this.dangerousPatterns.url) {\n        if (pattern.test(url)) {\n          console.warn('\uD83D\uDEE1\uFE0F Dangerous pattern detected in URL:', pattern);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Parse URL to validate structure\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        // Try with a base URL for relative URLs\n        try {\n          parsedUrl = new URL(url, 'https://example.com');\n        } catch (e2) {\n          console.warn('\uD83D\uDEE1\uFE0F Invalid URL format:', url);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Validate protocol\n      if (!this.options.allowedProtocols.includes(parsedUrl.protocol)) {\n        console.warn('\uD83D\uDEE1\uFE0F Disallowed protocol in URL:', parsedUrl.protocol);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Additional security checks\n      // Block URLs with embedded credentials (potential phishing)\n      if (parsedUrl.username || parsedUrl.password) {\n        console.warn('\uD83D\uDEE1\uFE0F URL contains credentials:', url);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Block localhost and private IPs in production\n      if (options.blockPrivateIPs) {\n        const hostname = parsedUrl.hostname.toLowerCase();\n        if (\n          hostname === 'localhost' ||\n          hostname === '127.0.0.1' ||\n          hostname.startsWith('192.168.') ||\n          hostname.startsWith('10.') ||\n          hostname.startsWith('172.16.') ||\n          hostname === '[::1]'\n        ) {\n          console.warn('\uD83D\uDEE1\uFE0F Private IP/localhost blocked:', hostname);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Return the sanitized URL\n      return parsedUrl.href;\n      \n    } catch (error) {\n      console.error('\u274C URL sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Sanitize filenames to prevent path traversal and special characters\n   * @param {string} filename - Filename to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized filename or generated safe filename\n   */\n  sanitizeFilename(filename, options = {}) {\n    this.stats.filenamesProcessed++;\n    \n    try {\n      // Input validation\n      if (!filename || typeof filename !== 'string') {\n        return this.generateSafeFilename();\n      }\n      \n      // Extract just the filename if a full path was provided\n      filename = filename.split(/[\\\\/]/).pop() || filename;\n      \n      // Trim whitespace\n      filename = filename.trim();\n      \n      // Check length limits\n      if (filename.length === 0) {\n        return this.generateSafeFilename();\n      }\n      \n      if (filename.length > this.options.maxFilenameLength) {\n        console.warn('\uD83D\uDEE1\uFE0F Filename exceeds maximum length:', filename.length);\n        filename = filename.substring(0, this.options.maxFilenameLength);\n      }\n      \n      // Check for path traversal patterns\n      for (const pattern of this.dangerousPatterns.path) {\n        if (pattern.test(filename)) {\n          console.warn('\uD83D\uDEE1\uFE0F Path traversal pattern detected:', pattern);\n          this.stats.threatsBlocked++;\n          return this.generateSafeFilename();\n        }\n      }\n      \n      // Remove dangerous characters\n      // Keep: letters, numbers, dash, underscore, dot, space, parentheses\n      filename = filename.replace(/[^a-zA-Z0-9\\-_. ()]/g, '_');\n      \n      // Prevent multiple consecutive dots (potential traversal bypass)\n      filename = filename.replace(/\\.{2,}/g, '.');\n      \n      // Prevent leading/trailing dots and spaces\n      filename = filename.replace(/^[.\\s]+|[.\\s]+$/g, '');\n      \n      // Ensure we still have a valid filename\n      if (filename.length === 0 || filename === '.') {\n        return this.generateSafeFilename();\n      }\n      \n      // Validate against allowed characters (final check)\n      if (!this.options.allowedFilenameChars.test(filename)) {\n        console.warn('\uD83D\uDEE1\uFE0F Invalid characters remain in filename:', filename);\n        return this.generateSafeFilename();\n      }\n      \n      // Prevent Windows reserved filenames\n      const reservedNames = ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', \n                             'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', \n                             'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'];\n      const nameWithoutExt = filename.split('.')[0].toUpperCase();\n      if (reservedNames.includes(nameWithoutExt)) {\n        filename = '_' + filename;\n      }\n      \n      return filename;\n      \n    } catch (error) {\n      console.error('\u274C Filename sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return this.generateSafeFilename();\n    }\n  }\n\n  /**\n   * Sanitize HTML content to prevent XSS attacks\n   * @param {string} html - HTML content to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized HTML (escaped)\n   */\n  sanitizeHTML(html, options = {}) {\n    this.stats.htmlProcessed++;\n    \n    try {\n      // Input validation\n      if (!html || typeof html !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      html = html.trim();\n      \n      if (html.length === 0) {\n        return '';\n      }\n      \n      // Escape HTML entities to prevent XSS\n      const htmlEscapeMap = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '/': '&#x2F;'\n      };\n      \n      const escapedHtml = html.replace(/[&<>\"'\\/]/g, (char) => {\n        return htmlEscapeMap[char];\n      });\n      \n      return escapedHtml;\n      \n    } catch (error) {\n      console.error('\u274C HTML sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Generate a safe filename with timestamp\n   * @returns {string} - Safe generated filename\n   */\n  generateSafeFilename() {\n    const timestamp = Date.now();\n    const random = Math.floor(Math.random() * 10000);\n    return `file_${timestamp}_${random}`;\n  }\n\n  /**\n   * Batch sanitize multiple selectors\n   * @param {Array<string>} selectors - Array of selectors to sanitize\n   * @returns {Array<string>} - Array of sanitized selectors\n   */\n  sanitizeSelectors(selectors) {\n    if (!Array.isArray(selectors)) {\n      return [];\n    }\n    return selectors.map(selector => this.sanitizeSelector(selector)).filter(s => s.length > 0);\n  }\n\n  /**\n   * Batch sanitize multiple URLs\n   * @param {Array<string>} urls - Array of URLs to sanitize\n   * @returns {Array<string>} - Array of sanitized URLs\n   */\n  sanitizeURLs(urls, options = {}) {\n    if (!Array.isArray(urls)) {\n      return [];\n    }\n    return urls.map(url => this.sanitizeURL(url, options)).filter(u => u.length > 0);\n  }\n\n  /**\n   * Get sanitization statistics\n   * @returns {Object} - Statistics object\n   */\n  getStats() {\n    return { ...this.stats };\n  }\n\n  /**\n   * Reset statistics\n   */\n  resetStats() {\n    this.stats = {\n      selectorsProcessed: 0,\n      urlsProcessed: 0,\n      filenamesProcessed: 0,\n      htmlProcessed: 0,\n      threatsBlocked: 0\n    };\n  }\n}\n\n// Export for use in different contexts\nif (typeof window !== 'undefined') {\n  window.InputSanitizer = InputSanitizer;\n}\n\n// Export to globalThis for service worker context\nif (typeof globalThis !== 'undefined') {\n  globalThis.InputSanitizer = InputSanitizer;\n}\n\n// ES6 export\nexport { InputSanitizer };\n\nconsole.log('\u2705 Input Sanitizer System loaded');\n", "// content-bundle.js - Unified content script for StepTwo Gallery Scraper\n// Consolidates essential functionality from multiple scripts to improve performance\n// and eliminate race conditions in MV3 extension context\n\nimport { PERFORMANCE_CONFIG } from '../config/constants.js';\nimport { InputSanitizer } from '../lib/input-sanitizer.js';\n\n// Check if content script is already injected (for on-demand programmatic injection)\nif (window.__STEPTWO_INJECTED) {\n  console.log('\u26A0\uFE0F STEPTWO Content Bundle already injected, skipping...');\n  throw new Error('Content script already loaded'); // Stop execution\n}\n\n// Mark as injected to prevent double injection\nwindow.__STEPTWO_INJECTED = true;\n\n// Early exit for obviously irrelevant system pages (performance optimization)\n// This prevents the extension from loading unnecessary infrastructure on internal browser pages\n// where the gallery scraper will never be used, reducing memory and CPU usage.\nif (window.location.protocol === 'chrome:' || \n    window.location.protocol === 'chrome-extension:' ||\n    window.location.protocol === 'about:') {\n  console.log('\u23ED\uFE0F STEPTWO skipping system page:', window.location.protocol);\n  throw new Error('Extension not applicable on system pages');\n}\n\nconsole.log('\uD83D\uDE80 STEPTWO Content Bundle loading...');\n\n/**\n * ============================================================================\n * UNIVERSAL GALLERY SCRAPER - PERFORMANCE & DESIGN ARCHITECTURE\n * ============================================================================\n * \n * WHY THIS SCRIPT RUNS ON ALL PAGES:\n * This is a universal gallery scraper designed to work on ANY website where\n * users want to extract images, tables, or media content. We cannot predict\n * which sites users will visit, so the extension must be ready everywhere.\n * \n * PERFORMANCE STRATEGY (Lazy Loading):\n * \u2713 Only lightweight infrastructure loads initially (~50KB)\n *   - Debug configuration\n *   - Memory management framework\n *   - Input sanitization\n *   - Message handlers (dormant until activated)\n * \n * \u2717 Heavy operations DO NOT run automatically:\n *   - DOM scraping and image detection\n *   - Mutation observers\n *   - Table detection systems\n *   - Advanced collector systems\n *   - Pattern recognition engines\n * \n * USER ACTIVATION REQUIRED:\n * Heavy systems only activate when the user explicitly triggers them via:\n * - Extension popup button click\n * - Context menu selection (\"Extract images from page\")\n * - Keyboard shortcut\n * - Message from background service worker\n * \n * MANIFEST V3 BEST PRACTICE:\n * This architecture follows Chrome's recommended pattern for universal extensions:\n * - Register lightweight message listeners on all pages\n * - Keep dormant until user interaction\n * - Minimize memory footprint during normal browsing\n * - Only activate heavy processing on-demand\n * \n * MEMORY SAFEGUARDS:\n * - Bounded caches with LRU eviction\n * - Automatic cleanup on page visibility changes\n * - Resource tracking for observers and timers\n * - Emergency cleanup at memory thresholds\n * \n * This ensures near-zero performance impact during normal browsing while\n * maintaining instant availability when users need gallery extraction.\n * ============================================================================\n */\n\n// =============================================================================\n// 1. DEBUG CONFIGURATION - Must be first for logging to work\n// =============================================================================\n\n/**\n * Debug Configuration System - Namespace-based approach to prevent identifier conflicts\n * Controls console logging and debug output across the extension\n */\n(function() {\n  'use strict';\n\n  // Initialize StepTwo namespace safely\n  const global = typeof globalThis !== 'undefined' ? globalThis :\n    (typeof self !== 'undefined' ? self :\n      (typeof window !== 'undefined' ? window : {}));\n\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n\n  // Prevent double initialization\n  if (global.__ST.DebugConfigLoaded) {\n    return;\n  }\n  global.__ST.DebugConfigLoaded = true;\n\n  // Define DebugConfig class\n  class DebugConfig {\n    constructor() {\n      // Check if we're in production environment\n      this.isProduction = this.detectProductionEnvironment();\n\n      // Global debug settings - can be overridden per module\n      this.globalDebugSettings = {\n        enableConsoleLogging: !this.isProduction,\n        enablePerformanceLogging: !this.isProduction,\n        enableErrorLogging: true, // Always log errors\n        enableWarningLogging: true, // Always log warnings\n        enableInfoLogging: !this.isProduction,\n        enableDebugLogging: false, // Only for development debugging\n        enableVerboseLogging: false // Only for deep debugging\n      };\n\n      // Module-specific debug settings\n      this.moduleSettings = {\n        'scraper': { enableConsoleLogging: !this.isProduction },\n        'picker': { enableConsoleLogging: !this.isProduction },\n        'background': { enableConsoleLogging: !this.isProduction },\n        'export': { enableConsoleLogging: !this.isProduction },\n        'performance': { enableConsoleLogging: !this.isProduction },\n        'ui': { enableConsoleLogging: !this.isProduction }\n      };\n    }\n\n    /**\n     * Detect if we're running in a production environment\n     */\n    detectProductionEnvironment() {\n      // Check for production indicators\n      try {\n        // Chrome extension production detection\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          const manifest = chrome.runtime.getManifest();\n          // Consider it production if it's a packaged extension\n          if (chrome.runtime.getURL('').startsWith('chrome-extension://')) {\n            return true;\n          }\n        }\n\n        // Development environment indicators\n        if (typeof location !== 'undefined') {\n          const isDevelopment =\n            location.hostname === 'localhost' ||\n            location.hostname === '127.0.0.1' ||\n            location.port !== '';\n          return !isDevelopment;\n        }\n\n        // Default to production for safety\n        return true;\n      } catch (error) {\n        // If we can't determine, default to production (safer)\n        return true;\n      }\n    }\n\n    /**\n     * Check if debugging is enabled for a specific module and level\n     */\n    isEnabled(module, level) {\n      module = module || 'global';\n      level = level || 'info';\n      const moduleSettings = this.moduleSettings[module] || this.globalDebugSettings;\n\n      switch (level.toLowerCase()) {\n      case 'error':\n        return moduleSettings.enableErrorLogging !== false;\n      case 'warn':\n      case 'warning':\n        return moduleSettings.enableWarningLogging !== false;\n      case 'info':\n        return moduleSettings.enableInfoLogging !== false &&\n                 moduleSettings.enableConsoleLogging !== false;\n      case 'log':\n        return moduleSettings.enableConsoleLogging !== false;\n      case 'debug':\n        return moduleSettings.enableDebugLogging === true &&\n                 moduleSettings.enableConsoleLogging !== false;\n      case 'verbose':\n        return moduleSettings.enableVerboseLogging === true &&\n                 moduleSettings.enableConsoleLogging !== false;\n      case 'performance':\n        return moduleSettings.enablePerformanceLogging !== false &&\n                 moduleSettings.enableConsoleLogging !== false;\n      default:\n        return moduleSettings.enableConsoleLogging !== false;\n      }\n    }\n\n    /**\n     * Safe console logging with debug controls\n     */\n    log(module, level) {\n      const args = Array.prototype.slice.call(arguments, 2);\n      if (!this.isEnabled(module, level)) {\n        return;\n      }\n\n      const prefix = '[' + (module || 'STEPTWO').toUpperCase() + ']';\n\n      switch ((level || 'log').toLowerCase()) {\n      case 'error':\n        console.error.apply(console, [prefix].concat(args));\n        break;\n      case 'warn':\n      case 'warning':\n        console.warn.apply(console, [prefix].concat(args));\n        break;\n      case 'info':\n        console.info.apply(console, [prefix].concat(args));\n        break;\n      case 'debug':\n        console.debug.apply(console, [prefix].concat(args));\n        break;\n      case 'performance':\n        if (console.time) {\n          console.time(prefix + ' ' + args[0]);\n        } else {\n          console.log.apply(console, [prefix].concat(args));\n        }\n        break;\n      default:\n        console.log.apply(console, [prefix].concat(args));\n      }\n    }\n\n    /**\n     * Performance timing utilities\n     */\n    timeStart(module, label) {\n      if (!this.isEnabled(module, 'performance')) {\n        return;\n      }\n      console.time('[' + (module || 'STEPTWO').toUpperCase() + '] ' + label);\n    }\n\n    timeEnd(module, label) {\n      if (!this.isEnabled(module, 'performance')) {\n        return;\n      }\n      console.timeEnd('[' + (module || 'STEPTWO').toUpperCase() + '] ' + label);\n    }\n  }\n\n  // Store in namespace\n  global.__ST.DebugConfig = DebugConfig;\n\n  // Create DEBUG instance in namespace\n  if (!global.__ST.DEBUG) {\n    global.__ST.DEBUG = new DebugConfig();\n  }\n\n  // Export for backward compatibility\n  if (typeof window !== 'undefined') {\n    window.DEBUG = global.__ST.DEBUG;\n  } else if (typeof self !== 'undefined') {\n    self.DEBUG = global.__ST.DEBUG;\n  }\n\n})(); // End Debug Config IIFE\n\n// =============================================================================\n// 1.5 INPUT SANITIZATION SYSTEM - CR-019: Critical security hardening\n// =============================================================================\n\n/**\n * Input Sanitization Integration for Content Scripts\n * Provides security sanitization for user input from DOM\n * NOTE: Requires input-sanitizer.js to be loaded before this script in manifest.json\n */\n(function() {\n  'use strict';\n\n  const global = typeof globalThis !== 'undefined' ? globalThis :\n    (typeof self !== 'undefined' ? self :\n      (typeof window !== 'undefined' ? window : {}));\n\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n\n  // Prevent double initialization\n  if (global.__ST.InputSanitizationLoaded) {\n    return;\n  }\n  global.__ST.InputSanitizationLoaded = true;\n\n  // Try to get InputSanitizer from global scope\n  let InputSanitizerClass = null;\n  if (typeof global.InputSanitizer !== 'undefined') {\n    InputSanitizerClass = global.InputSanitizer;\n  } else if (typeof window !== 'undefined' && typeof window.InputSanitizer !== 'undefined') {\n    InputSanitizerClass = window.InputSanitizer;\n  }\n\n  // Initialize sanitizer if available\n  let sanitizerInstance = null;\n  if (InputSanitizerClass) {\n    try {\n      sanitizerInstance = new InputSanitizerClass();\n      console.log('\u2705 Input Sanitizer initialized in content script (CR-019)');\n    } catch (error) {\n      throw new Error('SECURITY: Failed to initialize InputSanitizer - ' + error.message);\n    }\n  } else {\n    throw new Error('SECURITY: InputSanitizer is required but not available');\n  }\n\n  /**\n   * Sanitization Utilities for Content Script\n   */\n  const SanitizationUtils = {\n    /**\n     * Sanitize CSS selector before using in querySelector\n     */\n    sanitizeSelector(selector) {\n      if (!sanitizerInstance) {\n        throw new Error('SECURITY: InputSanitizer required for selector sanitization');\n      }\n      return sanitizerInstance.sanitizeSelector(selector);\n    },\n\n    /**\n     * Sanitize URL before using\n     */\n    sanitizeURL(url) {\n      if (!sanitizerInstance) {\n        throw new Error('SECURITY: InputSanitizer required for URL sanitization');\n      }\n      return sanitizerInstance.sanitizeURL(url);\n    },\n\n    /**\n     * Sanitize HTML content to prevent XSS\n     */\n    sanitizeHTML(html) {\n      if (!sanitizerInstance) {\n        throw new Error('SECURITY: InputSanitizer required for HTML sanitization');\n      }\n      return sanitizerInstance.sanitizeHTML(html);\n    },\n\n    /**\n     * Sanitize filename\n     */\n    sanitizeFilename(filename) {\n      if (!sanitizerInstance) {\n        throw new Error('SECURITY: InputSanitizer required for filename sanitization');\n      }\n      return sanitizerInstance.sanitizeFilename(filename);\n    },\n\n    /**\n     * Safe querySelector with sanitization\n     */\n    safeQuerySelector(element, selector) {\n      const sanitized = this.sanitizeSelector(selector);\n      if (!sanitized) {\n        console.warn('\uD83D\uDEE1\uFE0F Selector sanitization blocked invalid selector');\n        return null;\n      }\n      try {\n        return element.querySelector(sanitized);\n      } catch (error) {\n        console.warn('Invalid selector:', sanitized, error);\n        return null;\n      }\n    },\n\n    /**\n     * Safe querySelectorAll with sanitization\n     */\n    safeQuerySelectorAll(element, selector) {\n      const sanitized = this.sanitizeSelector(selector);\n      if (!sanitized) {\n        console.warn('\uD83D\uDEE1\uFE0F Selector sanitization blocked invalid selector');\n        return [];\n      }\n      try {\n        return element.querySelectorAll(sanitized);\n      } catch (error) {\n        console.warn('Invalid selector:', sanitized, error);\n        return [];\n      }\n    },\n\n    /**\n     * Get sanitizer instance\n     */\n    getSanitizer() {\n      return sanitizerInstance;\n    }\n  };\n\n  // Store in namespace\n  global.__ST.SanitizationUtils = SanitizationUtils;\n\n  // Export for easy access\n  if (typeof window !== 'undefined') {\n    window.SanitizationUtils = SanitizationUtils;\n  } else if (typeof self !== 'undefined') {\n    self.SanitizationUtils = SanitizationUtils;\n  }\n\n})(); // End Input Sanitization IIFE\n\n// =============================================================================\n// 2. MEMORY MANAGEMENT SYSTEM - Critical for preventing memory leaks\n// =============================================================================\n\n/**\n * Comprehensive Memory Management and Lifecycle System\n * Implements singleton protection, lifecycle management, bounded data structures,\n * DOM reference cleanup, observer/timer tracking, and memory monitoring\n */\n(function() {\n  'use strict';\n\n  const global = typeof globalThis !== 'undefined' ? globalThis :\n    (typeof self !== 'undefined' ? self :\n      (typeof window !== 'undefined' ? window : {}));\n\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n\n  // Prevent double initialization\n  if (global.__ST.MemoryManagementLoaded) {\n    return;\n  }\n  global.__ST.MemoryManagementLoaded = true;\n\n  /**\n   * LRU Cache implementation with size limits\n   */\n  class LRUCache {\n    constructor(maxSize = 1000) {\n      this.maxSize = maxSize;\n      this.cache = new Map();\n    }\n\n    get(key) {\n      if (this.cache.has(key)) {\n        const value = this.cache.get(key);\n        this.cache.delete(key);\n        this.cache.set(key, value);\n        return value;\n      }\n      return null;\n    }\n\n    set(key, value) {\n      if (this.cache.has(key)) {\n        this.cache.delete(key);\n      } else if (this.cache.size >= this.maxSize) {\n        const firstKey = this.cache.keys().next().value;\n        this.cache.delete(firstKey);\n      }\n      this.cache.set(key, value);\n    }\n\n    delete(key) {\n      return this.cache.delete(key);\n    }\n\n    clear() {\n      this.cache.clear();\n    }\n\n    get size() {\n      return this.cache.size;\n    }\n  }\n\n  /**\n   * Bounded Array - Prevents unbounded growth\n   */\n  class BoundedArray {\n    constructor(maxSize = 1000) {\n      this.maxSize = maxSize;\n      this.items = [];\n    }\n\n    push(item) {\n      this.items.push(item);\n      if (this.items.length > this.maxSize) {\n        this.items.shift();\n      }\n      return this.items.length;\n    }\n\n    unshift(item) {\n      this.items.unshift(item);\n      if (this.items.length > this.maxSize) {\n        this.items.pop();\n      }\n      return this.items.length;\n    }\n\n    slice(start, end) {\n      return this.items.slice(start, end);\n    }\n\n    forEach(callback) {\n      return this.items.forEach(callback);\n    }\n\n    get length() {\n      return this.items.length;\n    }\n\n    clear() {\n      this.items.length = 0;\n    }\n  }\n\n  /**\n   * Resource Tracker - Tracks all observers, timers, and event listeners\n   */\n  class ResourceTracker {\n    constructor() {\n      this.observers = new Set();\n      this.timers = new Set();\n      this.intervals = new Set();\n      this.eventListeners = new WeakMap();\n      this.workers = new Set();\n      this.originalSetTimeout = window.setTimeout;\n      this.originalSetInterval = window.setInterval;\n      this.originalClearTimeout = window.clearTimeout;\n      this.originalClearInterval = window.clearInterval;\n      this.isIntercepting = false;\n      this.setupInterception();\n    }\n\n    setupInterception() {\n      if (this.isIntercepting) {\n        return;\n      }\n\n      const self = this;\n      \n      // Intercept setTimeout\n      window.setTimeout = function(callback, delay, ...args) {\n        const timeoutId = self.originalSetTimeout.call(this, function() {\n          self.timers.delete(timeoutId);\n          return callback.apply(this, args);\n        }, delay);\n        self.timers.add(timeoutId);\n        return timeoutId;\n      };\n\n      // Intercept setInterval\n      window.setInterval = function(callback, delay, ...args) {\n        const intervalId = self.originalSetInterval.call(this, callback, delay, ...args);\n        self.intervals.add(intervalId);\n        return intervalId;\n      };\n\n      // Intercept clearTimeout\n      window.clearTimeout = function(timeoutId) {\n        self.timers.delete(timeoutId);\n        return self.originalClearTimeout.call(this, timeoutId);\n      };\n\n      // Intercept clearInterval\n      window.clearInterval = function(intervalId) {\n        self.intervals.delete(intervalId);\n        return self.originalClearInterval.call(this, intervalId);\n      };\n\n      this.isIntercepting = true;\n    }\n\n    trackObserver(observer) {\n      this.observers.add(observer);\n    }\n\n    trackEventListener(element, event, listener, options) {\n      if (!this.eventListeners.has(element)) {\n        this.eventListeners.set(element, new Map());\n      }\n      const elementListeners = this.eventListeners.get(element);\n      if (!elementListeners.has(event)) {\n        elementListeners.set(event, new Set());\n      }\n      elementListeners.get(event).add({ listener, options });\n    }\n\n    trackWorker(worker) {\n      this.workers.add(worker);\n    }\n\n    cleanup() {\n      // Disconnect all observers\n      for (const observer of this.observers) {\n        try {\n          if (observer && typeof observer.disconnect === 'function') {\n            observer.disconnect();\n          }\n        } catch (error) {\n          console.warn('Error disconnecting observer:', error);\n        }\n      }\n      this.observers.clear();\n\n      // Clear all timers\n      for (const timerId of this.timers) {\n        try {\n          this.originalClearTimeout.call(window, timerId);\n        } catch (error) {\n          console.warn('Error clearing timeout:', error);\n        }\n      }\n      this.timers.clear();\n\n      // Clear all intervals\n      for (const intervalId of this.intervals) {\n        try {\n          this.originalClearInterval.call(window, intervalId);\n        } catch (error) {\n          console.warn('Error clearing interval:', error);\n        }\n      }\n      this.intervals.clear();\n\n      // Terminate all workers\n      for (const worker of this.workers) {\n        try {\n          if (worker && typeof worker.terminate === 'function') {\n            worker.terminate();\n          }\n        } catch (error) {\n          console.warn('Error terminating worker:', error);\n        }\n      }\n      this.workers.clear();\n\n      // Restore original global functions\n      if (this.isIntercepting) {\n        window.setTimeout = this.originalSetTimeout;\n        window.setInterval = this.originalSetInterval;\n        window.clearTimeout = this.originalClearTimeout;\n        window.clearInterval = this.originalClearInterval;\n        this.isIntercepting = false;\n      }\n\n      console.log('\uD83E\uDDF9 Resource tracker cleanup completed');\n    }\n\n    getStatus() {\n      return {\n        observers: this.observers.size,\n        timers: this.timers.size,\n        intervals: this.intervals.size,\n        workers: this.workers.size,\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  /**\n   * DOM Reference Manager - Uses WeakMap for DOM references\n   */\n  class DOMReferenceManager {\n    constructor() {\n      this.elementMetadata = new WeakMap();\n      this.elementCaches = new WeakMap();\n    }\n\n    setElementMetadata(element, metadata) {\n      if (element && element instanceof Element) {\n        this.elementMetadata.set(element, metadata);\n      }\n    }\n\n    getElementMetadata(element) {\n      return this.elementMetadata.get(element);\n    }\n\n    setElementCache(element, cache) {\n      if (element && element instanceof Element) {\n        this.elementCaches.set(element, cache);\n      }\n    }\n\n    getElementCache(element) {\n      return this.elementCaches.get(element);\n    }\n\n    cleanup() {\n      // WeakMaps clean themselves, but we can help by dereferencing\n      try {\n        // Force garbage collection hint\n        if (typeof window.gc === 'function') {\n          window.gc();\n        }\n      } catch (error) {\n        // Ignore gc errors\n      }\n      console.log('\uD83D\uDDD1\uFE0F DOM reference cleanup completed');\n    }\n  }\n\n  /**\n   * Memory Monitor - Lightweight memory monitoring\n   */\n  class MemoryMonitor {\n    constructor() {\n      this.samples = new BoundedArray(100);\n      this.lastSample = null;\n      this.thresholds = {\n        warning: PERFORMANCE_CONFIG.MEMORY_WARNING_THRESHOLD_BYTES,\n        critical: PERFORMANCE_CONFIG.MEMORY_CRITICAL_THRESHOLD_BYTES\n      };\n      this.startMonitoring();\n    }\n\n    startMonitoring() {\n      // Sample every 30 seconds\n      window.setInterval(() => {\n        this.takeSample();\n      }, PERFORMANCE_CONFIG.MEMORY_SAMPLE_INTERVAL_MS);\n\n      // Take initial sample\n      setTimeout(() => this.takeSample(), 1000);\n    }\n\n    takeSample() {\n      try {\n        if (typeof performance === 'undefined' || !performance.memory) {\n          return;\n        }\n\n        const sample = {\n          timestamp: Date.now(),\n          usedJSHeapSize: performance.memory.usedJSHeapSize,\n          totalJSHeapSize: performance.memory.totalJSHeapSize,\n          jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,\n          resourcesTracked: global.__ST.resourceTracker ? global.__ST.resourceTracker.getStatus() : {}\n        };\n\n        this.samples.push(sample);\n        this.lastSample = sample;\n\n        // Check thresholds\n        this.checkMemoryThresholds(sample);\n\n        // Report health status\n        this.reportHealthStatus(sample);\n\n      } catch (error) {\n        console.warn('Error taking memory sample:', error);\n      }\n    }\n\n    checkMemoryThresholds(sample) {\n      const used = sample.usedJSHeapSize;\n      \n      if (used > this.thresholds.critical) {\n        console.error('\uD83D\uDCA5 CRITICAL MEMORY USAGE:', this.formatBytes(used));\n        this.triggerEmergencyCleanup();\n      } else if (used > this.thresholds.warning) {\n        console.warn('\u26A0\uFE0F HIGH MEMORY USAGE:', this.formatBytes(used));\n        this.triggerPreventiveCleanup();\n      }\n    }\n\n    triggerEmergencyCleanup() {\n      try {\n        global.__ST.lifecycleManager?.emergencyCleanup();\n      } catch (error) {\n        console.error('Emergency cleanup failed:', error);\n      }\n    }\n\n    triggerPreventiveCleanup() {\n      try {\n        global.__ST.lifecycleManager?.preventiveCleanup();\n      } catch (error) {\n        console.warn('Preventive cleanup failed:', error);\n      }\n    }\n\n    reportHealthStatus(sample) {\n      try {\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          chrome.runtime.sendMessage({\n            cmd: 'health_status',\n            type: 'memory_sample',\n            data: {\n              usedMemory: sample.usedJSHeapSize,\n              totalMemory: sample.totalJSHeapSize,\n              resourceCount: sample.resourcesTracked,\n              timestamp: sample.timestamp\n            }\n          }).catch(() => {\n            // Ignore messaging errors\n          });\n        }\n      } catch (error) {\n        // Ignore health status errors\n      }\n    }\n\n    formatBytes(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    getMemoryStats() {\n      const recent = this.samples.slice(-10);\n      if (recent.length === 0) return null;\n\n      const current = recent[recent.length - 1];\n      const trend = recent.length > 1 ? \n        (current.usedJSHeapSize - recent[0].usedJSHeapSize) / recent.length : 0;\n\n      return {\n        current: current.usedJSHeapSize,\n        trend: trend,\n        samples: recent.length,\n        formatted: this.formatBytes(current.usedJSHeapSize)\n      };\n    }\n  }\n\n  /**\n   * Lifecycle Manager - Centralized cleanup and lifecycle management\n   */\n  class LifecycleManager {\n    constructor() {\n      this.initialized = false;\n      this.cleanupHandlers = new Set();\n      this.emergencyCleanupHandlers = new Set();\n      this.setupLifecycleHandlers();\n    }\n\n    setupLifecycleHandlers() {\n      if (this.initialized) return;\n      \n      // Page visibility changes\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'hidden') {\n          this.onPageHidden();\n        }\n      });\n\n      // Page unload events\n      window.addEventListener('beforeunload', () => {\n        this.onBeforeUnload();\n      });\n\n      window.addEventListener('pagehide', () => {\n        this.onPageHide();\n      });\n\n      // Focus loss\n      window.addEventListener('blur', () => {\n        this.onBlur();\n      });\n\n      this.initialized = true;\n      console.log('\u2705 Lifecycle manager initialized');\n    }\n\n    registerCleanupHandler(handler, isEmergency = false) {\n      if (typeof handler === 'function') {\n        if (isEmergency) {\n          this.emergencyCleanupHandlers.add(handler);\n        } else {\n          this.cleanupHandlers.add(handler);\n        }\n      }\n    }\n\n    unregisterCleanupHandler(handler) {\n      this.cleanupHandlers.delete(handler);\n      this.emergencyCleanupHandlers.delete(handler);\n    }\n\n    onPageHidden() {\n      this.preventiveCleanup();\n    }\n\n    onBeforeUnload() {\n      this.fullCleanup();\n    }\n\n    onPageHide() {\n      this.fullCleanup();\n    }\n\n    onBlur() {\n      // Light cleanup on focus loss\n      setTimeout(() => {\n        if (document.hidden) {\n          this.preventiveCleanup();\n        }\n      }, 5000);\n    }\n\n    preventiveCleanup() {\n      console.log('\uD83E\uDDF9 Starting preventive cleanup...');\n      \n      for (const handler of this.cleanupHandlers) {\n        try {\n          handler('preventive');\n        } catch (error) {\n          console.warn('Cleanup handler error:', error);\n        }\n      }\n\n      // Clear caches\n      this.clearCaches();\n    }\n\n    emergencyCleanup() {\n      console.log('\uD83D\uDEA8 Starting emergency cleanup...');\n      \n      for (const handler of [...this.cleanupHandlers, ...this.emergencyCleanupHandlers]) {\n        try {\n          handler('emergency');\n        } catch (error) {\n          console.error('Emergency cleanup handler error:', error);\n        }\n      }\n\n      // Aggressive cleanup\n      this.clearCaches();\n      global.__ST.resourceTracker?.cleanup();\n      global.__ST.domReferenceManager?.cleanup();\n\n      // Force garbage collection hint\n      try {\n        if (typeof window.gc === 'function') {\n          window.gc();\n        }\n      } catch (error) {\n        // Ignore gc errors\n      }\n    }\n\n    fullCleanup() {\n      console.log('\uD83E\uDDF9 Starting full cleanup...');\n      \n      // Run all cleanup handlers\n      for (const handler of [...this.cleanupHandlers, ...this.emergencyCleanupHandlers]) {\n        try {\n          handler('full');\n        } catch (error) {\n          console.error('Full cleanup handler error:', error);\n        }\n      }\n\n      // Cleanup resources\n      global.__ST.resourceTracker?.cleanup();\n      global.__ST.domReferenceManager?.cleanup();\n      this.clearCaches();\n\n      console.log('\u2705 Full cleanup completed');\n    }\n\n    clearCaches() {\n      // Clear any global caches\n      for (const key of Object.keys(global.__ST)) {\n        const obj = global.__ST[key];\n        if (obj && typeof obj.clear === 'function') {\n          try {\n            obj.clear();\n          } catch (error) {\n            console.warn(`Error clearing cache ${key}:`, error);\n          }\n        }\n      }\n    }\n  }\n\n  // Initialize memory management systems\n  global.__ST.LRUCache = LRUCache;\n  global.__ST.BoundedArray = BoundedArray;\n  global.__ST.ResourceTracker = ResourceTracker;\n  global.__ST.DOMReferenceManager = DOMReferenceManager;\n  global.__ST.MemoryMonitor = MemoryMonitor;\n  global.__ST.LifecycleManager = LifecycleManager;\n\n  // Create global instances\n  if (!global.__ST.resourceTracker) {\n    global.__ST.resourceTracker = new ResourceTracker();\n  }\n  \n  if (!global.__ST.domReferenceManager) {\n    global.__ST.domReferenceManager = new DOMReferenceManager();\n  }\n  \n  if (!global.__ST.memoryMonitor) {\n    global.__ST.memoryMonitor = new MemoryMonitor();\n  }\n  \n  if (!global.__ST.lifecycleManager) {\n    global.__ST.lifecycleManager = new LifecycleManager();\n  }\n\n  console.log('\u2705 Memory management system loaded');\n\n})(); // End Memory Management IIFE\n\n// =============================================================================\n// 2.5 DOM QUERY CACHING SYSTEM - CR-015: Performance optimization\n// =============================================================================\n\n/**\n * DOM Query Caching and Batching System Integration\n * Reduces expensive querySelectorAll calls and prevents layout thrashing\n * NOTE: Requires dom-cache.js to be loaded before this script in manifest.json\n */\n(function() {\n  'use strict';\n\n  const global = typeof globalThis !== 'undefined' ? globalThis :\n    (typeof self !== 'undefined' ? self :\n      (typeof window !== 'undefined' ? window : {}));\n\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n\n  // Prevent double initialization\n  if (global.__ST.DOMCachingLoaded) {\n    return;\n  }\n  global.__ST.DOMCachingLoaded = true;\n\n  // Check if DOMQueryCache and DOMBatcher are available\n  const DOMQueryCacheClass = global.DOMQueryCache || global.__ST.DOMQueryCache;\n  const DOMBatcherClass = global.DOMBatcher || global.__ST.DOMBatcher;\n\n  if (!DOMQueryCacheClass || !DOMBatcherClass) {\n    console.warn('\u26A0\uFE0F DOM caching classes not available - add dom-cache.js to manifest.json content_scripts');\n    return;\n  }\n\n  // Initialize DOM Query Cache with optimized settings\n  let domQueryCache = null;\n  try {\n    domQueryCache = new DOMQueryCacheClass({\n      defaultTTL: 5000, // 5 seconds\n      maxCacheSize: 50, // Limit cache size\n      enableMutationObserver: true,\n      mutationDebounce: 150,\n      enableStats: true\n    });\n\n    // Configure caching for common selectors\n    domQueryCache.configureSelector('img', { \n      ttl: 3000, // Images change less frequently\n      enabled: true \n    });\n    domQueryCache.configureSelector('a[href]', { \n      ttl: 5000, // Links are fairly static\n      enabled: true \n    });\n    domQueryCache.configureSelector('img[data-src]', { \n      ttl: 2000, // Lazy images change more\n      enabled: true \n    });\n    domQueryCache.configureSelector('img[data-lazy]', { \n      ttl: 2000,\n      enabled: true \n    });\n    domQueryCache.configureSelector('[style*=\"background-image\"]', { \n      ttl: 4000,\n      enabled: true \n    });\n\n    console.log('\u2705 DOMQueryCache initialized (CR-015)');\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Failed to initialize DOMQueryCache:', error);\n  }\n\n  // Initialize DOM Batcher\n  let domBatcher = null;\n  try {\n    domBatcher = new DOMBatcherClass({\n      autoFlush: true,\n      flushDelay: 16,\n      enableStats: true\n    });\n\n    console.log('\u2705 DOMBatcher initialized (CR-015)');\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Failed to initialize DOMBatcher:', error);\n  }\n\n  // Store instances in global namespace\n  global.__ST.domQueryCache = domQueryCache;\n  global.__ST.domBatcher = domBatcher;\n\n  // Export convenience wrappers for easy access\n  global.__ST.cachedQuery = function(selector, options = {}) {\n    if (!domQueryCache) {\n      return Array.from(document.querySelectorAll(selector));\n    }\n    return domQueryCache.query(selector, options);\n  };\n\n  global.__ST.cachedQuerySingle = function(selector, options = {}) {\n    if (!domQueryCache) {\n      return document.querySelector(selector);\n    }\n    return domQueryCache.query(selector, { ...options, single: true });\n  };\n\n  global.__ST.batchRead = function(callback) {\n    if (!domBatcher) {\n      return Promise.resolve(callback());\n    }\n    return domBatcher.read(callback);\n  };\n\n  global.__ST.batchWrite = function(callback) {\n    if (!domBatcher) {\n      return Promise.resolve(callback());\n    }\n    return domBatcher.write(callback);\n  };\n\n  global.__ST.batchMeasure = function(element) {\n    if (!domBatcher) {\n      return Promise.resolve(element?.getBoundingClientRect() || null);\n    }\n    return domBatcher.measure(element);\n  };\n\n  // Export for backward compatibility\n  if (typeof window !== 'undefined') {\n    window.cachedQuery = global.__ST.cachedQuery;\n    window.cachedQuerySingle = global.__ST.cachedQuerySingle;\n    window.batchRead = global.__ST.batchRead;\n    window.batchWrite = global.__ST.batchWrite;\n    window.batchMeasure = global.__ST.batchMeasure;\n  }\n\n  // Report cache stats periodically in debug mode\n  if (global.__ST.DEBUG && !global.__ST.DEBUG.isProduction) {\n    setInterval(() => {\n      if (domQueryCache) {\n        const stats = domQueryCache.getStats();\n        console.log('\uD83D\uDCCA DOM Cache Stats:', stats);\n      }\n      if (domBatcher) {\n        const stats = domBatcher.getStats();\n        console.log('\uD83D\uDCCA DOM Batcher Stats:', stats);\n      }\n    }, 60000); // Every minute\n  }\n\n})(); // End DOM Caching IIFE\n\n// =============================================================================\n// 3. ERROR HANDLING SYSTEM - Early, so error handling is available\n// =============================================================================\n\n/**\n * Centralized Error Handling System\n * Provides unified error reporting, logging, and user feedback\n * Now with memory-safe bounded data structures and lifecycle management\n */\nclass ErrorHandlingSystem {\n  constructor(options = {}) {\n    this.options = {\n      enableConsoleLogging: options.enableConsoleLogging !== false,\n      enableUserNotifications: options.enableUserNotifications !== false,\n      enableErrorReporting: options.enableErrorReporting !== false,\n      maxErrorHistory: Math.min(options.maxErrorHistory || 100, 500), // Cap at 500\n      // Lightweight configuration - no heavy monitoring\n      enableSmartThrottling: options.enableSmartThrottling !== false,\n      maxNotificationsPerMinute: options.maxNotificationsPerMinute || 3,\n      errorRecoveryStrategies: options.errorRecoveryStrategies !== false,\n      minimalErrorLogging: options.minimalErrorLogging || false,\n      adaptiveErrorHandling: options.adaptiveErrorHandling !== false,\n      ...options\n    };\n\n    // Use memory-safe bounded data structures\n    const global = typeof globalThis !== 'undefined' ? globalThis : window;\n    const LRUCache = global.__ST?.LRUCache || Map;\n    const BoundedArray = global.__ST?.BoundedArray || Array;\n\n    this.notificationCounts = new LRUCache(100);\n    this.lastErrorTimes = new LRUCache(200);\n    this.recoveryAttempts = new LRUCache(50);\n    this.errorCounts = new LRUCache(300);\n\n    // Use bounded array for history\n    if (BoundedArray === Array) {\n      this.errorHistory = [];\n    } else {\n      this.errorHistory = new BoundedArray(this.options.maxErrorHistory);\n    }\n\n    this.initialized = false;\n\n    this.init();\n  }\n\n  init() {\n    if (this.initialized) {\n      return;\n    }\n\n    // Set up global error handlers\n    if (typeof window !== 'undefined') {\n      window.addEventListener('error', (event) => {\n        this.handleGlobalError(event.error, 'Global Error', {\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno\n        });\n      });\n\n      window.addEventListener('unhandledrejection', (event) => {\n        this.handleGlobalError(event.reason, 'Unhandled Promise Rejection', {\n          promise: event.promise\n        });\n      });\n    }\n\n    // Register with lifecycle manager for cleanup\n    const global = typeof globalThis !== 'undefined' ? globalThis : window;\n    if (global.__ST?.lifecycleManager) {\n      global.__ST.lifecycleManager.registerCleanupHandler((type) => {\n        if (type === 'preventive') {\n          this.trimHistory();\n        } else {\n          this.clearHistory();\n        }\n      });\n    }\n\n    this.initialized = true;\n    this.log('\u2705 Error handling system initialized with memory management', 'info');\n  }\n\n  /**\n   * Enhanced error handling\n   * @param {Error|string} error - The error object or message\n   * @param {string} context - Context where error occurred\n   * @param {Object} metadata - Additional error metadata\n   * @param {string} severity - Error severity: 'low', 'medium', 'high', 'critical'\n   * @param {Object} recoveryOptions - Recovery strategy options\n   */\n  handleError(error, context = 'Unknown', metadata = {}, severity = 'medium', recoveryOptions = {}) {\n    try {\n      const errorInfo = this.normalizeError(error, context, metadata, severity);\n\n      // Log the error\n      if (this.options.enableConsoleLogging) {\n        this.logError(errorInfo);\n      }\n\n      // Store in history\n      this.addToHistory(errorInfo);\n\n      // Count occurrences\n      this.trackErrorFrequency(errorInfo);\n\n      // Smart notification throttling\n      if (this.options.enableUserNotifications && this.shouldNotifyUser(errorInfo)) {\n        if (this.canNotifyUser(errorInfo)) {\n          this.notifyUser(errorInfo);\n        }\n      }\n\n      // Attempt automatic error recovery if enabled\n      if (this.options.errorRecoveryStrategies && recoveryOptions.attemptRecovery) {\n        this.attemptErrorRecovery(errorInfo, recoveryOptions);\n      }\n\n      return errorInfo;\n    } catch (handlingError) {\n      // Fallback error handling\n      console.error('\u274C Error in error handling system:', handlingError);\n      console.error('Original error:', error);\n    }\n  }\n\n  /**\n   * Handle global unhandled errors\n   */\n  handleGlobalError(error, type, details) {\n    this.handleError(error, `Global: ${type}`, details, 'high');\n  }\n\n  /**\n   * Normalize error into consistent format\n   */\n  normalizeError(error, context, metadata, severity) {\n    const timestamp = new Date().toISOString();\n    const id = this.generateErrorId();\n\n    let message, stack, name;\n\n    if (error instanceof Error) {\n      message = error.message;\n      stack = error.stack;\n      name = error.name;\n    } else if (typeof error === 'string') {\n      message = error;\n      name = 'CustomError';\n    } else {\n      message = String(error);\n      name = 'UnknownError';\n    }\n\n    return {\n      id,\n      timestamp,\n      message,\n      stack,\n      name,\n      context,\n      severity,\n      metadata: {\n        url: typeof window !== 'undefined' ? window.location?.href : 'N/A',\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'N/A',\n        ...metadata\n      }\n    };\n  }\n\n  /**\n   * Generate unique error ID\n   */\n  generateErrorId() {\n    return 'err_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 5);\n  }\n\n  /**\n   * Log error to console with appropriate formatting\n   */\n  logError(errorInfo) {\n    const { severity, context, message, id } = errorInfo;\n\n    const symbols = {\n      low: '\uD83D\uDCA1',\n      medium: '\u26A0\uFE0F',\n      high: '\u274C',\n      critical: '\uD83D\uDCA5'\n    };\n\n    const symbol = symbols[severity] || '\u26A0\uFE0F';\n\n    console.group(`${symbol} [${severity.toUpperCase()}] ${context}`);\n    console.error(`Message: ${message}`);\n    console.error(`ID: ${id}`);\n    console.error(`Time: ${errorInfo.timestamp}`);\n\n    if (errorInfo.stack) {\n      console.error('Stack:', errorInfo.stack);\n    }\n\n    if (Object.keys(errorInfo.metadata).length > 0) {\n      console.error('Metadata:', errorInfo.metadata);\n    }\n\n    console.groupEnd();\n  }\n\n  /**\n   * Add error to history - works with both regular array and BoundedArray\n   */\n  addToHistory(errorInfo) {\n    if (typeof this.errorHistory.unshift === 'function') {\n      // BoundedArray or regular array\n      this.errorHistory.unshift(errorInfo);\n      \n      // For regular arrays, maintain max history size\n      if (!this.errorHistory.maxSize && this.errorHistory.length > this.options.maxErrorHistory) {\n        this.errorHistory = this.errorHistory.slice(0, this.options.maxErrorHistory);\n      }\n    } else {\n      console.warn('Invalid errorHistory structure');\n    }\n  }\n\n  /**\n   * Track error frequency - works with both Map and LRUCache\n   */\n  trackErrorFrequency(errorInfo) {\n    const key = `${errorInfo.context}:${errorInfo.message}`;\n    const current = this.errorCounts.get(key) || 0;\n    this.errorCounts.set(key, current + 1);\n  }\n\n  /**\n   * Trim history for preventive cleanup\n   */\n  trimHistory() {\n    if (typeof this.errorHistory.clear === 'function') {\n      // Keep only recent errors for BoundedArray\n      const recentCount = Math.floor(this.options.maxErrorHistory * 0.5);\n      if (this.errorHistory.length > recentCount) {\n        const recent = this.errorHistory.slice(0, recentCount);\n        this.errorHistory.clear();\n        recent.forEach(error => this.errorHistory.push(error));\n      }\n    } else if (Array.isArray(this.errorHistory)) {\n      // Regular array\n      const keepCount = Math.floor(this.options.maxErrorHistory * 0.5);\n      this.errorHistory = this.errorHistory.slice(0, keepCount);\n    }\n    \n    console.log('\uD83E\uDDF9 Error history trimmed');\n  }\n\n  /**\n   * Determine if user should be notified\n   */\n  shouldNotifyUser(errorInfo) {\n    // Only notify for high and critical errors\n    if (!['high', 'critical'].includes(errorInfo.severity)) {\n      return false;\n    }\n\n    // Don't spam user with repeated errors\n    const key = `${errorInfo.context}:${errorInfo.message}`;\n    const count = this.errorCounts.get(key) || 0;\n\n    return count <= 3; // Only notify for first 3 occurrences\n  }\n\n  /**\n   * Smart notification throttling\n   */\n  canNotifyUser(errorInfo) {\n    const now = Date.now();\n    const minute = Math.floor(now / 60000);\n    const key = `${minute}`;\n    \n    // Check if we've exceeded notification limits this minute\n    const currentCount = this.notificationCounts.get(key) || 0;\n    if (currentCount >= this.options.maxNotificationsPerMinute) {\n      return false;\n    }\n    \n    // Check if this specific error was recently shown\n    const errorKey = `${errorInfo.context}:${errorInfo.name}`;\n    const lastShown = this.lastErrorTimes.get(errorKey);\n    if (lastShown && (now - lastShown) < 30000) { // 30 second cooldown\n      return false;\n    }\n    \n    // Update counters\n    this.notificationCounts.set(key, currentCount + 1);\n    this.lastErrorTimes.set(errorKey, now);\n    \n    return true;\n  }\n\n  /**\n   * Notify user about error\n   */\n  notifyUser(errorInfo) {\n    try {\n      const message = this.createUserFriendlyMessage(errorInfo);\n\n      // Route notification through service worker (content scripts can't access chrome.notifications directly)\n      if (typeof chrome !== 'undefined' && chrome.runtime) {\n        chrome.runtime.sendMessage({\n          cmd: 'show_notification',\n          title: 'StepTwo Gallery Scraper',\n          body: message,\n          iconUrl: 'icons/48.png',\n          notificationType: 'basic'\n        }).catch(error => {\n          console.error('Failed to send notification to service worker:', error);\n          // Fallback to console warning\n          console.warn('User notification (fallback):', message);\n        });\n      } else if (typeof window !== 'undefined') {\n        // Fallback to console warning for testing\n        console.warn('User notification:', message);\n      }\n    } catch (notificationError) {\n      console.error('Failed to notify user:', notificationError);\n    }\n  }\n\n  /**\n   * Create user-friendly error message\n   */\n  createUserFriendlyMessage(errorInfo) {\n    const contextMap = {\n      'scraping': 'There was an issue while scraping images.',\n      'download': 'Failed to download some images.',\n      'export': 'Export operation encountered a problem.',\n      'network': 'Network connection issue detected.',\n      'permission': 'Permission denied for this operation.'\n    };\n\n    for (const [key, friendlyMessage] of Object.entries(contextMap)) {\n      if (errorInfo.context.toLowerCase().includes(key)) {\n        return `${friendlyMessage} Error ID: ${errorInfo.id}`;\n      }\n    }\n\n    return `An error occurred in ${errorInfo.context}. Error ID: ${errorInfo.id}`;\n  }\n\n  /**\n   * Attempt automatic error recovery\n   */\n  attemptErrorRecovery(errorInfo, recoveryOptions) {\n    const recoveryKey = `${errorInfo.context}:${errorInfo.name}`;\n    const attempts = this.recoveryAttempts.get(recoveryKey) || 0;\n    \n    if (attempts >= 3) {\n      this.log(`\uD83D\uDED1 Max recovery attempts reached for ${recoveryKey}`, 'warn');\n      return false;\n    }\n    \n    this.recoveryAttempts.set(recoveryKey, attempts + 1);\n    \n    // Basic recovery strategies\n    switch (errorInfo.context) {\n      case 'Content Script':\n        this.recoverContentScript(recoveryOptions);\n        break;\n      case 'Smart Selection':\n        this.recoverSmartSelection(recoveryOptions);\n        break;\n      case 'Download Manager':\n        this.recoverDownload(recoveryOptions);\n        break;\n      default:\n        this.genericRecovery(errorInfo, recoveryOptions);\n    }\n    \n    return true;\n  }\n\n  /**\n   * Content script recovery strategies\n   */\n  recoverContentScript(options) {\n    this.log('\uD83D\uDD04 Attempting content script recovery...', 'info');\n    \n    // Clear any cached selectors\n    if (window.AdaptiveSelectorSystem) {\n      window.AdaptiveSelectorSystem.clearCache?.();\n    }\n    \n    // Retry with backup patterns\n    if (options.retryCallback) {\n      setTimeout(() => options.retryCallback(), 1000);\n    }\n  }\n\n  /**\n   * Smart selection recovery\n   */\n  recoverSmartSelection(options) {\n    this.log('\uD83C\uDFAF Attempting smart selection recovery...', 'info');\n    \n    // Use fallback selectors\n    if (options.fallbackSelectors) {\n      return options.fallbackSelectors;\n    }\n    \n    // Reduce confidence threshold temporarily\n    if (window.AdaptiveSelectorSystem) {\n      const system = window.AdaptiveSelectorSystem;\n      system.options.confidenceThreshold = Math.max(0.4, system.options.confidenceThreshold - 0.2);\n    }\n  }\n\n  /**\n   * Download recovery\n   */\n  recoverDownload(options) {\n    this.log('\u2B07\uFE0F Attempting download recovery...', 'info');\n    \n    // Retry with different approach\n    if (options.retryCallback) {\n      setTimeout(() => options.retryCallback(), 2000);\n    }\n  }\n\n  /**\n   * Generic error recovery\n   */\n  genericRecovery(errorInfo, options) {\n    this.log(`\uD83D\uDD27 Generic recovery for ${errorInfo.context}`, 'info');\n    \n    // Reset error count after successful recovery\n    setTimeout(() => {\n      const recoveryKey = `${errorInfo.context}:${errorInfo.name}`;\n      this.recoveryAttempts.delete(recoveryKey);\n    }, 300000); // 5 minutes\n  }\n\n  /**\n   * Utility logging method\n   */\n  log(message, level = 'info') {\n    if (this.options.enableConsoleLogging) {\n      const symbols = {\n        info: '\u2139\uFE0F',\n        warn: '\u26A0\uFE0F',\n        error: '\u274C',\n        success: '\u2705'\n      };\n      console.log(`${symbols[level] || '\u2139\uFE0F'} ${message}`);\n    }\n  }\n\n  /**\n   * Get error statistics\n   */\n  getErrorStats() {\n    const stats = {\n      totalErrors: this.errorHistory.length,\n      bySeverity: {},\n      byContext: {},\n      mostFrequent: [],\n      recentErrors: this.errorHistory.slice(0, 10)\n    };\n\n    // Count by severity\n    this.errorHistory.forEach(error => {\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n    });\n\n    // Count by context\n    this.errorHistory.forEach(error => {\n      const context = error.context.split(':')[0]; // Get main context\n      stats.byContext[context] = (stats.byContext[context] || 0) + 1;\n    });\n\n    // Most frequent errors\n    const sortedFrequencies = Array.from(this.errorCounts.entries())\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5);\n\n    stats.mostFrequent = sortedFrequencies.map(([key, count]) => ({\n      error: key,\n      count\n    }));\n\n    return stats;\n  }\n\n  /**\n   * Clear error history\n   */\n  clearHistory() {\n    if (typeof this.errorHistory.clear === 'function') {\n      this.errorHistory.clear();\n    } else if (Array.isArray(this.errorHistory)) {\n      this.errorHistory.length = 0;\n    }\n    \n    this.errorCounts.clear();\n    this.notificationCounts.clear();\n    this.lastErrorTimes.clear();\n    this.recoveryAttempts.clear();\n    this.log('\uD83D\uDDD1\uFE0F Error history cleared', 'info');\n  }\n}\n\n// Global error handler instance with singleton protection\nif (typeof window !== 'undefined') {\n  const global = typeof globalThis !== 'undefined' ? globalThis : window;\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n  \n  if (!global.__ST.ErrorHandlingSystemLoaded) {\n    global.__ST.ErrorHandlingSystemLoaded = true;\n    window.StepTwoErrorHandler = new ErrorHandlingSystem();\n  }\n}\n\n// =============================================================================\n// 3. INPUT VALIDATION SYSTEM\n// =============================================================================\n\n/**\n * Lightweight Input Validation and Sanitization System\n * Essential validation for security without heavy overhead\n */\nclass InputValidationSystem {\n  constructor(options = {}) {\n    this.options = {\n      // Validation strictness levels\n      strictMode: options.strictMode !== false,\n      allowDangerousUrls: options.allowDangerousUrls || false,\n      maxStringLength: options.maxStringLength || 10000,\n      maxArrayLength: options.maxArrayLength || 1000,\n      \n      // Security settings\n      enableXSSProtection: options.enableXSSProtection !== false,\n      enableSQLInjectionProtection: options.enableSQLInjectionProtection !== false,\n      \n      // URL validation\n      allowedProtocols: options.allowedProtocols || ['http:', 'https:', 'data:', 'blob:'],\n      blockedDomains: options.blockedDomains || [],\n      \n      // File validation\n      allowedFileTypes: options.allowedFileTypes || ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'],\n      maxFileSize: options.maxFileSize || 50 * 1024 * 1024, // 50MB\n      \n      ...options\n    };\n\n    // Lightweight XSS protection patterns\n    this.xssPatterns = [\n      /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n      /<iframe\\b[^>]*>/gi\n    ];\n\n    // Basic SQL injection patterns\n    this.sqlPatterns = [\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/gi,\n      /['\"]\\s*;\\s*--/gi,\n      /\\/\\*[\\s\\S]*?\\*\\//gi\n    ];\n\n    console.log('\u2705 Input Validation System initialized');\n  }\n\n  /**\n   * Main validation entry point\n   */\n  validate(input, type, options = {}) {\n    try {\n      const validationConfig = {\n        ...this.options,\n        ...options,\n        type,\n        originalInput: input\n      };\n\n      return this.performValidation(input, type, validationConfig);\n    } catch (error) {\n      return {\n        valid: false,\n        sanitized: input,\n        errors: [`Validation system error: ${error.message}`],\n        type\n      };\n    }\n  }\n\n  /**\n   * Perform validation based on type\n   */\n  performValidation(input, type, config) {\n    switch (type) {\n      case 'url':\n        return this.validateUrl(input, config);\n      case 'string':\n        return this.validateString(input, config);\n      case 'css_selector':\n        return this.validateCssSelector(input, config);\n      case 'filename':\n        return this.validateFilename(input, config);\n      case 'user_input':\n        return this.validateUserInput(input, config);\n      default:\n        return this.validateGeneric(input, config);\n    }\n  }\n\n  /**\n   * URL validation with security checks\n   */\n  validateUrl(url, config) {\n    const errors = [];\n    let sanitized = url;\n\n    try {\n      const urlObj = new URL(url);\n      \n      // Protocol validation\n      if (!this.options.allowedProtocols.includes(urlObj.protocol)) {\n        errors.push(`Protocol '${urlObj.protocol}' not allowed`);\n      }\n\n      // Check for dangerous URL patterns\n      if (!this.options.allowDangerousUrls) {\n        const dangerousPatterns = [\n          /javascript:/i,\n          /data:.*script/i,\n          /vbscript:/i\n        ];\n\n        for (const pattern of dangerousPatterns) {\n          if (pattern.test(url)) {\n            errors.push('URL contains potentially dangerous content');\n            break;\n          }\n        }\n      }\n\n      // XSS protection in URL parameters\n      if (this.options.enableXSSProtection) {\n        const urlString = urlObj.toString();\n        for (const pattern of this.xssPatterns) {\n          if (pattern.test(urlString)) {\n            errors.push('URL contains XSS patterns');\n            sanitized = this.sanitizeXSS(url);\n            break;\n          }\n        }\n      }\n\n    } catch (urlError) {\n      errors.push(`Invalid URL format: ${urlError.message}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      sanitized,\n      errors,\n      type: 'url'\n    };\n  }\n\n  /**\n   * String validation with XSS protection\n   */\n  validateString(str, config) {\n    const errors = [];\n    let sanitized = str;\n\n    // Type check\n    if (typeof str !== 'string') {\n      sanitized = String(str);\n    }\n\n    // Length validation\n    if (sanitized.length > this.options.maxStringLength) {\n      errors.push(`String too long: ${sanitized.length} > ${this.options.maxStringLength}`);\n      sanitized = sanitized.substring(0, this.options.maxStringLength);\n    }\n\n    // XSS protection\n    if (this.options.enableXSSProtection) {\n      sanitized = this.sanitizeXSS(sanitized);\n    }\n\n    // SQL injection protection\n    if (this.options.enableSQLInjectionProtection) {\n      for (const pattern of this.sqlPatterns) {\n        if (pattern.test(sanitized)) {\n          errors.push('String contains SQL injection patterns');\n          sanitized = this.sanitizeSQLInjection(sanitized);\n          break;\n        }\n      }\n    }\n\n    // Control character removal\n    sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F]/g, '');\n\n    return {\n      valid: errors.length === 0,\n      sanitized,\n      errors,\n      type: 'string'\n    };\n  }\n\n  /**\n   * CSS selector validation\n   */\n  validateCssSelector(selector, config) {\n    const errors = [];\n    let sanitized = selector;\n\n    try {\n      // Test if valid CSS selector\n      document.querySelector(selector);\n      \n      // Check for dangerous CSS patterns\n      const dangerousPatterns = [\n        /javascript:/i,\n        /expression\\(/i,\n        /url\\([^)]*script/i\n      ];\n\n      for (const pattern of dangerousPatterns) {\n        if (pattern.test(selector)) {\n          errors.push('CSS selector contains dangerous patterns');\n          break;\n        }\n      }\n\n    } catch (selectorError) {\n      errors.push(`Invalid CSS selector: ${selectorError.message}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      sanitized,\n      errors,\n      type: 'css_selector'\n    };\n  }\n\n  /**\n   * Filename validation\n   */\n  validateFilename(filename, config) {\n    const errors = [];\n    let sanitized = filename;\n\n    // Remove dangerous characters\n    sanitized = sanitized.replace(/[<>:\"/\\\\|?*\\x00-\\x1F]/g, '');\n    \n    // Length validation\n    if (sanitized.length > 255) {\n      errors.push('Filename too long');\n      sanitized = sanitized.substring(0, 255);\n    }\n\n    // File extension validation\n    if (this.options.allowedFileTypes.length > 0) {\n      const extension = sanitized.split('.').pop()?.toLowerCase();\n      if (extension && !this.options.allowedFileTypes.includes(extension)) {\n        errors.push(`File type '${extension}' not allowed`);\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      sanitized,\n      errors,\n      type: 'filename'\n    };\n  }\n\n  /**\n   * User input validation (strict)\n   */\n  validateUserInput(input, config) {\n    // Apply strict validation for user inputs\n    const strictConfig = {\n      ...config,\n      enableXSSProtection: true,\n      enableSQLInjectionProtection: true,\n      strictMode: true\n    };\n\n    return this.validateString(input, strictConfig);\n  }\n\n  /**\n   * Generic validation fallback\n   */\n  validateGeneric(input, config) {\n    const errors = [];\n    let sanitized = input;\n\n    // Basic sanitization\n    if (typeof input === 'string') {\n      sanitized = this.sanitizeBasic(input);\n    }\n\n    return {\n      valid: true,\n      sanitized,\n      errors,\n      type: 'generic'\n    };\n  }\n\n  /**\n   * XSS sanitization\n   */\n  sanitizeXSS(str) {\n    let sanitized = str;\n    \n    for (const pattern of this.xssPatterns) {\n      sanitized = sanitized.replace(pattern, '');\n    }\n\n    // Encode HTML entities\n    sanitized = sanitized\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#x27;');\n\n    return sanitized;\n  }\n\n  /**\n   * SQL injection sanitization\n   */\n  sanitizeSQLInjection(str) {\n    let sanitized = str;\n    \n    for (const pattern of this.sqlPatterns) {\n      sanitized = sanitized.replace(pattern, '');\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Basic sanitization\n   */\n  sanitizeBasic(str) {\n    return str\n      .replace(/[\\x00-\\x1F\\x7F]/g, '') // Remove control characters\n      .trim();\n  }\n}\n\n// Create global instance with singleton protection\nif (typeof window !== 'undefined') {\n  const global = typeof globalThis !== 'undefined' ? globalThis : window;\n  if (!global.__ST) {\n    global.__ST = {};\n  }\n  \n  if (!global.__ST.InputValidationSystemLoaded) {\n    global.__ST.InputValidationSystemLoaded = true;\n    window.inputValidator = new InputValidationSystem({\n      strictMode: true,\n      enableXSSProtection: true,\n      enableSQLInjectionProtection: true\n    });\n  }\n}\n\n// =============================================================================\n// 4. LIBRARY UTILITIES - Essential utilities for CSS selectors and DOM operations\n// =============================================================================\n\n// Enhanced CSS Selector Validation and Safe Query Utilities\nclass StepTwoSelectorUtils {\n\n  // Safe CSS selector validation with DoS protection\n  static validateCSSSelector(selector) {\n    if (!selector || typeof selector !== 'string') {\n      return { valid: false, error: 'Selector cannot be empty' };\n    }\n\n    // Trim whitespace\n    selector = selector.trim();\n    if (!selector) {\n      return { valid: false, error: 'Selector cannot be empty' };\n    }\n\n    // DoS Protection: Check selector length\n    if (selector.length > 1000) {\n      return {\n        valid: false,\n        error: 'Selector too long (max 1000 characters)',\n        details: 'Long selectors can cause performance issues'\n      };\n    }\n\n    // DoS Protection: Check for excessive nesting levels\n    const nestingLevel = (selector.match(/\\s+/g) || []).length;\n    if (nestingLevel > 10) {\n      return {\n        valid: false,\n        error: 'Selector too complex (max 10 nesting levels)',\n        details: 'Complex selectors can cause performance issues'\n      };\n    }\n\n    // Test for valid CSS syntax\n    try {\n      document.querySelector(selector);\n      return { valid: true };\n    } catch (error) {\n      return {\n        valid: false,\n        error: `Invalid CSS selector: ${error.message}`,\n        details: 'Selector syntax is not valid CSS'\n      };\n    }\n  }\n\n  // Safe query selector with validation and fallback\n  static safeQuerySelector(selector, context = document) {\n    const validation = this.validateCSSSelector(selector);\n    if (!validation.valid) {\n      console.warn('Invalid CSS selector:', validation.error);\n      return null;\n    }\n\n    try {\n      return context.querySelector(selector);\n    } catch (error) {\n      console.warn('Error executing selector:', error.message);\n      return null;\n    }\n  }\n\n  // Safe query selector all with validation and performance limits\n  static safeQuerySelectorAll(selector, context = document, maxResults = 1000) {\n    const validation = this.validateCSSSelector(selector);\n    if (!validation.valid) {\n      console.warn('Invalid CSS selector:', validation.error);\n      return [];\n    }\n\n    try {\n      const elements = Array.from(context.querySelectorAll(selector));\n      \n      // Limit results to prevent memory issues\n      if (elements.length > maxResults) {\n        console.warn(`Selector returned ${elements.length} elements, limiting to ${maxResults}`);\n        return elements.slice(0, maxResults);\n      }\n      \n      return elements;\n    } catch (error) {\n      console.warn('Error executing selector:', error.message);\n      return [];\n    }\n  }\n\n  // Generate CSS path for an element\n  static getElementCSSPath(element) {\n    if (!(element instanceof Element)) {\n      return '';\n    }\n\n    const path = [];\n    while (element && element.nodeType === Node.ELEMENT_NODE) {\n      let selector = element.nodeName.toLowerCase();\n      \n      if (element.id) {\n        selector += '#' + element.id;\n        path.unshift(selector);\n        break;\n      } else {\n        const siblings = element.parentNode ? Array.from(element.parentNode.children) : [];\n        const sameTagSiblings = siblings.filter(sibling => sibling.nodeName === element.nodeName);\n        \n        if (sameTagSiblings.length > 1) {\n          const index = sameTagSiblings.indexOf(element) + 1;\n          selector += `:nth-of-type(${index})`;\n        }\n      }\n      \n      path.unshift(selector);\n      element = element.parentElement;\n    }\n\n    return path.join(' > ');\n  }\n\n  // Check if element is visible\n  static isElementVisible(element) {\n    if (!(element instanceof Element)) {\n      return false;\n    }\n\n    const style = getComputedStyle(element);\n    const rect = element.getBoundingClientRect();\n\n    return (\n      style.display !== 'none' &&\n      style.visibility !== 'hidden' &&\n      style.opacity !== '0' &&\n      rect.width > 0 &&\n      rect.height > 0\n    );\n  }\n\n  // Get element dimensions safely\n  static getElementDimensions(element) {\n    if (!(element instanceof Element)) {\n      return { width: 0, height: 0, x: 0, y: 0 };\n    }\n\n    try {\n      const rect = element.getBoundingClientRect();\n      return {\n        width: rect.width,\n        height: rect.height,\n        x: rect.left,\n        y: rect.top\n      };\n    } catch (error) {\n      console.warn('Error getting element dimensions:', error);\n      return { width: 0, height: 0, x: 0, y: 0 };\n    }\n  }\n}\n\n// Worker Manager - Memory-safe worker management for offloading heavy tasks\nclass WorkerManager {\n  constructor() {\n    // Use memory-safe bounded data structures\n    const global = typeof globalThis !== 'undefined' ? globalThis : window;\n    const LRUCache = global.__ST?.LRUCache || Map;\n    \n    this.workers = new LRUCache(10); // Limit to 10 workers max\n    this.workerIndex = 0;\n    this.maxWorkers = Math.min(4, navigator.hardwareConcurrency || 2);\n\n    // Register cleanup handler\n    if (global.__ST?.lifecycleManager) {\n      global.__ST.lifecycleManager.registerCleanupHandler(() => {\n        this.terminateAll();\n      }, true); // Emergency cleanup\n    }\n  }\n\n  // Create a worker from inline code\n  createInlineWorker(workerCode, workerName = `worker_${this.workerIndex++}`) {\n    try {\n      const blob = new Blob([workerCode], { type: 'application/javascript' });\n      const workerUrl = URL.createObjectURL(blob);\n      const worker = new Worker(workerUrl);\n      \n      // Register with resource tracker\n      const global = typeof globalThis !== 'undefined' ? globalThis : window;\n      if (global.__ST?.resourceTracker) {\n        global.__ST.resourceTracker.trackWorker(worker);\n      }\n      \n      this.workers.set(workerName, {\n        worker,\n        url: workerUrl,\n        created: Date.now()\n      });\n\n      // Clean up URL when worker terminates\n      worker.addEventListener('error', () => {\n        this.terminateWorker(workerName);\n      });\n\n      return workerName;\n    } catch (error) {\n      console.error('Failed to create inline worker:', error);\n      return null;\n    }\n  }\n\n  // Send message to worker\n  sendMessage(workerName, message) {\n    const workerData = this.workers.get(workerName);\n    if (!workerData) {\n      console.error(`Worker ${workerName} not found`);\n      return Promise.reject(new Error(`Worker ${workerName} not found`));\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageId = Date.now() + Math.random();\n      \n      const handleMessage = (event) => {\n        if (event.data.messageId === messageId) {\n          workerData.worker.removeEventListener('message', handleMessage);\n          if (event.data.error) {\n            reject(new Error(event.data.error));\n          } else {\n            resolve(event.data.result);\n          }\n        }\n      };\n\n      workerData.worker.addEventListener('message', handleMessage);\n      workerData.worker.postMessage({ ...message, messageId });\n\n      // Timeout after 30 seconds\n      setTimeout(() => {\n        workerData.worker.removeEventListener('message', handleMessage);\n        reject(new Error('Worker timeout'));\n      }, 30000);\n    });\n  }\n\n  // Terminate specific worker\n  terminateWorker(workerName) {\n    const workerData = this.workers.get(workerName);\n    if (workerData) {\n      workerData.worker.terminate();\n      URL.revokeObjectURL(workerData.url);\n      this.workers.delete(workerName);\n    }\n  }\n\n  // Terminate all workers\n  terminateAll() {\n    for (const [workerName] of this.workers) {\n      this.terminateWorker(workerName);\n    }\n  }\n\n  // Get worker status\n  getWorkerStatus() {\n    const status = {};\n    for (const [name, data] of this.workers) {\n      status[name] = {\n        created: data.created,\n        age: Date.now() - data.created\n      };\n    }\n    return status;\n  }\n}\n\n// Make utilities available globally\nif (typeof window !== 'undefined') {\n  window.StepTwoSelectorUtils = StepTwoSelectorUtils;\n  window.WorkerManager = WorkerManager;\n  \n  // Create global worker manager instance\n  if (!window.workerManager) {\n    window.workerManager = new WorkerManager();\n  }\n}\n\nconsole.log('\u2705 Library utilities loaded');\n\n// =============================================================================\n// 5. SERVICE WORKER FETCH UTILITIES - Critical for MV3 compliance\n// =============================================================================\n\nclass ServiceWorkerFetch {\n  // Standard fetch replacement using service worker\n  static async fetch(url, options = {}) {\n    try {\n      const response = await chrome.runtime.sendMessage({\n        action: 'fetch_url',\n        url: url,\n        options: options\n      });\n\n      if (!response.success) {\n        throw new Error(response.error || 'Service worker fetch failed');\n      }\n\n      // Create a Response-like object for compatibility\n      return {\n        ok: response.status >= 200 && response.status < 300,\n        status: response.status,\n        statusText: response.statusText,\n        headers: new Map(Object.entries(response.headers)),\n        \n        // Data access methods\n        async json() {\n          return typeof response.data === 'string' ? JSON.parse(response.data) : response.data;\n        },\n        \n        async text() {\n          return typeof response.data === 'string' ? response.data : \n                 (response.data instanceof ArrayBuffer ? new TextDecoder().decode(response.data) : String(response.data));\n        },\n        \n        async arrayBuffer() {\n          return response.data instanceof ArrayBuffer ? response.data : \n                 new TextEncoder().encode(String(response.data)).buffer;\n        },\n        \n        async blob() {\n          const data = response.data instanceof ArrayBuffer ? response.data : \n                      new TextEncoder().encode(String(response.data)).buffer;\n          return new Blob([data], { type: response.contentType || 'application/octet-stream' });\n        }\n      };\n    } catch (error) {\n      console.error('ServiceWorkerFetch error:', error);\n      throw error;\n    }\n  }\n\n  // Image-specific fetch replacement\n  static async fetchImage(url, options = {}) {\n    try {\n      const response = await chrome.runtime.sendMessage({\n        action: 'fetch_image',\n        url: url,\n        options: options\n      });\n\n      if (!response.success) {\n        throw new Error(response.error || 'Service worker image fetch failed');\n      }\n\n      // Return blob for image data\n      const blob = new Blob([response.data], { type: response.contentType });\n      return {\n        ok: true,\n        status: response.status,\n        blob: () => Promise.resolve(blob),\n        arrayBuffer: () => Promise.resolve(response.data)\n      };\n    } catch (error) {\n      console.error('ServiceWorkerFetch image error:', error);\n      throw error;\n    }\n  }\n\n  // Image validation (HEAD request) replacement\n  static async validateImage(url, options = {}) {\n    try {\n      const response = await chrome.runtime.sendMessage({\n        action: 'validate_image',\n        url: url,\n        options: options\n      });\n\n      if (!response.success) {\n        throw new Error(response.error || 'Service worker image validation failed');\n      }\n\n      return {\n        ok: response.valid,\n        status: response.status,\n        headers: new Map([\n          ['content-type', response.contentType],\n          ['content-length', response.size?.toString()]\n        ].filter(([k, v]) => v !== null))\n      };\n    } catch (error) {\n      console.error('ServiceWorkerFetch validation error:', error);\n      throw error;\n    }\n  }\n\n  // Test service worker connectivity\n  static async testConnection() {\n    try {\n      const response = await chrome.runtime.sendMessage({ action: 'ping' });\n      return response?.success === true;\n    } catch (error) {\n      console.error('ServiceWorkerFetch connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export for global use\nif (typeof window !== 'undefined') {\n  window.ServiceWorkerFetch = ServiceWorkerFetch;\n  \n  // Override global fetch for MV3 compliance in extension context\n  if (typeof chrome !== 'undefined' && chrome.runtime) {\n    window.extensionFetch = ServiceWorkerFetch.fetch;\n  }\n}\n\nconsole.log('\u2705 ServiceWorker fetch utilities loaded');\n\n// =============================================================================\n// 6. CONTENT CORE - Essential helper functions for robust web scraping\n// =============================================================================\n\n// Prevent duplicate initialization\nif (!window.RobustHelpers) {\n  window.RobustHelpers = true;\n\n  class RobustHelpers {\n\n    /**\n     * Enhanced waitForSelector with multiple strategies and robust error handling\n     * @param {string|string[]} selectors - CSS selector(s) to wait for\n     * @param {Object} options - Configuration options\n     * @returns {Promise<Element>} - The found element\n     */\n    static async waitForSelector(selectors, options = {}) {\n      const config = {\n        timeout: options.timeout || 10000,\n        interval: options.interval || 100,\n        visible: options.visible !== false,\n        enabled: options.enabled !== false,\n        multiple: options.multiple || false,\n        retries: options.retries || 3,\n        throwOnTimeout: options.throwOnTimeout !== false,\n        context: options.context || document,\n        ...options\n      };\n\n      // Normalize selectors to array\n      const selectorArray = Array.isArray(selectors) ? selectors : [selectors];\n\n      for (let attempt = 1; attempt <= config.retries; attempt++) {\n        try {\n          const result = await this._waitForSelectorAttempt(selectorArray, config);\n          if (result) {\n            console.log(`\u2705 Selector found on attempt ${attempt}:`,\n              Array.isArray(selectors) ? selectors[0] : selectors);\n            return config.multiple ? result : result[0];\n          }\n        } catch (error) {\n          console.warn(`\u26A0\uFE0F Attempt ${attempt} failed:`, error.message);\n          if (attempt === config.retries) {\n            if (config.throwOnTimeout) {\n              throw new Error(`Failed to find selector after ${config.retries} attempts: ${selectorArray.join(', ')}`);\n            }\n            return null;\n          }\n          // Wait before retry\n          await this.sleep(config.interval * attempt);\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * Single attempt to find selector\n     * @private\n     */\n    static async _waitForSelectorAttempt(selectors, config) {\n      const startTime = Date.now();\n\n      while (Date.now() - startTime < config.timeout) {\n        for (const selector of selectors) {\n          try {\n            const elements = config.multiple\n              ? Array.from(config.context.querySelectorAll(selector))\n              : [config.context.querySelector(selector)].filter(Boolean);\n\n            if (elements.length > 0) {\n              // Filter by visibility if required\n              const validElements = config.visible\n                ? elements.filter(el => this.isElementVisible(el))\n                : elements;\n\n              // Filter by enabled state if required\n              const enabledElements = config.enabled\n                ? validElements.filter(el => this.isElementEnabled(el))\n                : validElements;\n\n              if (enabledElements.length > 0) {\n                return enabledElements;\n              }\n            }\n          } catch (error) {\n            console.warn(`Invalid selector \"${selector}\":`, error.message);\n          }\n        }\n\n        await this.sleep(config.interval);\n      }\n\n      return null;\n    }\n\n    /**\n     * Enhanced image gathering with comprehensive URL resolution and validation\n     * @param {Object} options - Gathering options\n     * @returns {Promise<Array>} - Array of image objects\n     */\n    static async gatherImages(options = {}) {\n      const config = {\n        selectors: options.selectors || [\n          'img[src]',\n          'img[data-src]',\n          'img[data-lazy-src]',\n          '[style*=\"background-image\"]',\n          'picture img',\n          'figure img',\n          '.image img',\n          '[data-background]'\n        ],\n        minWidth: options.minWidth || 0,\n        minHeight: options.minHeight || 0,\n        formats: options.formats || ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'],\n        includeThumbnails: options.includeThumbnails !== false,\n        includeMetadata: options.includeMetadata !== false,\n        deduplicateUrls: options.deduplicateUrls !== false,\n        resolveUrls: options.resolveUrls !== false,\n        validateImages: options.validateImages !== false,\n        ...options\n      };\n\n      const imageResults = [];\n      const seenUrls = new Set();\n\n      // Gather from direct img elements\n      for (const selector of config.selectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n\n          for (const element of elements) {\n            const imageData = await this.extractImageFromElement(element, config);\n\n            if (imageData && this.validateImageData(imageData, config)) {\n              const normalizedUrl = this.normalizeUrl(imageData.url);\n\n              if (!config.deduplicateUrls || !seenUrls.has(normalizedUrl)) {\n                seenUrls.add(normalizedUrl);\n                imageResults.push(imageData);\n              }\n            }\n          }\n        } catch (error) {\n          console.warn(`Error processing selector \"${selector}\":`, error);\n        }\n      }\n\n      console.log(`\uD83D\uDDBC\uFE0F Gathered ${imageResults.length} images from ${seenUrls.size} unique URLs`);\n      return imageResults;\n    }\n\n    /**\n     * Extract image data from a single element\n     * @param {Element} element - DOM element to extract from\n     * @param {Object} config - Configuration options\n     * @returns {Promise<Object|null>} - Image data object or null\n     */\n    static async extractImageFromElement(element, config = {}) {\n      try {\n        let url = null;\n        let thumbnailUrl = null;\n\n        // Try multiple URL sources\n        if (element.tagName === 'IMG') {\n          url = element.src || element.dataset.src || element.dataset.lazySrc ||\n                element.dataset.original || element.getAttribute('data-url');\n          thumbnailUrl = element.dataset.thumbnail || element.dataset.thumb;\n        } else {\n          // Check for background images\n          const style = window.getComputedStyle(element);\n          const backgroundImage = style.backgroundImage;\n          if (backgroundImage && backgroundImage !== 'none') {\n            const matches = backgroundImage.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n            url = matches ? matches[1] : null;\n          }\n\n          // Check data attributes\n          url = url || element.dataset.background || element.dataset.image;\n        }\n\n        if (!url) {return null;}\n\n        // Normalize and validate URL\n        const normalizedUrl = this.normalizeUrl(url);\n        if (!normalizedUrl || !this.isValidImageUrl(normalizedUrl, config.formats)) {\n          return null;\n        }\n\n        // Get element dimensions\n        const rect = element.getBoundingClientRect();\n        const dimensions = await this.getImageDimensions(normalizedUrl).catch(() => ({ width: 0, height: 0 }));\n\n        // Build image data object\n        const imageData = {\n          url: normalizedUrl,\n          thumbnailUrl: thumbnailUrl ? this.normalizeUrl(thumbnailUrl) : null,\n          element: element,\n          dimensions: {\n            natural: dimensions,\n            displayed: {\n              width: rect.width,\n              height: rect.height\n            }\n          },\n          metadata: config.includeMetadata ? await this.extractImageMetadata(element, normalizedUrl) : null,\n          timestamp: Date.now()\n        };\n\n        return imageData;\n      } catch (error) {\n        console.warn('Error extracting image from element:', error);\n        return null;\n      }\n    }\n\n    /**\n     * Comprehensive URL normalization\n     * @param {string} url - URL to normalize\n     * @param {Object} options - Normalization options\n     * @returns {string|null} - Normalized URL or null if invalid\n     */\n    static normalizeUrl(url, options = {}) {\n      if (!url || typeof url !== 'string') {return null;}\n\n      try {\n        // Clean the URL\n        let cleanUrl = url.trim();\n\n        // Remove quotes and decode if needed\n        cleanUrl = cleanUrl.replace(/^['\"]|['\"]$/g, '');\n\n        // Handle data URLs\n        if (cleanUrl.startsWith('data:')) {\n          return options.allowDataUrls !== false ? cleanUrl : null;\n        }\n\n        // Handle protocol-relative URLs\n        if (cleanUrl.startsWith('//')) {\n          cleanUrl = window.location.protocol + cleanUrl;\n        }\n\n        // Handle relative URLs\n        if (!cleanUrl.match(/^https?:/)) {\n          cleanUrl = new URL(cleanUrl, window.location.href).href;\n        }\n\n        // Create URL object for validation and normalization\n        const urlObj = new URL(cleanUrl);\n\n        return urlObj.href;\n      } catch (error) {\n        console.warn('URL normalization failed:', error);\n        return null;\n      }\n    }\n\n    /**\n     * Validate if URL is a valid image URL\n     * @param {string} url - URL to validate\n     * @param {Array<string>} allowedFormats - Allowed image formats\n     * @returns {boolean} - True if valid image URL\n     */\n    static isValidImageUrl(url, allowedFormats = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg']) {\n      if (!url) {return false;}\n\n      try {\n        const urlObj = new URL(url);\n\n        // Check for data URLs\n        if (urlObj.protocol === 'data:') {\n          return urlObj.pathname.startsWith('image/');\n        }\n\n        // Extract file extension\n        const pathname = urlObj.pathname.toLowerCase();\n        const extension = pathname.split('.').pop();\n\n        // Check if extension is in allowed formats\n        if (allowedFormats.includes(extension)) {\n          return true;\n        }\n\n        // Check for common image URL patterns\n        const imagePatterns = [\n          /\\/images?\\//,\n          /\\/img\\//,\n          /\\/photos?\\//,\n          /\\/gallery\\//,\n          /\\/media\\//,\n          /\\.(jpg|jpeg|png|gif|webp|svg)(\\?|$)/i\n        ];\n\n        return imagePatterns.some(pattern => pattern.test(url));\n      } catch (error) {\n        return false;\n      }\n    }\n\n    /**\n     * Check if element is visible\n     * @param {Element} element - Element to check\n     * @returns {boolean} - True if visible\n     */\n    static isElementVisible(element) {\n      if (!element) {return false;}\n\n      const rect = element.getBoundingClientRect();\n      const style = window.getComputedStyle(element);\n\n      return rect.width > 0 &&\n             rect.height > 0 &&\n             style.visibility !== 'hidden' &&\n             style.opacity !== '0' &&\n             style.display !== 'none' &&\n             element.offsetParent !== null;\n    }\n\n    /**\n     * Check if element is enabled/interactive\n     * @param {Element} element - Element to check\n     * @returns {boolean} - True if enabled\n     */\n    static isElementEnabled(element) {\n      if (!element) {return false;}\n\n      const style = window.getComputedStyle(element);\n      return !element.disabled &&\n             style.pointerEvents !== 'none' &&\n             !element.hasAttribute('aria-disabled');\n    }\n\n    /**\n     * Click element with retries and various strategies\n     * @param {Element} element - Element to click\n     * @param {Object} options - Click options\n     * @returns {Promise<boolean>} - True if click succeeded\n     */\n    static async clickElement(element, options = {}) {\n      const config = {\n        retries: options.retries || 3,\n        scrollIntoView: options.scrollIntoView !== false,\n        waitAfterScroll: options.waitAfterScroll || 300,\n        clickStrategies: options.clickStrategies || ['click', 'dispatchEvent', 'mouseEvents'],\n        ...options\n      };\n\n      if (!element) {return false;}\n\n      for (let attempt = 1; attempt <= config.retries; attempt++) {\n        try {\n          // Scroll into view if requested\n          if (config.scrollIntoView) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            await this.sleep(config.waitAfterScroll);\n          }\n\n          // Check if element is clickable\n          if (!this.isElementVisible(element) || !this.isElementEnabled(element)) {\n            throw new Error('Element is not clickable');\n          }\n\n          // Try different click strategies\n          for (const strategy of config.clickStrategies) {\n            try {\n              if (strategy === 'click') {\n                element.click();\n              } else if (strategy === 'dispatchEvent') {\n                element.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true }));\n              } else if (strategy === 'mouseEvents') {\n                element.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));\n                element.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));\n                element.dispatchEvent(new MouseEvent('click', { bubbles: true }));\n              }\n\n              console.log(`\u2705 Click succeeded with strategy \"${strategy}\" on attempt ${attempt}`);\n              return true;\n            } catch (strategyError) {\n              console.warn(`Click strategy \"${strategy}\" failed:`, strategyError);\n            }\n          }\n\n          throw new Error('All click strategies failed');\n        } catch (error) {\n          console.warn(`Click attempt ${attempt} failed:`, error.message);\n          if (attempt === config.retries) {\n            return false;\n          }\n          await this.sleep(200 * attempt);\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Extract text content with various fallbacks\n     * @param {Element} element - Element to extract text from\n     * @param {Object} options - Extraction options\n     * @returns {string} - Extracted text\n     */\n    static extractText(element, options = {}) {\n      if (!element) {return '';}\n\n      const config = {\n        trim: options.trim !== false,\n        preserveLineBreaks: options.preserveLineBreaks || false,\n        maxLength: options.maxLength || null,\n        fallbackToTitle: options.fallbackToTitle !== false,\n        fallbackToAlt: options.fallbackToAlt !== false,\n        ...options\n      };\n\n      let text = '';\n\n      // Try various text extraction methods\n      if (element.textContent) {\n        text = element.textContent;\n      } else if (element.innerText) {\n        text = element.innerText;\n      } else if (config.fallbackToTitle && element.title) {\n        text = element.title;\n      } else if (config.fallbackToAlt && element.alt) {\n        text = element.alt;\n      }\n\n      // Process the text\n      if (config.trim) {\n        text = text.trim();\n      }\n\n      if (!config.preserveLineBreaks) {\n        text = text.replace(/\\s+/g, ' ');\n      }\n\n      if (config.maxLength && text.length > config.maxLength) {\n        text = text.substring(0, config.maxLength) + '...';\n      }\n\n      return text;\n    }\n\n    /**\n     * Sleep utility\n     * @param {number} ms - Milliseconds to sleep\n     * @returns {Promise} - Promise that resolves after delay\n     */\n    static sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    /**\n     * Get image dimensions\n     * @param {string} url - Image URL\n     * @returns {Promise<Object>} - Object with width and height\n     */\n    static getImageDimensions(url) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => resolve({ width: img.naturalWidth, height: img.naturalHeight });\n        img.onerror = () => reject(new Error('Failed to load image'));\n        img.src = url;\n      });\n    }\n\n    /**\n     * Extract image metadata\n     * @param {Element} element - Image element\n     * @param {string} url - Image URL\n     * @returns {Promise<Object>} - Metadata object\n     */\n    static async extractImageMetadata(element, url) {\n      const metadata = {\n        alt: element.alt || '',\n        title: element.title || '',\n        className: element.className || '',\n        id: element.id || '',\n        src: url,\n        format: this.getImageFormat(url),\n        attributes: {}\n      };\n\n      // Extract custom data attributes\n      for (const attr of element.attributes) {\n        if (attr.name.startsWith('data-')) {\n          metadata.attributes[attr.name] = attr.value;\n        }\n      }\n\n      return metadata;\n    }\n\n    /**\n     * Get image format from URL\n     * @param {string} url - Image URL\n     * @returns {string} - Image format\n     */\n    static getImageFormat(url) {\n      try {\n        const urlObj = new URL(url);\n        const extension = urlObj.pathname.split('.').pop().toLowerCase();\n        return extension || 'unknown';\n      } catch {\n        return 'unknown';\n      }\n    }\n\n    /**\n     * Validate image data against criteria\n     * @param {Object} imageData - Image data object\n     * @param {Object} config - Validation config\n     * @returns {boolean} - True if valid\n     */\n    static validateImageData(imageData, config = {}) {\n      if (!imageData || !imageData.url) {return false;}\n\n      // Check dimensions if specified\n      if (config.minWidth || config.minHeight) {\n        const width = imageData.dimensions?.natural?.width || imageData.dimensions?.displayed?.width || 0;\n        const height = imageData.dimensions?.natural?.height || imageData.dimensions?.displayed?.height || 0;\n\n        if (config.minWidth && width < config.minWidth) {return false;}\n        if (config.minHeight && height < config.minHeight) {return false;}\n      }\n\n      // Check format if specified\n      if (config.formats && Array.isArray(config.formats)) {\n        const format = this.getImageFormat(imageData.url);\n        if (!config.formats.includes(format)) {return false;}\n      }\n\n      return true;\n    }\n  }\n\n  // Export to global scope\n  window.RobustHelpers = RobustHelpers;\n\n  console.log('\u2705 Content core utilities loaded');\n}\n\n// =============================================================================\n// 7. DOM OBSERVERS - Essential DOM observation and content detection\n// =============================================================================\n\n// Prevent duplicate declarations\nif (!window.DynamicContentObserver) {\n\n  class DynamicContentObserver {\n    constructor(options = {}) {\n      this.options = {\n        // Observer configuration\n        observeAttributes: options.observeAttributes !== false,\n        observeChildList: options.observeChildList !== false,\n        observeSubtree: options.observeSubtree !== false,\n        \n        // Content detection thresholds\n        minNewElements: options.minNewElements || 5,\n        minImageElements: options.minImageElements || 3,\n        significantChangeThreshold: options.significantChangeThreshold || 0.3,\n        \n        // Performance settings\n        throttleDelay: options.throttleDelay || 500,\n        maxCallbacksPerSecond: options.maxCallbacksPerSecond || 10,\n        observerTimeout: options.observerTimeout || 30000,\n        \n        // Content type detection\n        detectImages: options.detectImages !== false,\n        detectProducts: options.detectProducts !== false,\n        detectGalleries: options.detectGalleries !== false,\n        \n        // Advanced detection patterns\n        contentPatterns: options.contentPatterns || {\n          images: ['img', '[style*=\"background-image\"]', 'picture', '[data-src]', '[data-lazy]', '[loading=\"lazy\"]'],\n          products: ['.product', '.item', '[data-product]', '.listing', '.card'],\n          galleries: ['.gallery', '.grid', '.masonry', '[data-gallery]', '.feed', '.posts', '.tiles'],\n          containers: ['.container', '.content', '.main', '[role=\"main\"]', 'article', 'section'],\n          lazyImages: ['[data-src]', '[data-lazy]', '[data-original]', '.lazy', '.lazyload', '[loading=\"lazy\"]']\n        },\n        \n        // Element significance scoring\n        significanceWeights: options.significanceWeights || {\n          images: 0.8,\n          products: 0.9,\n          galleries: 0.7,\n          links: 0.5,\n          text: 0.3\n        },\n\n        ...options\n      };\n\n      // State management with memory-safe structures\n      this.isActive = false;\n      this.observer = null;\n      this.processTimer = null;\n\n      // Use memory-safe bounded structures\n      const global = typeof globalThis !== 'undefined' ? globalThis : window;\n      const LRUCache = global.__ST?.LRUCache || Map;\n      const BoundedArray = global.__ST?.BoundedArray || Array;\n      \n      this.callbacks = new LRUCache(20); // Limit callbacks to 20\n      this.changeBuffer = BoundedArray === Array ? [] : new BoundedArray(500); // Cap buffer\n      this.metrics = {\n        totalChanges: 0,\n        significantChanges: 0,\n        elementsAdded: 0,\n        elementsRemoved: 0,\n        imagesDetected: 0,\n        lastActivity: Date.now()\n      };\n\n      // Content analysis\n      this.elementClassifiers = {\n        isImageContent: (element) => {\n          if (element.tagName === 'IMG') return true;\n          if (element.querySelector && element.querySelector('img')) return true;\n          \n          const style = window.getComputedStyle ? window.getComputedStyle(element) : {};\n          return style.backgroundImage && style.backgroundImage !== 'none';\n        },\n\n        isProductContent: (element) => {\n          const text = element.textContent?.toLowerCase() || '';\n          const className = element.className?.toLowerCase() || '';\n          \n          const productKeywords = ['price', 'buy', 'add to cart', 'product', '$', '\u20AC', '\u00A3'];\n          const productClasses = ['product', 'item', 'listing', 'card'];\n          \n          return productKeywords.some(k => text.includes(k)) ||\n                 productClasses.some(c => className.includes(c));\n        },\n\n        isGalleryContent: (element) => {\n          const className = element.className?.toLowerCase() || '';\n          const children = element.children?.length || 0;\n          \n          const galleryClasses = ['gallery', 'grid', 'masonry', 'photos'];\n          const hasMultipleImages = children >= 3 && \n            Array.from(element.children).filter(child => \n              this.elementClassifiers.isImageContent(child)\n            ).length >= 2;\n          \n          return galleryClasses.some(c => className.includes(c)) || hasMultipleImages;\n        }\n      };\n    }\n\n    start(callback = null) {\n      if (this.isActive) {\n        console.warn('DynamicContentObserver is already active');\n        return false;\n      }\n\n      try {\n        this.observer = new MutationObserver(this.handleMutations.bind(this));\n        \n        // Register observer with resource tracker\n        const global = typeof globalThis !== 'undefined' ? globalThis : window;\n        if (global.__ST?.resourceTracker) {\n          global.__ST.resourceTracker.trackObserver(this.observer);\n        }\n\n        // Register with lifecycle manager for cleanup\n        if (global.__ST?.lifecycleManager) {\n          global.__ST.lifecycleManager.registerCleanupHandler(() => {\n            this.stop();\n          });\n        }\n        \n        const observerConfig = {\n          childList: this.options.observeChildList,\n          subtree: this.options.observeSubtree,\n          attributes: this.options.observeAttributes,\n          characterData: true\n        };\n\n        this.observer.observe(document.body, observerConfig);\n        this.isActive = true;\n\n        if (callback) {\n          this.addCallback('default', callback);\n        }\n\n        // Set timeout for automatic cleanup\n        setTimeout(() => {\n          if (this.isActive && Date.now() - this.metrics.lastActivity > this.options.observerTimeout) {\n            console.log('\uD83D\uDD50 Auto-stopping observer due to inactivity');\n            this.stop();\n          }\n        }, this.options.observerTimeout);\n\n        console.log('\u2705 DynamicContentObserver started successfully');\n        return true;\n      } catch (error) {\n        console.error('\u274C Failed to start DynamicContentObserver:', error);\n        return false;\n      }\n    }\n\n    stop() {\n      if (!this.isActive) {\n        return false;\n      }\n\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      }\n\n      if (this.processTimer) {\n        clearTimeout(this.processTimer);\n        this.processTimer = null;\n      }\n\n      this.isActive = false;\n      this.changeBuffer = [];\n      \n      console.log('\uD83D\uDED1 DynamicContentObserver stopped. Final metrics:', this.getMetrics());\n      return true;\n    }\n\n    addCallback(name, callback) {\n      if (typeof callback === 'function') {\n        this.callbacks.set(name, callback);\n        console.log(`\uD83D\uDCDE Added callback: ${name}`);\n      }\n    }\n\n    removeCallback(name) {\n      const removed = this.callbacks.delete(name);\n      if (removed) {\n        console.log(`\uD83D\uDDD1\uFE0F Removed callback: ${name}`);\n      }\n      return removed;\n    }\n\n    handleMutations(mutations) {\n      if (!this.isActive) return;\n\n      const startTime = performance.now();\n      this.metrics.lastActivity = Date.now();\n\n      // Buffer mutations for batch processing\n      mutations.forEach(mutation => {\n        this.changeBuffer.push({\n          type: mutation.type,\n          target: mutation.target,\n          addedNodes: Array.from(mutation.addedNodes),\n          removedNodes: Array.from(mutation.removedNodes),\n          attributeName: mutation.attributeName,\n          oldValue: mutation.oldValue,\n          timestamp: Date.now()\n        });\n      });\n\n      // Throttle processing\n      if (this.processTimer) {\n        clearTimeout(this.processTimer);\n      }\n\n      this.processTimer = setTimeout(() => {\n        this.processChangeBuffer();\n      }, this.options.throttleDelay);\n    }\n\n    processChangeBuffer() {\n      if (!this.changeBuffer.length) return;\n\n      const startTime = performance.now();\n      console.log(`\uD83D\uDD04 Processing ${this.changeBuffer.length} buffered changes`);\n\n      const analysis = this.analyzeChanges(this.changeBuffer);\n      this.metrics.totalChanges += this.changeBuffer.length;\n\n      if (this.isSignificantChange(analysis)) {\n        this.metrics.significantChanges++;\n        this.notifyCallbacks(analysis);\n      }\n\n      // Update element counts\n      this.metrics.elementsAdded += analysis.addedElements.length;\n      this.metrics.elementsRemoved += analysis.removedElements.length;\n      this.metrics.imagesDetected += analysis.newImages.length;\n\n      // Clear buffer\n      this.changeBuffer = [];\n\n      const processingTime = performance.now() - startTime;\n      console.log(`\u2705 Processed changes in ${processingTime.toFixed(2)}ms`);\n    }\n\n    analyzeChanges(changes) {\n      const analysis = {\n        addedElements: [],\n        removedElements: [],\n        modifiedElements: [],\n        newImages: [],\n        newProducts: [],\n        newGalleries: [],\n        contentTypes: new Set(),\n        significance: 0,\n        patterns: []\n      };\n\n      changes.forEach(change => {\n        if (change.type === 'childList') {\n          // Analyze added nodes\n          change.addedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              analysis.addedElements.push(node);\n              this.classifyElement(node, analysis);\n            }\n          });\n\n          // Analyze removed nodes\n          change.removedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              analysis.removedElements.push(node);\n            }\n          });\n        } else if (change.type === 'attributes') {\n          analysis.modifiedElements.push(change.target);\n        }\n      });\n\n      // Calculate significance score\n      analysis.significance = this.calculateSignificance(analysis);\n\n      return analysis;\n    }\n\n    classifyElement(element, analysis) {\n      // Check for images\n      if (this.options.detectImages && this.elementClassifiers.isImageContent(element)) {\n        analysis.newImages.push(element);\n        analysis.contentTypes.add('images');\n      }\n\n      // Check for products\n      if (this.options.detectProducts && this.elementClassifiers.isProductContent(element)) {\n        analysis.newProducts.push(element);\n        analysis.contentTypes.add('products');\n      }\n\n      // Check for galleries\n      if (this.options.detectGalleries && this.elementClassifiers.isGalleryContent(element)) {\n        analysis.newGalleries.push(element);\n        analysis.contentTypes.add('galleries');\n      }\n\n      // Recursively check children\n      if (element.children) {\n        Array.from(element.children).forEach(child => {\n          this.classifyElement(child, analysis);\n        });\n      }\n    }\n\n    calculateSignificance(analysis) {\n      let score = 0;\n      const weights = this.options.significanceWeights;\n\n      score += analysis.newImages.length * weights.images;\n      score += analysis.newProducts.length * weights.products;\n      score += analysis.newGalleries.length * weights.galleries;\n      score += Math.min(analysis.addedElements.length * weights.links, 10);\n\n      return Math.min(score / 10, 1); // Normalize to 0-1\n    }\n\n    isSignificantChange(analysis) {\n      const elementThreshold = analysis.addedElements.length >= this.options.minNewElements;\n      const imageThreshold = analysis.newImages.length >= this.options.minImageElements;\n      const significanceThreshold = analysis.significance >= this.options.significantChangeThreshold;\n\n      return elementThreshold || imageThreshold || significanceThreshold;\n    }\n\n    notifyCallbacks(analysis) {\n      const data = {\n        ...analysis,\n        timestamp: Date.now(),\n        metrics: { ...this.metrics }\n      };\n\n      this.callbacks.forEach((callback, name) => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Callback ${name} failed:`, error);\n        }\n      });\n    }\n\n    getMetrics() {\n      return {\n        ...this.metrics,\n        isActive: this.isActive,\n        bufferedChanges: this.changeBuffer.length,\n        activeCallbacks: this.callbacks.size\n      };\n    }\n  }\n\n  // Export to global scope\n  window.DynamicContentObserver = DynamicContentObserver;\n\n  console.log('\u2705 DOM observers loaded');\n}\n\n// =============================================================================\n// 8. SCRAPER CORE - Essential scraping functionality\n// =============================================================================\n\nif (!window.EnhancedScraperUtils) {\n\n  class EnhancedScraperUtils {\n    constructor(options = {}) {\n      this.options = {\n        // Rate limiting\n        requestsPerSecond: options.requestsPerSecond || 2,\n        burstLimit: options.burstLimit || 5,\n        cooldownPeriod: options.cooldownPeriod || 30000,\n\n        // Retry configuration\n        maxRetries: options.maxRetries || 3,\n        baseDelay: options.baseDelay || 1000,\n        maxDelay: options.maxDelay || 10000,\n        backoffMultiplier: options.backoffMultiplier || 2,\n\n        // Content validation\n        minImageSize: options.minImageSize || 100,\n        maxImageSize: options.maxImageSize || 50 * 1024 * 1024, // 50MB\n        allowedFormats: options.allowedFormats || ['jpg', 'jpeg', 'png', 'webp', 'gif', 'svg'],\n\n        // Performance monitoring\n        enableMetrics: options.enableMetrics !== false,\n\n        // Content filtering\n        enableDuplicateDetection: options.enableDuplicateDetection !== false,\n        enableContentValidation: options.enableContentValidation !== false,\n\n        ...options\n      };\n\n      // Rate limiting state\n      this.requestQueue = [];\n      this.requestHistory = [];\n      this.isThrottled = false;\n      this.throttledUntil = 0;\n\n      // Content tracking\n      this.processedUrls = new Set();\n      this.contentHashes = new Set();\n\n      // Performance metrics\n      this.metrics = {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        retriedRequests: 0,\n        duplicatesSkipped: 0,\n        averageResponseTime: 0\n      };\n\n      console.log('\u2705 Enhanced scraper utilities initialized');\n    }\n\n    // Enhanced request with rate limiting and retry logic\n    async makeEnhancedRequest(url, options = {}) {\n      // Check if we should rate limit\n      if (this.shouldRateLimit()) {\n        await this.waitForRateLimit();\n      }\n\n      // Record request attempt\n      this.recordRequest();\n\n      const startTime = performance.now();\n\n      try {\n        const response = await this.executeRequestWithRetry(url, options);\n\n        // Record success metrics\n        const responseTime = performance.now() - startTime;\n        this.recordSuccess(responseTime);\n\n        return response;\n      } catch (error) {\n        // Record failure metrics\n        this.recordFailure(error, url);\n        throw error;\n      }\n    }\n\n    // Execute request with exponential backoff retry logic\n    async executeRequestWithRetry(url, options) {\n      let lastError = null;\n      const maxRetries = this.options.maxRetries;\n\n      for (let attempt = 0; attempt <= maxRetries; attempt++) {\n        try {\n          if (attempt > 0) {\n            const delay = this.calculateBackoffDelay(attempt);\n            console.log(`\uD83D\uDD04 Retry attempt ${attempt}/${maxRetries} for ${url} after ${delay}ms`);\n            await this.sleep(delay);\n            this.metrics.retriedRequests++;\n          }\n\n          // Make the actual request using ServiceWorkerFetch\n          const response = await ServiceWorkerFetch.fetch(url, {\n            ...options,\n            method: options.method || 'GET'\n          });\n\n          // Check if response is ok\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n\n          // Validate content if enabled\n          if (this.options.enableContentValidation) {\n            await this.validateResponse(response, url);\n          }\n\n          return response;\n\n        } catch (error) {\n          lastError = error;\n\n          // Check if we should retry based on error type\n          if (!this.isRetryableError(error) || attempt === maxRetries) {\n            break;\n          }\n\n          console.warn(`\u26A0\uFE0F Request failed (attempt ${attempt + 1}/${maxRetries + 1}):`, error.message);\n        }\n      }\n\n      // All retries exhausted\n      throw lastError;\n    }\n\n    // Calculate exponential backoff delay\n    calculateBackoffDelay(attempt) {\n      const baseDelay = this.options.baseDelay;\n      const backoffMultiplier = this.options.backoffMultiplier;\n      const maxDelay = this.options.maxDelay;\n\n      // Exponential backoff\n      let delay = baseDelay * Math.pow(backoffMultiplier, attempt - 1);\n\n      // Cap at max delay\n      return Math.min(Math.max(delay, baseDelay), maxDelay);\n    }\n\n    // Check if error is retryable\n    isRetryableError(error) {\n      // Network errors are generally retryable\n      if (error.name === 'TypeError' || error.name === 'NetworkError') {\n        return true;\n      }\n\n      // HTTP status codes that are retryable\n      if (error.message.includes('HTTP')) {\n        const statusMatch = error.message.match(/HTTP (\\d+)/);\n        if (statusMatch) {\n          const status = parseInt(statusMatch[1]);\n          // Retry on 5xx (server errors) and some 4xx (rate limiting)\n          return status >= 500 || status === 429 || status === 408;\n        }\n      }\n\n      // Timeout errors are retryable\n      if (error.message.includes('timeout') || error.message.includes('aborted')) {\n        return true;\n      }\n\n      return false;\n    }\n\n    // Rate limiting logic\n    shouldRateLimit() {\n      const now = Date.now();\n\n      // Check if we're in cooldown period\n      if (now < this.throttledUntil) {\n        return true;\n      }\n\n      // Clean old requests from history (keep last 60 seconds)\n      this.requestHistory = this.requestHistory.filter(\n        timestamp => now - timestamp < 60000\n      );\n\n      // Check requests per second limit\n      const recentRequests = this.requestHistory.filter(\n        timestamp => now - timestamp < 1000\n      );\n\n      if (recentRequests.length >= this.options.requestsPerSecond) {\n        return true;\n      }\n\n      // Check burst limit\n      const burstWindow = this.requestHistory.filter(\n        timestamp => now - timestamp < 5000\n      );\n\n      if (burstWindow.length >= this.options.burstLimit) {\n        console.log('\uD83D\uDEA6 Rate limit: Burst limit reached, applying throttle');\n        this.throttledUntil = now + this.options.cooldownPeriod;\n        return true;\n      }\n\n      return false;\n    }\n\n    // Wait for rate limit to clear\n    async waitForRateLimit() {\n      const now = Date.now();\n      const waitTime = Math.max(\n        this.throttledUntil - now,\n        1000 - (now - Math.max(...this.requestHistory.slice(-1), 0))\n      );\n\n      if (waitTime > 0) {\n        console.log(`\uD83D\uDEA6 Rate limiting: waiting ${waitTime}ms`);\n        await this.sleep(waitTime);\n      }\n    }\n\n    // Record request for rate limiting\n    recordRequest() {\n      this.requestHistory.push(Date.now());\n      this.metrics.totalRequests++;\n    }\n\n    // Enhanced duplicate detection using content hashing\n    async detectDuplicate(url, content) {\n      if (!this.options.enableDuplicateDetection) {\n        return false;\n      }\n\n      // URL-based detection\n      if (this.processedUrls.has(url)) {\n        this.metrics.duplicatesSkipped++;\n        return true;\n      }\n\n      // Content-based detection using hash\n      if (content) {\n        const hash = await this.calculateContentHash(content);\n        if (this.contentHashes.has(hash)) {\n          this.metrics.duplicatesSkipped++;\n          return true;\n        }\n        this.contentHashes.add(hash);\n      }\n\n      this.processedUrls.add(url);\n      return false;\n    }\n\n    // Calculate content hash for duplicate detection\n    async calculateContentHash(content) {\n      if (typeof content === 'string') {\n        content = new TextEncoder().encode(content);\n      }\n\n      // Use SubtleCrypto if available, fallback to simple hash\n      if (window.crypto && window.crypto.subtle) {\n        try {\n          const hashBuffer = await window.crypto.subtle.digest('SHA-256', content);\n          const hashArray = Array.from(new Uint8Array(hashBuffer));\n          return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n        } catch (error) {\n          console.warn('\u26A0\uFE0F Crypto hash failed, using fallback');\n        }\n      }\n\n      // Simple hash fallback\n      let hash = 0;\n      const str = content.toString();\n      for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32bit integer\n      }\n      return hash.toString(16);\n    }\n\n    // Validate response content\n    async validateResponse(response, url) {\n      const contentType = response.headers.get('content-type') || '';\n      const contentLength = parseInt(response.headers.get('content-length') || '0');\n\n      // Check content type\n      if (contentType.startsWith('image/')) {\n        const format = contentType.split('/')[1];\n        if (!this.options.allowedFormats.includes(format)) {\n          throw new Error(`Unsupported image format: ${format}`);\n        }\n      }\n\n      // Check content size\n      if (contentLength > 0) {\n        if (contentLength < this.options.minImageSize) {\n          throw new Error(`Image too small: ${contentLength} bytes`);\n        }\n        if (contentLength > this.options.maxImageSize) {\n          throw new Error(`Image too large: ${contentLength} bytes`);\n        }\n      }\n\n      return true;\n    }\n\n    // Record failure\n    recordFailure(error, url) {\n      this.metrics.failedRequests++;\n      console.error(`\u274C Request failed for ${url}:`, error);\n    }\n\n    // Record successful requests\n    recordSuccess(responseTime) {\n      this.metrics.successfulRequests++;\n\n      // Update average response time\n      const totalSuccessful = this.metrics.successfulRequests;\n      this.metrics.averageResponseTime =\n        (this.metrics.averageResponseTime * (totalSuccessful - 1) + responseTime) / totalSuccessful;\n    }\n\n    // Helper methods\n    sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Get metrics report\n    getMetricsReport() {\n      const successRate = this.metrics.totalRequests > 0 ?\n        (this.metrics.successfulRequests / this.metrics.totalRequests * 100) : 0;\n\n      return {\n        summary: {\n          totalRequests: this.metrics.totalRequests,\n          successfulRequests: this.metrics.successfulRequests,\n          failedRequests: this.metrics.failedRequests,\n          successRate: successRate,\n          averageResponseTime: this.metrics.averageResponseTime,\n          duplicatesSkipped: this.metrics.duplicatesSkipped\n        }\n      };\n    }\n  }\n\n  // Export to global scope\n  window.EnhancedScraperUtils = EnhancedScraperUtils;\n  console.log('\u2705 Enhanced scraper utilities loaded');\n}\n\n// Advanced Extractor for comprehensive image extraction\nif (!window.AdvancedExtractor) {\n\n  class AdvancedExtractor {\n    constructor(options = {}) {\n      this.options = {\n        // Extraction strategies\n        useMultipleStrategies: options.useMultipleStrategies !== false,\n        enableFallbackExtraction: options.enableFallbackExtraction !== false,\n        maxExtractionAttempts: options.maxExtractionAttempts || 5,\n        \n        // Target detection\n        autoDetectTargets: options.autoDetectTargets !== false,\n        smartTargetSelection: options.smartTargetSelection !== false,\n        \n        // Content validation\n        validateExtractedContent: options.validateExtractedContent !== false,\n        minContentThreshold: options.minContentThreshold || 3,\n        \n        // Performance settings\n        batchSize: options.batchSize || 50,\n        extractionTimeout: options.extractionTimeout || 30000,\n        \n        // Image-specific options\n        minImageDimensions: options.minImageDimensions || { width: 50, height: 50 },\n        supportedFormats: options.supportedFormats || ['jpg', 'jpeg', 'png', 'webp', 'gif', 'svg'],\n        extractImageMetadata: options.extractImageMetadata !== false,\n        \n        // Enhanced detection patterns\n        imageSelectors: options.imageSelectors || [\n          'img[src]',\n          'img[data-src]', \n          'img[data-lazy-src]',\n          'img[data-original]',\n          '[style*=\"background-image\"]',\n          'picture source',\n          'picture img',\n          '[data-background-image]'\n        ],\n        \n        containerSelectors: options.containerSelectors || [\n          '.gallery', '.images', '.photos', '.grid',\n          '.masonry', '.carousel', '.slider', '.product-images',\n          '[data-gallery]', '[data-images]', '[data-photos]'\n        ],\n\n        ...options\n      };\n\n      // State management\n      this.isActive = false;\n      this.extractedItems = [];\n      this.failedExtractions = [];\n      \n      // Strategy tracking\n      this.strategies = new Map();\n      \n      // Quality metrics\n      this.qualityMetrics = {\n        totalFound: 0,\n        validated: 0,\n        filtered: 0,\n        duplicates: 0\n      };\n\n      this.initializeExtractionStrategies();\n    }\n\n    initializeExtractionStrategies() {\n      // Register extraction strategies\n      this.strategies.set('direct', this.directImageExtraction.bind(this));\n      this.strategies.set('background', this.backgroundImageExtraction.bind(this));\n      this.strategies.set('lazy', this.lazyLoadedImageExtraction.bind(this));\n      this.strategies.set('semantic', this.semanticImageExtraction.bind(this));\n\n      console.log('\uD83C\uDFAF Advanced extraction strategies initialized:', Array.from(this.strategies.keys()));\n    }\n\n    // Main extraction method\n    async extractImages(selector = null, options = {}) {\n      const config = { ...this.options, ...options };\n      this.isActive = true;\n      \n      const startTime = performance.now();\n      console.log('\uD83D\uDE80 Starting advanced image extraction...');\n\n      try {\n        // Reset state\n        this.extractedItems = [];\n        this.failedExtractions = [];\n        this.qualityMetrics = { totalFound: 0, validated: 0, filtered: 0, duplicates: 0 };\n\n        // Execute extraction strategies\n        const results = await this.executeExtractionStrategies(selector, config);\n        \n        // Process and validate results\n        const processedResults = await this.processExtractionResults(results, config);\n        \n        const endTime = performance.now();\n        const duration = endTime - startTime;\n\n        const finalResults = {\n          success: true,\n          images: processedResults,\n          metadata: {\n            totalFound: this.qualityMetrics.totalFound,\n            validated: this.qualityMetrics.validated,\n            filtered: this.qualityMetrics.filtered,\n            duplicates: this.qualityMetrics.duplicates,\n            extractionTime: duration,\n            strategiesUsed: Array.from(this.strategies.keys())\n          }\n        };\n\n        console.log(`\u2705 Advanced extraction completed in ${duration.toFixed(2)}ms`);\n        return finalResults;\n\n      } catch (error) {\n        console.error('\u274C Advanced extraction failed:', error);\n        return {\n          success: false,\n          error: error.message,\n          images: [],\n          metadata: {\n            totalFound: this.qualityMetrics.totalFound,\n            extractionTime: performance.now() - startTime\n          }\n        };\n      } finally {\n        this.isActive = false;\n      }\n    }\n\n    async executeExtractionStrategies(selector, config) {\n      const allResults = [];\n      const strategies = config.useMultipleStrategies ? \n        Array.from(this.strategies.keys()) : ['direct'];\n\n      for (const strategyName of strategies) {\n        const strategy = this.strategies.get(strategyName);\n        if (strategy) {\n          try {\n            const results = await strategy(selector, config);\n            allResults.push(...results);\n          } catch (error) {\n            console.warn(`Strategy ${strategyName} failed:`, error);\n          }\n        }\n      }\n\n      return allResults;\n    }\n\n    // Direct image extraction strategy\n    async directImageExtraction(selector, config) {\n      const images = [];\n      const targetSelector = selector || 'img[src]';\n      \n      try {\n        const elements = document.querySelectorAll(targetSelector);\n        \n        for (const img of elements) {\n          if (img.src && this.isValidImageElement(img, config)) {\n            images.push({\n              url: img.src,\n              element: img,\n              strategy: 'direct',\n              metadata: this.extractElementMetadata(img)\n            });\n          }\n        }\n      } catch (error) {\n        console.warn('Direct extraction failed:', error);\n      }\n\n      return images;\n    }\n\n    // Background image extraction strategy\n    async backgroundImageExtraction(selector, config) {\n      const images = [];\n      \n      try {\n        const elements = document.querySelectorAll('[style*=\"background-image\"], [data-background]');\n        \n        for (const el of elements) {\n          const bgUrl = this.extractBackgroundImageUrl(el);\n          if (bgUrl && this.isValidImageUrl(bgUrl, config)) {\n            images.push({\n              url: bgUrl,\n              element: el,\n              strategy: 'background',\n              metadata: this.extractElementMetadata(el)\n            });\n          }\n        }\n      } catch (error) {\n        console.warn('Background extraction failed:', error);\n      }\n\n      return images;\n    }\n\n    // Lazy loaded image extraction strategy\n    async lazyLoadedImageExtraction(selector, config) {\n      const images = [];\n      \n      try {\n        const elements = document.querySelectorAll('img[data-src], img[data-lazy], img[data-original], [loading=\"lazy\"]');\n        \n        for (const img of elements) {\n          const lazySrc = img.dataset.src || img.dataset.lazy || img.dataset.original;\n          if (lazySrc && this.isValidImageUrl(lazySrc, config)) {\n            images.push({\n              url: lazySrc,\n              element: img,\n              strategy: 'lazy',\n              metadata: this.extractElementMetadata(img)\n            });\n          }\n        }\n      } catch (error) {\n        console.warn('Lazy extraction failed:', error);\n      }\n\n      return images;\n    }\n\n    // Semantic image extraction strategy\n    async semanticImageExtraction(selector, config) {\n      const images = [];\n      \n      try {\n        const semanticSelectors = [\n          'figure img', 'picture img', 'article img',\n          '.gallery img', '.photos img', '.images img'\n        ];\n        \n        for (const semanticSelector of semanticSelectors) {\n          const elements = document.querySelectorAll(semanticSelector);\n          \n          for (const img of elements) {\n            const src = img.src || img.dataset.src;\n            if (src && this.isValidImageElement(img, config)) {\n              images.push({\n                url: src,\n                element: img,\n                strategy: 'semantic',\n                metadata: this.extractElementMetadata(img)\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Semantic extraction failed:', error);\n      }\n\n      return images;\n    }\n\n    // Process and validate extraction results\n    async processExtractionResults(results, config) {\n      const processedResults = [];\n      const seenUrls = new Set();\n\n      for (const result of results) {\n        this.qualityMetrics.totalFound++;\n\n        // Check for duplicates\n        if (seenUrls.has(result.url)) {\n          this.qualityMetrics.duplicates++;\n          continue;\n        }\n        seenUrls.add(result.url);\n\n        // Validate content\n        if (config.validateExtractedContent && !this.validateImageResult(result, config)) {\n          this.qualityMetrics.filtered++;\n          continue;\n        }\n\n        this.qualityMetrics.validated++;\n        processedResults.push(result);\n      }\n\n      return processedResults;\n    }\n\n    // Helper methods\n    isValidImageElement(img, config) {\n      if (!img || img.tagName !== 'IMG') return false;\n      \n      const { width, height } = config.minImageDimensions;\n      const imgWidth = img.naturalWidth || img.offsetWidth;\n      const imgHeight = img.naturalHeight || img.offsetHeight;\n      \n      return imgWidth >= width && imgHeight >= height;\n    }\n\n    isValidImageUrl(url, config) {\n      if (!url) return false;\n      \n      const supportedFormats = config.supportedFormats;\n      const extension = url.split('.').pop()?.toLowerCase();\n      \n      return supportedFormats.includes(extension) || url.startsWith('data:image/');\n    }\n\n    extractBackgroundImageUrl(element) {\n      const style = window.getComputedStyle(element);\n      const bgImage = style.backgroundImage;\n      \n      if (bgImage && bgImage !== 'none') {\n        const match = bgImage.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n        return match ? match[1] : null;\n      }\n      \n      return element.dataset.background || null;\n    }\n\n    extractElementMetadata(element) {\n      return {\n        alt: element.alt || '',\n        title: element.title || '',\n        className: element.className || '',\n        id: element.id || ''\n      };\n    }\n\n    validateImageResult(result, config) {\n      // Basic validation - can be extended\n      return result.url && result.url.length > 0;\n    }\n  }\n\n  // Export to global scope\n  window.AdvancedExtractor = AdvancedExtractor;\n  console.log('\u2705 Basic DOM extractor loaded (fallback mode)');\n}\n\n// Main scraper function - unified entry point with Advanced Collector System\nif (!window.runScrape) {\n  window.runScrape = async function(selector, options = {}) {\n    console.log('\uD83D\uDE80 Starting unified scraper with Advanced Collector System...');\n    \n    try {\n      // Check if Advanced Collector System is available with proper type checking\n      if (typeof window.AdvancedCollectorSystem === 'function') {\n        console.log('\uD83D\uDCE1 Using Advanced Collector System with 8 detection methods');\n        \n        // Initialize Advanced Collector System\n        const collector = new window.AdvancedCollectorSystem({\n          // Configure based on options\n          concurrency: options.concurrency || 5,\n          timeout: options.timeout || 30000,\n          minImageSize: options.minImageSize || 100,\n          supportedFormats: options.supportedFormats || ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp'],\n          customExtensions: options.customExtensions || ['pdf'],\n          \n          // Enable all 8 detection methods by default\n          enablePerformanceAPI: options.enablePerformanceAPI !== false,\n          enableShadowDOM: options.enableShadowDOM !== false,\n          enableAdvancedBackground: options.enableAdvancedBackground !== false,\n          enableSVGProcessing: options.enableSVGProcessing !== false,\n          enableLazyLoading: options.enableLazyLoading !== false,\n          enableUrlExtraction: options.enableUrlExtraction !== false,\n          enableCustomExtensions: options.enableCustomExtensions !== false,\n          enableMultiDocument: options.enableMultiDocument === true\n        });\n        \n        // Run comprehensive collection\n        const result = await collector.collectImages(options);\n        \n        // Format results for compatibility with existing dashboard\n        const formattedResult = {\n          success: result.success,\n          items: result.images.map(img => ({\n            url: img.url,\n            src: img.src,\n            type: img.type,\n            confidence: img.confidence,\n            discoveryMethod: img.discoveryMethod,\n            metadata: img.metadata\n          })),\n          stats: {\n            found: result.metadata?.totalFound || 0,\n            validated: result.metadata?.validated || 0,\n            duplicates: result.metadata?.duplicates || 0,\n            errors: result.metadata?.errors || 0,\n            extractionTime: result.metadata?.processingTime || 0,\n            methodStats: result.metadata?.methodStats || {}\n          },\n          feeds: result.feeds,\n          advanced: true // Flag to indicate advanced collection was used\n        };\n        \n        console.log(`\u2705 Advanced Collector completed: ${formattedResult.items.length} items found`);\n        console.log(`\uD83D\uDCCA Method breakdown:`, result.metadata.methodStats);\n        \n        // Send results to dashboard via messaging system\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          try {\n            chrome.runtime.sendMessage({\n              type: 'SCAN_RESULTS',\n              data: formattedResult\n            }).catch(error => {\n              console.log('Note: Dashboard not connected for result display:', error.message);\n            });\n          } catch (error) {\n            console.log('Note: Extension context not available for messaging');\n          }\n        }\n        \n        return formattedResult;\n        \n      } else {\n        console.warn('\uD83D\uDD04 Advanced Collector System not available - using basic DOM extraction');\n        \n        // Show user-visible notification that advanced features are unavailable\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          try {\n            chrome.runtime.sendMessage({\n              type: 'SYSTEM_WARNING',\n              data: {\n                message: 'Advanced Collector unavailable - using basic extraction',\n                level: 'warning'\n              }\n            }).catch(() => {/* Dashboard not connected */});\n          } catch (error) {\n            // Extension context not available, continue silently\n          }\n        }\n        \n        // Fallback to existing extractor\n        const extractor = new window.AdvancedExtractor({\n          useMultipleStrategies: true,\n          validateExtractedContent: true,\n          enableFallbackExtraction: true\n        });\n        \n        // Extract images\n        const result = await extractor.extractImages(selector, options);\n        \n        // Format results for compatibility\n        const formattedResult = {\n          success: result.success,\n          items: result.images || [],\n          stats: {\n            found: result.metadata?.totalFound || 0,\n            validated: result.metadata?.validated || 0,\n            duplicates: result.metadata?.duplicates || 0,\n            errors: result.metadata?.errors || 0,\n            extractionTime: result.metadata?.extractionTime || 0,\n            methodStats: result.metadata?.methodStats || {}\n          },\n          advanced: false // Flag to indicate basic collection was used\n        };\n        \n        console.log(`\u2705 Basic scraper completed: ${formattedResult.items.length} items found`);\n        \n        // Send results to dashboard via messaging system\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          try {\n            chrome.runtime.sendMessage({\n              type: 'SCAN_RESULTS',\n              data: formattedResult\n            }).catch(error => {\n              console.log('Note: Dashboard not connected for result display:', error.message);\n            });\n          } catch (error) {\n            console.log('Note: Extension context not available for messaging');\n          }\n        }\n        \n        return formattedResult;\n      }\n      \n    } catch (error) {\n      console.error('\u274C Scraper failed:', error);\n      return {\n        success: false,\n        items: [],\n        error: error.message,\n        stats: { found: 0, validated: 0, duplicates: 0, errors: 1, extractionTime: 0, methodStats: {} }\n      };\n    }\n  };\n  \n  console.log('\u2705 Main scraper function loaded');\n}\n\n// =============================================================================\n// 9. ENHANCED SMART SELECTION - Intelligent element selection capabilities\n// =============================================================================\n\n// Inline Enhanced Smart Selector System - No external script injection\n\n// Fallback: Keep basic AdaptiveSelectorSystem for compatibility\nif (!window.AdaptiveSelectorSystem) {\n\n  class AdaptiveSelectorSystem {\n    constructor(options = {}) {\n      this.options = {\n        // Enhanced fallback strategy configuration\n        maxFallbackAttempts: options.maxFallbackAttempts || 3,\n        selectorTimeout: options.selectorTimeout || 1500,\n        confidenceThreshold: options.confidenceThreshold || 0.8,\n        minimalConfidenceThreshold: options.minimalConfidenceThreshold || 0.6,\n        \n        // Site-specific patterns\n        siteSpecificPatterns: {\n          instagram: {\n            imageSelectors: [\n              'article img',\n              '[role=\"presentation\"] img',\n              'img[alt*=\"Photo by\"]',\n              'img[src*=\"scontent\"]'\n            ],\n            containerSelectors: [\n              'article',\n              '[role=\"presentation\"]',\n              'section main'\n            ]\n          },\n          pinterest: {\n            imageSelectors: [\n              '[data-test-id=\"pin-image\"]',\n              '.GrowthUnauthPinImage img',\n              'img[alt*=\"Pin\"]'\n            ],\n            containerSelectors: [\n              '[data-test-id=\"pin\"]',\n              '.GrowthUnauthPin'\n            ]\n          },\n          generic: {\n            imageSelectors: [\n              'img[src*=\"cdn\"]',\n              'img[loading=\"lazy\"]',\n              'img[data-src]',\n              'img[data-lazy]',\n              '.gallery img',\n              '.grid img',\n              'article img'\n            ],\n            containerSelectors: [\n              '.gallery',\n              '.grid',\n              '.masonry',\n              '.photos',\n              '.images',\n              '.feed'\n            ]\n          }\n        },\n        \n        ...options\n      };\n\n      this.selectorHistory = new Map();\n      this.performanceMetrics = {\n        successful: 0,\n        failed: 0,\n        fallbacksUsed: 0,\n        averageAttempts: 0\n      };\n\n      this.initializeSiteDetection();\n    }\n\n    // Initialize site detection\n    initializeSiteDetection() {\n      this.currentSite = this.detectCurrentSite();\n      this.sitePatterns = this.getCurrentSitePatterns();\n      console.log('\uD83C\uDF10 Site detected:', this.currentSite);\n    }\n\n    // Detect current site based on URL patterns\n    detectCurrentSite() {\n      const hostname = window.location.hostname.toLowerCase();\n      \n      if (hostname.includes('instagram')) return 'instagram';\n      if (hostname.includes('pinterest')) return 'pinterest';\n      if (hostname.includes('twitter') || hostname.includes('x.com')) return 'twitter';\n      if (hostname.includes('facebook')) return 'facebook';\n      \n      return 'generic';\n    }\n\n    // Get patterns for current site\n    getCurrentSitePatterns() {\n      const sitePatterns = this.options.siteSpecificPatterns[this.currentSite];\n      if (sitePatterns) {\n        return sitePatterns;\n      }\n\n      // Fallback to generic patterns\n      return this.options.siteSpecificPatterns.generic;\n    }\n\n    // Enhanced method to find gallery images using site-specific patterns\n    async findGalleryImages(options = {}) {\n      const startTime = performance.now();\n      const maxImages = options.maxImages || 1000;\n      const minSize = options.minSize || 100;\n\n      console.log(`\uD83D\uDDBC\uFE0F Finding gallery images for site: ${this.currentSite}`);\n\n      try {\n        let allImages = [];\n\n        // Use site-specific selectors first\n        if (this.sitePatterns && this.sitePatterns.imageSelectors) {\n          for (const selector of this.sitePatterns.imageSelectors) {\n            try {\n              const images = this.testSelector(selector);\n              allImages.push(...images);\n            } catch (error) {\n              console.warn(`\u26A0\uFE0F Site-specific selector failed: ${selector}`, error);\n            }\n          }\n        }\n\n        // If no site-specific images found, use generic approach\n        if (allImages.length === 0) {\n          console.log('\uD83D\uDD04 No site-specific images found, using generic approach...');\n          allImages = this.findGenericGalleryImages();\n        }\n\n        // Filter and validate images\n        const validImages = await this.validateGalleryImages(allImages, { minSize, maxImages });\n\n        const processingTime = performance.now() - startTime;\n        console.log(`\u2705 Found ${validImages.length} valid gallery images in ${processingTime.toFixed(2)}ms`);\n\n        return {\n          images: validImages,\n          site: this.currentSite,\n          patterns: this.sitePatterns,\n          processingTime,\n          totalFound: allImages.length,\n          validCount: validImages.length\n        };\n\n      } catch (error) {\n        console.error('\u274C Error finding gallery images:', error);\n        return {\n          images: [],\n          site: this.currentSite,\n          error: error.message,\n          processingTime: performance.now() - startTime\n        };\n      }\n    }\n\n    // Find images using generic patterns when site-specific ones fail\n    findGenericGalleryImages() {\n      const selectors = [\n        'img[src*=\"cdn\"]',\n        'img[loading=\"lazy\"]',\n        'img[data-src]',\n        'img[data-lazy]',\n        '.gallery img',\n        '.grid img',\n        '.masonry img',\n        '.photos img',\n        '.images img',\n        '.feed img',\n        '.posts img',\n        'article img',\n        'section img'\n      ];\n\n      let allImages = [];\n      for (const selector of selectors) {\n        try {\n          const images = this.testSelector(selector);\n          allImages.push(...images);\n        } catch (error) {\n          console.warn(`\u26A0\uFE0F Generic selector failed: ${selector}`);\n        }\n      }\n\n      // Remove duplicates\n      return Array.from(new Set(allImages));\n    }\n\n    // Test a CSS selector and return matching elements\n    testSelector(selector) {\n      try {\n        return Array.from(document.querySelectorAll(selector));\n      } catch (error) {\n        console.warn(`Invalid selector: ${selector}`, error);\n        return [];\n      }\n    }\n\n    // Validate gallery images based on size and other criteria\n    async validateGalleryImages(images, options = {}) {\n      const { minSize = 100, maxImages = 1000 } = options;\n      const validImages = [];\n\n      for (let i = 0; i < Math.min(images.length, maxImages); i++) {\n        const img = images[i];\n        \n        if (this.isValidGalleryImage(img, minSize)) {\n          validImages.push({\n            element: img,\n            src: this.getImageSrc(img),\n            alt: img.alt || '',\n            width: img.naturalWidth || img.offsetWidth,\n            height: img.naturalHeight || img.offsetHeight,\n            lazy: this.isLazyLoadedImage(img),\n            inViewport: this.isInViewport(img)\n          });\n        }\n      }\n\n      return validImages;\n    }\n\n    // Check if image meets gallery criteria\n    isValidGalleryImage(img, minSize) {\n      if (!img || !img.tagName || img.tagName.toLowerCase() !== 'img') {\n        return false;\n      }\n\n      // Check size\n      const width = img.naturalWidth || img.offsetWidth;\n      const height = img.naturalHeight || img.offsetHeight;\n      \n      if (width < minSize || height < minSize) {\n        return false;\n      }\n\n      // Check if image has valid source\n      const src = this.getImageSrc(img);\n      if (!src || src.startsWith('data:image/svg') || src.includes('loading') || src.includes('placeholder')) {\n        return false;\n      }\n\n      // Check for common exclusions\n      const excludePatterns = [\n        /avatar/i,\n        /profile/i,\n        /icon/i,\n        /logo/i,\n        /button/i,\n        /arrow/i,\n        /spinner/i,\n        /loading/i\n      ];\n\n      const alt = img.alt || '';\n      const className = img.className || '';\n      \n      if (excludePatterns.some(pattern => pattern.test(alt) || pattern.test(className) || pattern.test(src))) {\n        return false;\n      }\n\n      return true;\n    }\n\n    // Get image source, handling lazy loading\n    getImageSrc(img) {\n      return img.src || \n             img.getAttribute('data-src') || \n             img.getAttribute('data-lazy') ||\n             img.getAttribute('data-original') ||\n             '';\n    }\n\n    // Check if image is lazy-loaded\n    isLazyLoadedImage(img) {\n      return !!(img.getAttribute('data-src') || \n                img.getAttribute('data-lazy') || \n                img.getAttribute('loading') === 'lazy' ||\n                img.classList.contains('lazy') ||\n                img.classList.contains('lazyload'));\n    }\n\n    // Check if element is in viewport\n    isInViewport(element) {\n      if (!element.getBoundingClientRect) return false;\n      \n      const rect = element.getBoundingClientRect();\n      return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n      );\n    }\n\n    // Score element for selection\n    scoreElement(element) {\n      let score = 0;\n      const factors = [];\n      \n      // Size scoring\n      const rect = element.getBoundingClientRect();\n      if (rect.width > 200 && rect.height > 200) {\n        score += 0.3;\n        factors.push('large_size');\n      }\n      \n      // Class name scoring\n      const className = element.className?.toLowerCase() || '';\n      const highValueClasses = ['gallery', 'photo', 'image', 'picture'];\n      if (highValueClasses.some(cls => className.includes(cls))) {\n        score += 0.4;\n        factors.push('semantic_class');\n      }\n      \n      // Attribute scoring\n      if (element.hasAttribute('data-src') || element.hasAttribute('data-lazy')) {\n        score += 0.2;\n        factors.push('lazy_loading');\n      }\n      \n      return { score, factors };\n    }\n\n    // Detect gallery containers\n    detectGalleryContainers() {\n      const containers = [];\n\n      if (this.sitePatterns && this.sitePatterns.containerSelectors) {\n        for (const selector of this.sitePatterns.containerSelectors) {\n          try {\n            const elements = this.testSelector(selector);\n            containers.push(...elements);\n          } catch (error) {\n            console.warn(`\u26A0\uFE0F Container selector failed: ${selector}`);\n          }\n        }\n      }\n\n      // Generic fallback\n      if (containers.length === 0) {\n        const genericSelectors = [\n          '.gallery',\n          '.grid',\n          '.masonry',\n          '.photos',\n          '.images',\n          '.feed',\n          '.posts',\n          '[role=\"main\"]',\n          'main',\n          'section'\n        ];\n\n        for (const selector of genericSelectors) {\n          try {\n            const elements = this.testSelector(selector);\n            containers.push(...elements);\n          } catch (error) {\n            console.warn(`\u26A0\uFE0F Generic container selector failed: ${selector}`);\n          }\n        }\n      }\n\n      return Array.from(new Set(containers));\n    }\n  }\n\n  // Export to global scope\n  window.AdaptiveSelectorSystem = AdaptiveSelectorSystem;\n  console.log('\u2705 Adaptive selector system loaded');\n}\n\n// Simple Element Picker for interactive selection\nif (!window.StepTwoElementPicker) {\n  \n  class StepTwoElementPicker {\n    constructor() {\n      this.isActive = false;\n      this.highlightedElement = null;\n      this.overlay = null;\n      this.handlers = {\n        mouseover: this.handleMouseOver.bind(this),\n        click: this.handleClick.bind(this),\n        keydown: this.handleKeyDown.bind(this)\n      };\n    }\n\n    async startPicking() {\n      if (this.isActive) {\n        console.warn('Element picker already active');\n        return false;\n      }\n\n      this.isActive = true;\n      this.createOverlay();\n      this.attachEventListeners();\n      \n      console.log('\u2705 Element picker started - click any element to select');\n      return true;\n    }\n\n    stop() {\n      if (!this.isActive) {\n        return false;\n      }\n\n      this.isActive = false;\n      this.removeOverlay();\n      this.detachEventListeners();\n      this.clearHighlight();\n      \n      console.log('\uD83D\uDED1 Element picker stopped');\n      return true;\n    }\n\n    createOverlay() {\n      this.overlay = document.createElement('div');\n      this.overlay.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.1);\n        z-index: 999999;\n        pointer-events: none;\n        cursor: crosshair;\n      `;\n      document.body.appendChild(this.overlay);\n    }\n\n    removeOverlay() {\n      if (this.overlay && this.overlay.parentNode) {\n        this.overlay.parentNode.removeChild(this.overlay);\n        this.overlay = null;\n      }\n    }\n\n    attachEventListeners() {\n      document.addEventListener('mouseover', this.handlers.mouseover, true);\n      document.addEventListener('click', this.handlers.click, true);\n      document.addEventListener('keydown', this.handlers.keydown, true);\n    }\n\n    detachEventListeners() {\n      document.removeEventListener('mouseover', this.handlers.mouseover, true);\n      document.removeEventListener('click', this.handlers.click, true);\n      document.removeEventListener('keydown', this.handlers.keydown, true);\n    }\n\n    handleMouseOver(event) {\n      if (!this.isActive) return;\n      \n      event.preventDefault();\n      event.stopPropagation();\n      \n      this.highlightElement(event.target);\n    }\n\n    handleClick(event) {\n      if (!this.isActive) return;\n      \n      event.preventDefault();\n      event.stopPropagation();\n      \n      const element = event.target;\n      const selector = this.generateSelector(element);\n      \n      console.log('\uD83C\uDFAF Element selected:', { element, selector });\n      \n      // Send selection back to extension\n      if (typeof chrome !== 'undefined' && chrome.runtime) {\n        chrome.runtime.sendMessage({\n          action: 'element_selected',\n          selector: selector,\n          element: {\n            tagName: element.tagName,\n            className: element.className,\n            id: element.id,\n            textContent: element.textContent?.substring(0, 100)\n          }\n        });\n      }\n      \n      this.stop();\n    }\n\n    handleKeyDown(event) {\n      if (!this.isActive) return;\n      \n      if (event.key === 'Escape') {\n        event.preventDefault();\n        this.stop();\n      }\n    }\n\n    highlightElement(element) {\n      this.clearHighlight();\n      \n      if (element && element !== document.body && element !== document.documentElement) {\n        element.style.outline = '2px solid #ff6b6b';\n        element.style.backgroundColor = 'rgba(255, 107, 107, 0.1)';\n        this.highlightedElement = element;\n      }\n    }\n\n    clearHighlight() {\n      if (this.highlightedElement) {\n        this.highlightedElement.style.outline = '';\n        this.highlightedElement.style.backgroundColor = '';\n        this.highlightedElement = null;\n      }\n    }\n\n    generateSelector(element) {\n      if (element.id) {\n        return `#${element.id}`;\n      }\n      \n      let selector = element.tagName.toLowerCase();\n      \n      if (element.className) {\n        const classes = element.className.split(' ').filter(c => c.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes[0];\n        }\n      }\n      \n      return selector;\n    }\n  }\n\n  // Export to global scope\n  window.StepTwoElementPicker = StepTwoElementPicker;\n  console.log('\u2705 Element picker loaded');\n}\n\n// =============================================================================\n// 9.5. ENHANCED SMART SELECTOR SYSTEM (BUNDLED FOR MV3 COMPATIBILITY)\n// =============================================================================\n\n// Initialize Enhanced Smart Selector with CSP-safe bundling\nasync function initializeEnhancedSelector() {\n  return new Promise((resolve) => {\n    try {\n      // Define EnhancedSmartSelectorSystem class inline to avoid CSP issues\n      if (!window.EnhancedSmartSelectorSystem) {\n        \n        class EnhancedSmartSelectorSystem {\n          constructor(options = {}) {\n            this.options = {\n              // Core selection options\n              maxFallbackAttempts: options.maxFallbackAttempts || 3,\n              selectorTimeout: options.selectorTimeout || 2000,\n              confidenceThreshold: options.confidenceThreshold || 0.75,\n              earlyExitThreshold: options.earlyExitThreshold || 0.90,\n              \n              // Auto-expand settings\n              autoExpandAfterSamples: options.autoExpandAfterSamples || 3,\n              autoExpandMinConfidence: options.autoExpandMinConfidence || 0.90,\n              maxAutoExpandElements: options.maxAutoExpandElements || 1000,\n              \n              // Similarity clustering weights\n              similarityWeights: {\n                tagName: 0.2,\n                className: 0.25,\n                attributes: 0.20,\n                cssPath: 0.15,\n                siblings: 0.10,\n                urlPattern: 0.10\n              },\n              \n              // URL pattern mining\n              urlPatternMining: {\n                enabled: options.enableUrlPatternMining !== false,\n                numericPattern: /(\\d+)/g,\n                sequenceThreshold: 3, // Min sequence length to consider pattern\n                confidenceBoost: 0.15 // Boost for URL pattern matches\n              },\n              \n              confidenceWeights: {\n                dataAttributes: 0.95,\n                reactPatterns: 0.92,\n                semanticClasses: 0.88,\n                structuralPatterns: 0.85,\n                genericSelectors: 0.60\n              },\n              \n              enableProgressiveAnalysis: options.enableProgressiveAnalysis !== false,\n              enableEarlyExit: options.enableEarlyExit !== false,\n              maxAnalysisTime: options.maxAnalysisTime || 5000,\n              \n              // Core site-specific patterns for major platforms\n              siteSpecificPatterns: {\n                instagram: {\n                  domain: ['instagram.com', 'www.instagram.com'],\n                  confidence: 0.95,\n                  imageSelectors: [\n                    '._aagu img', '._aagv img', 'article img[src*=\"scontent\"]',\n                    '[role=\"presentation\"] img[src*=\"scontent\"]', 'img[alt*=\"Photo by\"]',\n                    'div[class*=\"x1n2onr6\"] img', 'div[class*=\"x1lliihq\"] img',\n                    'section[role=\"main\"] img:not([alt*=\"avatar\"])',\n                    'div[data-visualcompletion=\"media-vc-image\"] img'\n                  ]\n                },\n                twitter: {\n                  domain: ['twitter.com', 'x.com'],\n                  confidence: 0.90,\n                  imageSelectors: [\n                    '[data-testid=\"tweetPhoto\"] img', '[data-testid=\"media\"] img',\n                    'img[src*=\"pbs.twimg.com\"]', '[role=\"group\"] img[src*=\"pbs.twimg\"]',\n                    'div[data-testid=\"tweet\"] img:not([src*=\"profile_images\"])'\n                  ]\n                },\n                pinterest: {\n                  domain: ['pinterest.com', 'www.pinterest.com'],\n                  confidence: 0.93,\n                  imageSelectors: [\n                    '[data-test-id=\"pin-image\"] img', '.GrowthUnauthPinImage img',\n                    'img[src*=\"pinimg\"]', 'div[class*=\"gridCentered\"] img'\n                  ]\n                },\n                generic: {\n                  confidence: 0.60,\n                  imageSelectors: [\n                    'img[src]:not([src*=\"icon\"]):not([src*=\"avatar\"]):not([width=\"16\"]):not([height=\"16\"])',\n                    'img[data-src]:not([data-src*=\"icon\"])', '.gallery img', '.images img',\n                    'article img:not([width=\"16\"]):not([height=\"16\"])', 'figure img'\n                  ]\n                }\n              },\n              \n              ...options\n            };\n\n            // Smart selector state\n            this.currentSite = this.detectCurrentSite();\n            this.sitePatterns = this.getCurrentSitePatterns();\n            this.selectedElements = [];\n            this.selectedSamples = []; // Tracks user-selected samples for pattern recognition\n            this.autoExpandedElements = []; // Tracks auto-expanded elements\n            this.urlPatterns = new Map(); // Cache for detected URL patterns\n            this.similarityCache = new Map(); // Cache for similarity calculations\n            this.isActive = false;\n            this.ready = true;\n            this.selectionCounter = 0;\n            \n            // Progressive selection workflow state\n            this.progressiveMode = 'sampling'; // 'sampling', 'analyzing', 'expanding'\n            this.patternAnalysis = null;\n            this.lastAnalysisTime = 0;\n            \n            console.log(`\uD83E\uDDE0 Enhanced Smart Selector initialized for site: ${this.currentSite}`);\n          }\n\n          detectCurrentSite() {\n            const hostname = window.location.hostname.toLowerCase();\n            if (hostname.includes('instagram')) return 'instagram';\n            if (hostname.includes('twitter') || hostname.includes('x.com')) return 'twitter';\n            if (hostname.includes('pinterest')) return 'pinterest';\n            return 'generic';\n          }\n\n          getCurrentSitePatterns() {\n            return this.options.siteSpecificPatterns[this.currentSite] || \n                   this.options.siteSpecificPatterns.generic;\n          }\n\n          async findGalleryImages(options = {}) {\n            const startTime = performance.now();\n            try {\n              const selectors = this.sitePatterns.imageSelectors || [];\n              const allImages = [];\n              \n              for (const selector of selectors) {\n                try {\n                  const elements = document.querySelectorAll(selector);\n                  allImages.push(...Array.from(elements));\n                } catch (error) {\n                  console.warn(`Selector failed: ${selector}`, error);\n                }\n              }\n\n              // Remove duplicates and filter valid images\n              const uniqueImages = Array.from(new Set(allImages));\n              const validImages = uniqueImages.filter(img => {\n                if (!img.src && !img.dataset.src) return false;\n                const rect = img.getBoundingClientRect();\n                return rect.width > (options.minSize || 100) && rect.height > (options.minSize || 100);\n              });\n\n              const processingTime = performance.now() - startTime;\n              \n              return {\n                images: validImages.slice(0, options.maxImages || 1000),\n                site: this.currentSite,\n                totalFound: allImages.length,\n                validCount: validImages.length,\n                processingTime,\n                enhanced: true\n              };\n            } catch (error) {\n              console.error('Enhanced selector error:', error);\n              return { images: [], error: error.message, enhanced: false };\n            }\n          }\n\n          // Alias for compatibility\n          findImages(options = {}) {\n            return this.findGalleryImages(options);\n          }\n\n          startInteractiveSelection() {\n            if (this.isActive) return false;\n            this.isActive = true;\n            \n            this.setupEventListeners();\n            document.body.style.cursor = 'crosshair';\n            \n            console.log('\uD83C\uDFAF Enhanced interactive selection started');\n            return true;\n          }\n\n          setupEventListeners() {\n            this.mouseOverHandler = this.handleMouseOver.bind(this);\n            this.clickHandler = this.handleClick.bind(this);\n            \n            document.addEventListener('mouseover', this.mouseOverHandler);\n            document.addEventListener('click', this.clickHandler);\n          }\n\n          stopSelection() {\n            if (!this.isActive) return false;\n            this.isActive = false;\n            \n            if (this.mouseOverHandler) {\n              document.removeEventListener('mouseover', this.mouseOverHandler);\n            }\n            if (this.clickHandler) {\n              document.removeEventListener('click', this.clickHandler);\n            }\n            \n            document.body.style.cursor = '';\n            \n            // Clear highlights\n            document.querySelectorAll('.st-enhanced-highlight').forEach(el => {\n              el.classList.remove('st-enhanced-highlight');\n            });\n            \n            console.log('\uD83D\uDED1 Enhanced interactive selection stopped');\n            return true;\n          }\n\n          handleMouseOver(event) {\n            if (!this.isActive) return;\n            \n            // Clear previous highlight\n            document.querySelectorAll('.st-enhanced-highlight').forEach(el => {\n              el.classList.remove('st-enhanced-highlight');\n            });\n            \n            // Highlight current element\n            event.target.classList.add('st-enhanced-highlight');\n          }\n\n          handleClick(event) {\n            if (!this.isActive) return;\n            event.preventDefault();\n            event.stopPropagation();\n            \n            this.selectionCounter++;\n            const element = event.target;\n            \n            // Add to selected samples for pattern analysis\n            this.selectedSamples.push({\n              element: element,\n              selector: this.generateStableSelector(element),\n              attributes: this.extractElementAttributes(element),\n              cssPath: this.generateCSSPath(element),\n              urlPattern: this.extractUrlPattern(element),\n              timestamp: Date.now(),\n              index: this.selectionCounter\n            });\n            \n            // Add visual selection indicator\n            this.addSelectionIndicator(element, this.selectionCounter);\n            \n            console.log(`\uD83C\uDFAF Enhanced element selected (${this.selectionCounter}):`, element);\n            \n            // Progressive selection workflow\n            if (this.selectionCounter >= this.options.autoExpandAfterSamples) {\n              this.progressiveMode = 'analyzing';\n              this.analyzePatternAndAutoExpand();\n            } else {\n              // Continue sampling mode\n              this.progressiveMode = 'sampling';\n              this.updateSelectionStatus(`Select ${this.options.autoExpandAfterSamples - this.selectionCounter} more samples to auto-detect similar elements`);\n            }\n            \n            // Emit selection event with enhanced data\n            window.dispatchEvent(new CustomEvent('st-element-selected', {\n              detail: { \n                element: element, \n                selector: this.generateStableSelector(element),\n                selectionCount: this.selectionCounter,\n                mode: this.progressiveMode,\n                samples: this.selectedSamples.length,\n                autoExpanded: this.autoExpandedElements.length\n              }\n            }));\n          }\n\n          // =============================================================================\n          // SIMILARITY CLUSTERING ALGORITHM\n          // =============================================================================\n\n          /**\n           * Analyze patterns from selected samples and auto-expand selection\n           */\n          async analyzePatternAndAutoExpand() {\n            console.log('\uD83E\uDDE0 Analyzing patterns from selected samples...');\n            \n            if (this.selectedSamples.length < this.options.autoExpandAfterSamples) {\n              return;\n            }\n            \n            const startTime = performance.now();\n            this.patternAnalysis = await this.performSimilarityAnalysis();\n            \n            if (this.patternAnalysis.confidence >= this.options.autoExpandMinConfidence) {\n              await this.autoExpandSelection();\n              this.progressiveMode = 'expanding';\n            } else {\n              this.progressiveMode = 'sampling';\n              this.updateSelectionStatus(`Pattern confidence too low (${Math.round(this.patternAnalysis.confidence * 100)}%), need more samples`);\n            }\n            \n            this.lastAnalysisTime = performance.now() - startTime;\n            console.log(`\uD83C\uDFAF Pattern analysis completed in ${this.lastAnalysisTime.toFixed(2)}ms`);\n          }\n\n          /**\n           * Perform similarity analysis on selected samples\n           */\n          async performSimilarityAnalysis() {\n            const analysis = {\n              confidence: 0,\n              patterns: {\n                tagName: {},\n                className: {},\n                attributes: {},\n                cssPath: {},\n                urlPattern: {},\n                siblings: {}\n              },\n              selectedSelector: '',\n              similarElements: [],\n              breakdown: {}\n            };\n            \n            // Analyze common patterns across samples\n            for (const sample of this.selectedSamples) {\n              // Tag name analysis\n              const tagName = sample.element.tagName.toLowerCase();\n              analysis.patterns.tagName[tagName] = (analysis.patterns.tagName[tagName] || 0) + 1;\n              \n              // Class name analysis\n              if (sample.element.className) {\n                const classes = sample.element.className.split(' ').filter(c => c.trim());\n                classes.forEach(cls => {\n                  analysis.patterns.className[cls] = (analysis.patterns.className[cls] || 0) + 1;\n                });\n              }\n              \n              // Attribute analysis\n              for (const attr of sample.element.attributes) {\n                if (attr.name !== 'class' && attr.name !== 'id') {\n                  const key = `${attr.name}=${attr.value}`;\n                  analysis.patterns.attributes[key] = (analysis.patterns.attributes[key] || 0) + 1;\n                }\n              }\n              \n              // URL pattern analysis\n              if (sample.urlPattern) {\n                analysis.patterns.urlPattern[sample.urlPattern] = (analysis.patterns.urlPattern[sample.urlPattern] || 0) + 1;\n              }\n              \n              // Sibling analysis\n              const siblingsInfo = this.analyzeSiblings(sample.element);\n              const siblingKey = `${siblingsInfo.total}_${siblingsInfo.position}`;\n              analysis.patterns.siblings[siblingKey] = (analysis.patterns.siblings[siblingKey] || 0) + 1;\n            }\n            \n            // Calculate confidence based on pattern consistency\n            const sampleCount = this.selectedSamples.length;\n            const weights = this.options.similarityWeights;\n            let totalConfidence = 0;\n            \n            // Tag name confidence\n            const mostCommonTag = this.getMostCommonPattern(analysis.patterns.tagName);\n            if (mostCommonTag.count === sampleCount) {\n              totalConfidence += weights.tagName;\n              analysis.breakdown.tagName = { confidence: 1.0, pattern: mostCommonTag.pattern };\n            }\n            \n            // Class name confidence\n            const mostCommonClass = this.getMostCommonPattern(analysis.patterns.className);\n            if (mostCommonClass.count >= Math.ceil(sampleCount * 0.7)) {\n              const classConfidence = mostCommonClass.count / sampleCount;\n              totalConfidence += weights.className * classConfidence;\n              analysis.breakdown.className = { confidence: classConfidence, pattern: mostCommonClass.pattern };\n            }\n            \n            // Attribute confidence\n            const mostCommonAttr = this.getMostCommonPattern(analysis.patterns.attributes);\n            if (mostCommonAttr.count >= Math.ceil(sampleCount * 0.6)) {\n              const attrConfidence = mostCommonAttr.count / sampleCount;\n              totalConfidence += weights.attributes * attrConfidence;\n              analysis.breakdown.attributes = { confidence: attrConfidence, pattern: mostCommonAttr.pattern };\n            }\n            \n            // URL pattern confidence\n            if (this.options.urlPatternMining.enabled) {\n              const urlConfidence = this.calculateUrlPatternConfidence(analysis.patterns.urlPattern, sampleCount);\n              totalConfidence += weights.urlPattern * urlConfidence;\n              analysis.breakdown.urlPattern = { confidence: urlConfidence };\n            }\n            \n            analysis.confidence = Math.min(totalConfidence, 1.0);\n            \n            // Generate stable selector for similar elements\n            analysis.selectedSelector = this.generatePatternSelector(analysis);\n            \n            return analysis;\n          }\n\n          /**\n           * Auto-expand selection based on pattern analysis\n           */\n          async autoExpandSelection() {\n            if (!this.patternAnalysis || !this.patternAnalysis.selectedSelector) {\n              return;\n            }\n            \n            console.log(`\uD83D\uDE80 Auto-expanding selection with selector: ${this.patternAnalysis.selectedSelector}`);\n            \n            try {\n              // Find all elements matching the pattern\n              const candidateElements = document.querySelectorAll(this.patternAnalysis.selectedSelector);\n              const filteredElements = [];\n              \n              for (const candidate of candidateElements) {\n                // Skip already selected elements\n                if (this.selectedSamples.some(sample => sample.element === candidate)) {\n                  continue;\n                }\n                \n                // Calculate similarity to selected samples\n                const similarity = this.calculateElementSimilarity(candidate, this.selectedSamples);\n                \n                if (similarity >= this.options.autoExpandMinConfidence) {\n                  filteredElements.push({\n                    element: candidate,\n                    similarity: similarity,\n                    selector: this.generateStableSelector(candidate)\n                  });\n                }\n                \n                // Limit auto-expansion to prevent page overload\n                if (filteredElements.length >= this.options.maxAutoExpandElements) {\n                  break;\n                }\n              }\n              \n              // Add auto-expanded elements\n              this.autoExpandedElements = filteredElements;\n              \n              // Add visual indicators for auto-expanded elements\n              filteredElements.forEach((item, index) => {\n                this.addAutoExpandIndicator(item.element, index + 1);\n              });\n              \n              const totalSelected = this.selectedSamples.length + this.autoExpandedElements.length;\n              this.updateSelectionStatus(`Auto-expanded: found ${this.autoExpandedElements.length} similar elements (${totalSelected} total)`);\n              \n              console.log(`\u2705 Auto-expansion completed: ${this.autoExpandedElements.length} elements added`);\n              \n              // Emit auto-expansion event\n              window.dispatchEvent(new CustomEvent('st-auto-expanded', {\n                detail: {\n                  expandedCount: this.autoExpandedElements.length,\n                  totalCount: totalSelected,\n                  confidence: this.patternAnalysis.confidence,\n                  selector: this.patternAnalysis.selectedSelector\n                }\n              }));\n              \n            } catch (error) {\n              console.error('\u274C Auto-expansion failed:', error);\n              this.updateSelectionStatus('Auto-expansion failed, continue manual selection');\n            }\n          }\n\n          // =============================================================================\n          // URL PATTERN MINING\n          // =============================================================================\n\n          /**\n           * Extract URL pattern from element (for images and links)\n           */\n          extractUrlPattern(element) {\n            const urls = [];\n            \n            // Get URLs from various sources\n            if (element.src) urls.push(element.src);\n            if (element.href) urls.push(element.href);\n            if (element.dataset.src) urls.push(element.dataset.src);\n            if (element.dataset.original) urls.push(element.dataset.original);\n            \n            // Analyze URL patterns\n            for (const url of urls) {\n              const pattern = this.detectNumericSequence(url);\n              if (pattern) {\n                return pattern;\n              }\n            }\n            \n            return null;\n          }\n\n          /**\n           * Detect numeric sequences in URLs for gallery pattern recognition\n           */\n          detectNumericSequence(url) {\n            if (!this.options.urlPatternMining.enabled) {\n              return null;\n            }\n            \n            try {\n              const numbers = [...url.matchAll(this.options.urlPatternMining.numericPattern)];\n              \n              if (numbers.length === 0) {\n                return null;\n              }\n              \n              // Look for sequences (e.g., /image1.jpg, /image2.jpg, /image3.jpg)\n              const lastNumber = numbers[numbers.length - 1];\n              const numberValue = parseInt(lastNumber[1]);\n              \n              if (!isNaN(numberValue) && numberValue > 0) {\n                // Generate pattern by replacing the number with a placeholder\n                const pattern = url.replace(lastNumber[1], '{n}');\n                return {\n                  pattern: pattern,\n                  position: lastNumber.index,\n                  value: numberValue,\n                  url: url\n                };\n              }\n              \n            } catch (error) {\n              console.warn('URL pattern detection failed:', error);\n            }\n            \n            return null;\n          }\n\n          /**\n           * Calculate confidence for URL patterns\n           */\n          calculateUrlPatternConfidence(urlPatterns, sampleCount) {\n            if (Object.keys(urlPatterns).length === 0) {\n              return 0;\n            }\n            \n            const mostCommon = this.getMostCommonPattern(urlPatterns);\n            const confidence = mostCommon.count / sampleCount;\n            \n            // Boost confidence if URL pattern indicates a sequence\n            if (mostCommon.pattern && mostCommon.pattern.includes('{n}')) {\n              return Math.min(confidence + this.options.urlPatternMining.confidenceBoost, 1.0);\n            }\n            \n            return confidence;\n          }\n\n          generateSelector(element) {\n            if (element.id) {\n              return `#${element.id}`;\n            }\n            \n            let selector = element.tagName.toLowerCase();\n            \n            if (element.className) {\n              const classes = element.className.split(' ').filter(c => c.trim() && !c.includes('st-enhanced'));\n              if (classes.length > 0) {\n                selector += '.' + classes[0];\n              }\n            }\n            \n            return selector;\n          }\n\n          // =============================================================================\n          // HELPER METHODS FOR SMART PATTERN RECOGNITION\n          // =============================================================================\n\n          /**\n           * Generate stable CSS selector for element\n           */\n          generateStableSelector(element) {\n            // Try ID first (most stable)\n            if (element.id && element.id.trim()) {\n              return `#${element.id}`;\n            }\n\n            // Try stable data attributes\n            const stableAttributes = ['data-testid', 'data-cy', 'data-test', 'role', 'aria-label'];\n            for (const attr of stableAttributes) {\n              const value = element.getAttribute(attr);\n              if (value && value.trim()) {\n                return `[${attr}=\"${value}\"]`;\n              }\n            }\n\n            // Try meaningful classes (avoid generated/temporary classes)\n            if (element.className) {\n              const classes = element.className.split(' ')\n                .filter(cls => cls.trim() && !cls.match(/^(st-|temp-|auto-|gen-|css-)/))\n                .filter(cls => cls.length > 2);\n              \n              if (classes.length > 0) {\n                return element.tagName.toLowerCase() + '.' + classes[0];\n              }\n            }\n\n            // Fallback to CSS path\n            return this.generateCSSPath(element);\n          }\n\n          /**\n           * Generate CSS path to element\n           */\n          generateCSSPath(element) {\n            const path = [];\n            let current = element;\n\n            while (current && current.nodeType === Node.ELEMENT_NODE && current !== document.body) {\n              let selector = current.tagName.toLowerCase();\n              \n              if (current.id) {\n                selector += `#${current.id}`;\n                path.unshift(selector);\n                break;\n              }\n\n              // Add nth-child if needed for uniqueness\n              const siblings = Array.from(current.parentNode?.children || [])\n                .filter(sibling => sibling.tagName === current.tagName);\n              \n              if (siblings.length > 1) {\n                const index = siblings.indexOf(current) + 1;\n                selector += `:nth-child(${index})`;\n              }\n\n              path.unshift(selector);\n              current = current.parentNode;\n            }\n\n            return path.join(' > ');\n          }\n\n          /**\n           * Extract element attributes for analysis\n           */\n          extractElementAttributes(element) {\n            const attributes = {};\n            \n            for (const attr of element.attributes) {\n              attributes[attr.name] = attr.value;\n            }\n            \n            return attributes;\n          }\n\n          /**\n           * Analyze element siblings for pattern recognition\n           */\n          analyzeSiblings(element) {\n            const parent = element.parentNode;\n            if (!parent) {\n              return { total: 0, position: 0, similarSiblings: 0 };\n            }\n\n            const siblings = Array.from(parent.children);\n            const position = siblings.indexOf(element);\n            const similarSiblings = siblings.filter(sibling => \n              sibling.tagName === element.tagName && \n              sibling.className === element.className\n            ).length;\n\n            return {\n              total: siblings.length,\n              position: position,\n              similarSiblings: similarSiblings\n            };\n          }\n\n          /**\n           * Calculate similarity between element and selected samples\n           */\n          calculateElementSimilarity(element, samples) {\n            if (samples.length === 0) return 0;\n\n            let totalSimilarity = 0;\n            const weights = this.options.similarityWeights;\n\n            for (const sample of samples) {\n              let similarity = 0;\n\n              // Tag name similarity\n              if (element.tagName === sample.element.tagName) {\n                similarity += weights.tagName;\n              }\n\n              // Class name similarity\n              const elementClasses = new Set(element.className.split(' ').filter(c => c.trim()));\n              const sampleClasses = new Set(sample.element.className.split(' ').filter(c => c.trim()));\n              const classIntersection = new Set([...elementClasses].filter(x => sampleClasses.has(x)));\n              const classUnion = new Set([...elementClasses, ...sampleClasses]);\n              \n              if (classUnion.size > 0) {\n                const classJaccard = classIntersection.size / classUnion.size;\n                similarity += weights.className * classJaccard;\n              }\n\n              // Attribute similarity\n              const elementAttrs = this.extractElementAttributes(element);\n              const sampleAttrs = sample.attributes;\n              const attrSimilarity = this.calculateAttributeSimilarity(elementAttrs, sampleAttrs);\n              similarity += weights.attributes * attrSimilarity;\n\n              // CSS path similarity (structural)\n              const elementPath = this.generateCSSPath(element);\n              const samplePath = sample.cssPath;\n              const pathSimilarity = this.calculatePathSimilarity(elementPath, samplePath);\n              similarity += weights.cssPath * pathSimilarity;\n\n              // Sibling context similarity\n              const elementSiblings = this.analyzeSiblings(element);\n              const sampleSiblings = this.analyzeSiblings(sample.element);\n              const siblingSimilarity = this.calculateSiblingSimilarity(elementSiblings, sampleSiblings);\n              similarity += weights.siblings * siblingSimilarity;\n\n              // URL pattern similarity\n              if (this.options.urlPatternMining.enabled) {\n                const elementUrlPattern = this.extractUrlPattern(element);\n                const urlSimilarity = this.calculateUrlSimilarity(elementUrlPattern, sample.urlPattern);\n                similarity += weights.urlPattern * urlSimilarity;\n              }\n\n              totalSimilarity += similarity;\n            }\n\n            return totalSimilarity / samples.length;\n          }\n\n          /**\n           * Calculate attribute similarity using Jaccard index\n           */\n          calculateAttributeSimilarity(attrs1, attrs2) {\n            const keys1 = new Set(Object.keys(attrs1));\n            const keys2 = new Set(Object.keys(attrs2));\n            const intersection = new Set([...keys1].filter(x => keys2.has(x)));\n            const union = new Set([...keys1, ...keys2]);\n\n            if (union.size === 0) return 1; // Both empty\n            return intersection.size / union.size;\n          }\n\n          /**\n           * Calculate path similarity using edit distance\n           */\n          calculatePathSimilarity(path1, path2) {\n            const parts1 = path1.split(' > ');\n            const parts2 = path2.split(' > ');\n            \n            // Simple similarity based on common path elements\n            const common = parts1.filter(part => parts2.includes(part)).length;\n            const total = Math.max(parts1.length, parts2.length);\n            \n            return total > 0 ? common / total : 0;\n          }\n\n          /**\n           * Calculate sibling similarity\n           */\n          calculateSiblingSimilarity(siblings1, siblings2) {\n            const totalDiff = Math.abs(siblings1.total - siblings2.total);\n            const positionDiff = Math.abs(siblings1.position - siblings2.position);\n            const similarDiff = Math.abs(siblings1.similarSiblings - siblings2.similarSiblings);\n            \n            // Normalize differences and calculate similarity\n            const totalSim = totalDiff <= 2 ? 1 : Math.max(0, 1 - totalDiff / 10);\n            const positionSim = positionDiff <= 2 ? 1 : Math.max(0, 1 - positionDiff / 5);\n            const similarSim = similarDiff === 0 ? 1 : Math.max(0, 1 - similarDiff / 3);\n            \n            return (totalSim + positionSim + similarSim) / 3;\n          }\n\n          /**\n           * Calculate URL similarity\n           */\n          calculateUrlSimilarity(pattern1, pattern2) {\n            if (!pattern1 || !pattern2) return 0;\n            \n            // Compare URL patterns\n            if (pattern1.pattern === pattern2.pattern) {\n              return 1;\n            }\n            \n            // Check if URLs are similar (same base, different numbers)\n            const base1 = pattern1.pattern.replace('{n}', '');\n            const base2 = pattern2.pattern.replace('{n}', '');\n            \n            return base1 === base2 ? 0.8 : 0;\n          }\n\n          /**\n           * Get most common pattern from analysis\n           */\n          getMostCommonPattern(patterns) {\n            let maxCount = 0;\n            let mostCommon = null;\n\n            for (const [pattern, count] of Object.entries(patterns)) {\n              if (count > maxCount) {\n                maxCount = count;\n                mostCommon = pattern;\n              }\n            }\n\n            return { pattern: mostCommon, count: maxCount };\n          }\n\n          /**\n           * Generate selector based on pattern analysis\n           */\n          generatePatternSelector(analysis) {\n            const selectors = [];\n\n            // Use most common tag\n            const tagPattern = analysis.breakdown.tagName;\n            if (tagPattern && tagPattern.confidence > 0.8) {\n              selectors.push(tagPattern.pattern);\n            }\n\n            // Add most common class\n            const classPattern = analysis.breakdown.className;\n            if (classPattern && classPattern.confidence > 0.7) {\n              selectors.push(`${tagPattern?.pattern || ''}.${classPattern.pattern}`);\n            }\n\n            // Add most common attribute\n            const attrPattern = analysis.breakdown.attributes;\n            if (attrPattern && attrPattern.confidence > 0.6) {\n              selectors.push(`[${attrPattern.pattern}]`);\n            }\n\n            // Return the most specific selector\n            return selectors.length > 0 ? selectors[selectors.length - 1] : 'img';\n          }\n\n          // =============================================================================\n          // VISUAL FEEDBACK SYSTEM\n          // =============================================================================\n\n          /**\n           * Add visual indicator for selected elements\n           */\n          addSelectionIndicator(element, index) {\n            // Remove existing indicators\n            const existingBadge = element.querySelector('.st-selection-badge');\n            if (existingBadge) {\n              existingBadge.remove();\n            }\n\n            // Add selection styling\n            element.classList.add('st-selected-element');\n\n            // Create selection badge\n            const badge = document.createElement('div');\n            badge.className = 'st-selection-badge';\n            badge.textContent = index.toString();\n            badge.style.cssText = `\n              position: absolute;\n              top: -10px;\n              left: -10px;\n              background: #4CAF50;\n              color: white;\n              border-radius: 50%;\n              width: 24px;\n              height: 24px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-size: 12px;\n              font-weight: bold;\n              z-index: 10000;\n              pointer-events: none;\n              box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n            `;\n\n            // Position badge relative to element\n            element.style.position = 'relative';\n            element.appendChild(badge);\n          }\n\n          /**\n           * Add visual indicator for auto-expanded elements\n           */\n          addAutoExpandIndicator(element, index) {\n            // Add auto-expand styling\n            element.classList.add('st-auto-expanded-element');\n\n            // Create auto-expand badge\n            const badge = document.createElement('div');\n            badge.className = 'st-auto-expand-badge';\n            badge.textContent = '+';\n            badge.style.cssText = `\n              position: absolute;\n              top: -8px;\n              right: -8px;\n              background: #2196F3;\n              color: white;\n              border-radius: 50%;\n              width: 20px;\n              height: 20px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-size: 14px;\n              font-weight: bold;\n              z-index: 10000;\n              pointer-events: none;\n              box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n            `;\n\n            // Position badge relative to element\n            element.style.position = 'relative';\n            element.appendChild(badge);\n          }\n\n          /**\n           * Update selection status message\n           */\n          updateSelectionStatus(message) {\n            // Emit status update event for dashboard\n            window.dispatchEvent(new CustomEvent('st-selection-status', {\n              detail: { \n                message: message,\n                mode: this.progressiveMode,\n                samples: this.selectedSamples.length,\n                autoExpanded: this.autoExpandedElements.length\n              }\n            }));\n\n            console.log(`\uD83D\uDCE2 Selection Status: ${message}`);\n          }\n        }\n\n        // Export to global scope for compatibility\n        window.EnhancedSmartSelectorSystem = EnhancedSmartSelectorSystem;\n        \n        // Add CSS for highlighting if not already present\n        if (!document.querySelector('#st-enhanced-styles')) {\n          const style = document.createElement('style');\n          style.id = 'st-enhanced-styles';\n          style.textContent = `\n            .st-enhanced-highlight {\n              outline: 2px solid #00ff88 !important;\n              background-color: rgba(0, 255, 136, 0.1) !important;\n              transition: all 0.1s ease !important;\n            }\n          `;\n          document.head.appendChild(style);\n        }\n      }\n\n      // Initialize the enhanced selector instance\n      ExtensionState.selector = new window.EnhancedSmartSelectorSystem({\n        confidenceThreshold: 0.75,\n        earlyExitThreshold: 0.90,\n        maxFallbackAttempts: 3,\n        enableProgressiveAnalysis: true,\n        enableEarlyExit: true\n      });\n\n      console.log('\u2705 Enhanced Smart Selector System bundled and initialized successfully');\n      resolve(true);\n      \n    } catch (error) {\n      console.error('\u274C Enhanced selector initialization failed:', error);\n      \n      // Fallback to basic selector\n      if (window.AdaptiveSelectorSystem) {\n        ExtensionState.selector = new window.AdaptiveSelectorSystem({\n          confidenceThreshold: 0.8,\n          maxFallbackAttempts: 3\n        });\n        console.log('\u26A0\uFE0F Using fallback AdaptiveSelectorSystem');\n      }\n      \n      resolve(false);\n    }\n  });\n}\n\n// =============================================================================\n// 10. INITIALIZATION & INTEGRATION - Main entry point and message handling\n// =============================================================================\n\n// Main Extension Integration\nif (!window.StepTwoContentBundleInitialized) {\n  window.StepTwoContentBundleInitialized = true;\n\n  // Global state management\n  const ExtensionState = {\n    initialized: false,\n    observer: null,\n    picker: null,\n    scraper: null,\n    lastActivity: Date.now(),\n    config: {\n      enableDebug: window.StepTwoConfig?.DEBUG_MODE || false,\n      enableMetrics: true,\n      autoInitialize: true\n    }\n  };\n\n  // Initialize all components\n  async function initializeExtension() {\n    if (ExtensionState.initialized) {\n      console.warn('\u26A0\uFE0F Extension already initialized');\n      return false;\n    }\n\n    try {\n      console.log('\uD83D\uDE80 Initializing STEPTWO Gallery Scraper...');\n\n      // Initialize global utilities (only those that are defined)\n      if (typeof ServiceWorkerFetch !== 'undefined') {\n        window.ServiceWorkerFetch = ServiceWorkerFetch;\n      }\n\n      // Initialize services\n      ExtensionState.scraper = new window.EnhancedScraperUtils({\n        enableMetrics: ExtensionState.config.enableMetrics,\n        requestsPerSecond: 2,\n        maxRetries: 3,\n        enableDuplicateDetection: true\n      });\n\n      // Initialize content observer\n      ExtensionState.observer = new window.DynamicContentObserver({\n        detectImages: true,\n        detectGalleries: true,\n        significantChangeThreshold: 0.3,\n        throttleDelay: 500\n      });\n\n      // Initialize selector system with readiness promise\n      ExtensionState.selectorReady = initializeEnhancedSelector();\n      \n      // Wait for selector to be ready\n      await ExtensionState.selectorReady;\n\n      // Initialize element picker\n      ExtensionState.picker = new window.StepTwoElementPicker();\n\n      ExtensionState.initialized = true;\n      ExtensionState.lastActivity = Date.now();\n\n      console.log('\u2705 Extension initialized successfully!');\n      return true;\n\n    } catch (error) {\n      console.error('\u274C Extension initialization failed:', error);\n      return false;\n    }\n  }\n\n  // Message handler for extension communication\n  function handleExtensionMessage(message, sender, sendResponse) {\n    console.log('\uD83D\uDCE8 Received message:', message);\n\n    try {\n      switch (message.action) {\n        case 'ping':\n          sendResponse({ status: 'ok', initialized: ExtensionState.initialized });\n          break;\n\n        case 'initialize':\n          initializeExtension().then(success => {\n            sendResponse({ success, initialized: ExtensionState.initialized });\n          }).catch(error => {\n            sendResponse({ success: false, error: error.message });\n          });\n          break;\n\n        case 'scrape_images':\n          handleScrapeImages(message, sendResponse);\n          break;\n\n        case 'find_gallery':\n          handleFindGallery(message, sendResponse);\n          break;\n\n        case 'start_element_picker':\n          handleStartElementPicker(message, sendResponse);\n          break;\n\n        case 'stop_element_picker':\n          handleStopElementPicker(message, sendResponse);\n          break;\n\n        case 'start_smart_selector':\n          handleStartSmartSelector(message, sendResponse);\n          break;\n\n        case 'stop_smart_selector':\n          handleStopSmartSelector(message, sendResponse);\n          break;\n\n        case 'smart_find_images':\n          handleSmartFindImages(message, sendResponse);\n          break;\n\n        case 'start_interactive_selection':\n          handleStartInteractiveSelection(message, sendResponse);\n          break;\n\n        case 'start_observer':\n          handleStartObserver(message, sendResponse);\n          break;\n\n        case 'stop_observer':\n          handleStopObserver(message, sendResponse);\n          break;\n\n        case 'get_status':\n          sendResponse(getExtensionStatus());\n          break;\n\n        case 'get_metrics':\n          sendResponse(getExtensionMetrics());\n          break;\n\n        default:\n          console.warn('\u26A0\uFE0F Unknown message action:', message.action);\n          sendResponse({ error: `Unknown action: ${message.action}` });\n      }\n    } catch (error) {\n      console.error('\u274C Message handler error:', error);\n      sendResponse({ error: error.message });\n    }\n\n    return true; // Keep message channel open for async responses\n  }\n\n  // Handle scrape images request\n  async function handleScrapeImages(message, sendResponse) {\n    try {\n      const options = message.options || {};\n      const selector = message.selector || null;\n\n      const result = await window.runScrape(selector, options);\n      sendResponse(result);\n    } catch (error) {\n      sendResponse({ success: false, error: error.message, items: [] });\n    }\n  }\n\n  // Handle find gallery request\n  async function handleFindGallery(message, sendResponse) {\n    try {\n      if (!ExtensionState.selector) {\n        throw new Error('Selector system not initialized');\n      }\n\n      const result = await ExtensionState.selector.findGalleryImages(message.options || {});\n      sendResponse({ success: true, ...result });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message, images: [] });\n    }\n  }\n\n  // Handle smart selector requests\n  async function handleStartSmartSelector(message, sendResponse) {\n    try {\n      // Ensure selector is ready\n      await ExtensionState.selectorReady;\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Smart selector system not initialized');\n      }\n\n      if (ExtensionState.selector.startInteractiveSelection) {\n        const result = ExtensionState.selector.startInteractiveSelection();\n        sendResponse({ success: true, result, enhanced: true });\n      } else {\n        // Fallback to basic element picker\n        const result = ExtensionState.picker?.startPicking();\n        sendResponse({ success: !!result, fallback: true, enhanced: false });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handleStopSmartSelector(message, sendResponse) {\n    try {\n      if (ExtensionState.selector && ExtensionState.selector.stopSelection) {\n        ExtensionState.selector.stopSelection();\n      }\n      if (ExtensionState.picker) {\n        ExtensionState.picker.stop();\n      }\n      sendResponse({ success: true });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handleSmartFindImages(message, sendResponse) {\n    try {\n      // Ensure selector is ready\n      await ExtensionState.selectorReady;\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Smart selector system not initialized');\n      }\n\n      let result;\n      if (ExtensionState.selector.findImages) {\n        // Use enhanced smart selector\n        result = await ExtensionState.selector.findImages(message.options || {});\n      } else {\n        // Fallback to basic gallery finder\n        result = await ExtensionState.selector.findGalleryImages(message.options || {});\n      }\n      \n      sendResponse({ success: true, enhanced: !!ExtensionState.selector.findImages, ...result });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message, images: [] });\n    }\n  }\n\n  async function handleStartInteractiveSelection(message, sendResponse) {\n    try {\n      // Ensure selector is ready\n      await ExtensionState.selectorReady;\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Selector system not initialized');\n      }\n\n      if (ExtensionState.selector.startInteractiveSelection) {\n        ExtensionState.selector.startInteractiveSelection();\n        sendResponse({ success: true, enhanced: true });\n      } else {\n        // Fallback to basic picker\n        const result = ExtensionState.picker?.startPicking();\n        sendResponse({ success: !!result, enhanced: false });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle start element picker request\n  function handleStartElementPicker(message, sendResponse) {\n    try {\n      if (!ExtensionState.picker) {\n        throw new Error('Element picker not initialized');\n      }\n\n      const success = ExtensionState.picker.startPicking();\n      sendResponse({ success });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle stop element picker request\n  function handleStopElementPicker(message, sendResponse) {\n    try {\n      if (!ExtensionState.picker) {\n        throw new Error('Element picker not initialized');\n      }\n\n      const success = ExtensionState.picker.stop();\n      sendResponse({ success });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // =============================================================================\n  // MISSING SMART SELECTOR HANDLERS - Complete Smart Selector workflow\n  // =============================================================================\n\n  async function handleTriggerAutoExpand(message, sendResponse) {\n    try {\n      console.log('\uD83D\uDE80 Triggering Smart Selector auto-expand:', message);\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Smart selector system not initialized');\n      }\n\n      const candidates = message.candidates || [];\n      const options = message.options || {};\n      \n      // Use Enhanced Smart Selector System for auto-expand if available\n      if (ExtensionState.selector.autoExpandSelection) {\n        const result = await ExtensionState.selector.autoExpandSelection(candidates, options);\n        sendResponse({ \n          success: true, \n          expandedElements: result.expandedElements || [],\n          totalExpanded: result.totalExpanded || 0,\n          confidence: result.confidence,\n          processingTime: result.processingTime\n        });\n      } else {\n        console.warn('Auto-expand not available, using fallback');\n        sendResponse({ \n          success: false, \n          error: 'Auto-expand functionality not available',\n          fallback: true\n        });\n      }\n    } catch (error) {\n      console.error('\u274C Auto-expand failed:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handleRemoveLastSample(message, sendResponse) {\n    try {\n      console.log('\uD83D\uDDD1\uFE0F Removing last Smart Selector sample');\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Smart selector system not initialized');\n      }\n\n      // Check if selector has sample management methods\n      if (ExtensionState.selector.removeLastSample) {\n        const result = ExtensionState.selector.removeLastSample();\n        sendResponse({ \n          success: true, \n          remainingSamples: result.remainingSamples || 0,\n          updatedStats: result.stats || {},\n          message: 'Last sample removed successfully'\n        });\n      } else if (ExtensionState.selector.selectedSamples) {\n        // Manual removal if direct method not available\n        const samples = ExtensionState.selector.selectedSamples;\n        if (samples.length > 0) {\n          samples.pop();\n          sendResponse({ \n            success: true, \n            remainingSamples: samples.length,\n            message: 'Last sample removed'\n          });\n        } else {\n          sendResponse({ success: false, error: 'No samples to remove' });\n        }\n      } else {\n        throw new Error('Sample management not available in current selector');\n      }\n    } catch (error) {\n      console.error('\u274C Remove last sample failed:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handleClearSmartSelection(message, sendResponse) {\n    try {\n      console.log('\uD83E\uDDF9 Clearing all Smart Selector data');\n      \n      if (!ExtensionState.selector) {\n        throw new Error('Smart selector system not initialized');\n      }\n\n      let clearedCount = 0;\n      let resetStats = {};\n      \n      // Clear selection data if available\n      if (ExtensionState.selector.clearSelection) {\n        const result = ExtensionState.selector.clearSelection();\n        clearedCount = result.clearedCount || 0;\n        resetStats = result.stats || {};\n      } else if (ExtensionState.selector.selectedSamples) {\n        // Manual clearing if direct method not available\n        clearedCount = ExtensionState.selector.selectedSamples.length;\n        ExtensionState.selector.selectedSamples = [];\n        \n        // Clear other selection state if available\n        if (ExtensionState.selector.confidenceStats) {\n          ExtensionState.selector.confidenceStats = { high: 0, medium: 0, low: 0 };\n        }\n        if (ExtensionState.selector.patternData) {\n          ExtensionState.selector.patternData = {};\n        }\n      }\n      \n      sendResponse({ \n        success: true, \n        clearedCount,\n        resetStats,\n        message: `Cleared ${clearedCount} selections and reset Smart Selector state`\n      });\n    } catch (error) {\n      console.error('\u274C Clear smart selection failed:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handleSmartSelectorUpdate(message, sendResponse) {\n    try {\n      console.log('\uD83D\uDD04 Processing Smart Selector update:', message);\n      \n      const updateData = {\n        timestamp: Date.now(),\n        selectionCount: message.selectionCount || 0,\n        confidenceStats: message.confidenceStats || {},\n        patternData: message.patternData || {},\n        ...message.updateData\n      };\n      \n      // Store update data if selector system available\n      if (ExtensionState.selector && ExtensionState.selector.updateProgress) {\n        ExtensionState.selector.updateProgress(updateData);\n      }\n      \n      // Send update to dashboard/popup if needed\n      if (message.forwardToDashboard) {\n        try {\n          chrome.runtime.sendMessage({\n            action: 'smart_selector_progress_update',\n            data: updateData,\n            source: 'content'\n          });\n        } catch (error) {\n          console.warn('Could not forward update to dashboard:', error);\n        }\n      }\n      \n      sendResponse({ \n        success: true, \n        message: 'Update processed',\n        updateData\n      });\n    } catch (error) {\n      console.error('\u274C Smart selector update failed:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  async function handlePatternAnalysisComplete(message, sendResponse) {\n    try {\n      console.log('\uD83E\uDDE0 Processing pattern analysis completion:', message);\n      \n      const analysisData = {\n        timestamp: Date.now(),\n        patterns: message.patterns || [],\n        confidenceScores: message.confidenceScores || {},\n        urlPatterns: message.urlPatterns || [],\n        autoExpandCandidates: message.autoExpandCandidates || [],\n        totalElements: message.totalElements || 0,\n        highConfidenceCount: message.highConfidenceCount || 0,\n        processingTime: message.processingTime || 0,\n        ...message.analysisData\n      };\n      \n      // If auto-expand is enabled and we have high-confidence candidates\n      if (message.enableAutoExpand && analysisData.autoExpandCandidates.length > 0) {\n        console.log('\uD83D\uDE80 Triggering auto-expand based on pattern analysis');\n        \n        if (ExtensionState.selector && ExtensionState.selector.autoExpandSelection) {\n          try {\n            const autoExpandResult = await ExtensionState.selector.autoExpandSelection(\n              analysisData.autoExpandCandidates,\n              message.autoExpandOptions || {}\n            );\n            analysisData.autoExpandResults = autoExpandResult;\n          } catch (error) {\n            console.warn('Auto-expand failed:', error);\n            analysisData.autoExpandError = error.message;\n          }\n        } else {\n          analysisData.autoExpandError = 'Auto-expand not available';\n        }\n      }\n      \n      sendResponse({ \n        success: true, \n        message: 'Pattern analysis complete',\n        analysisData\n      });\n    } catch (error) {\n      console.error('\u274C Pattern analysis completion failed:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle start observer request\n  function handleStartObserver(message, sendResponse) {\n    try {\n      if (!ExtensionState.observer) {\n        throw new Error('Observer not initialized');\n      }\n\n      const callback = (data) => {\n        if (typeof chrome !== 'undefined' && chrome.runtime) {\n          chrome.runtime.sendMessage({\n            action: 'content_changed',\n            data: data\n          });\n        }\n      };\n\n      const success = ExtensionState.observer.start(callback);\n      sendResponse({ success });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle stop observer request\n  function handleStopObserver(message, sendResponse) {\n    try {\n      if (!ExtensionState.observer) {\n        throw new Error('Observer not initialized');\n      }\n\n      const success = ExtensionState.observer.stop();\n      sendResponse({ success });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n// =============================================================================\n// CONTENT ORCHESTRATOR SYSTEM - Controls frame scanning, deduplication, and throttling\n// =============================================================================\n\n/**\n * Content Orchestrator System\n * Manages detector execution sequence, frame gating, deduplication, and throttling\n * Prevents race conditions and duplicate scanning across content scripts\n */\nclass ContentOrchestrator {\n  constructor(options = {}) {\n    this.options = {\n      // Frame gating settings\n      enableFrameGating: options.enableFrameGating !== false,\n      topFrameOnly: options.topFrameOnly !== false, // Default to top-level only\n      allowedIframeHosts: options.allowedIframeHosts || [],\n      maxIframeDepth: options.maxIframeDepth || 2,\n      \n      // Deduplication settings\n      enableDeduplication: options.enableDeduplication !== false,\n      cacheTimeout: options.cacheTimeout || 300000, // 5 minutes\n      maxCacheSize: options.maxCacheSize || 10000,\n      \n      // Throttling settings\n      enableThrottling: options.enableThrottling !== false,\n      maxConcurrentDetectors: options.maxConcurrentDetectors || 3,\n      detectorTimeout: options.detectorTimeout || 30000, // 30 seconds\n      minDetectorInterval: options.minDetectorInterval || 1000, // 1 second between detectors\n      cpuUsageThreshold: options.cpuUsageThreshold || 80, // Max 80% CPU usage\n      \n      // Coordination settings\n      enableDetectorSequencing: options.enableDetectorSequencing !== false,\n      enableMetricsTracking: options.enableMetricsTracking !== false,\n      \n      ...options\n    };\n\n    // Frame gating state\n    this.currentFrameInfo = this.analyzeCurrentFrame();\n    this.shouldScanFrame = this.determineScanEligibility();\n    \n    // Use memory-safe bounded data structures\n    const global = typeof globalThis !== 'undefined' ? globalThis : window;\n    const LRUCache = global.__ST?.LRUCache || Map;\n    const BoundedArray = global.__ST?.BoundedArray || Array;\n\n    // Deduplication system with bounded caches\n    this.documentCache = new LRUCache(Math.min(this.options.maxCacheSize || 1000, 2000));\n    this.globalCache = new LRUCache(Math.min(this.options.maxCacheSize || 1000, 2000));\n    this.seenItems = new LRUCache(5000); // Use LRUCache instead of unbounded Set\n    \n    // Throttling system with bounded structures\n    this.activeDetectors = new LRUCache(50);\n    this.detectorQueue = BoundedArray === Array ? [] : new BoundedArray(100);\n    this.lastDetectorExecution = 0;\n    this.cpuMonitor = new CPUMonitor();\n    \n    // Detector coordination with bounded structures  \n    this.registeredDetectors = new LRUCache(100);\n    this.detectorMetrics = new LRUCache(200);\n    this.executionHistory = BoundedArray === Array ? [] : new BoundedArray(500);\n    \n    // Performance tracking\n    this.metrics = {\n      framesScanned: 0,\n      detectorsExecuted: 0,\n      itemsDeduped: 0,\n      throttledRequests: 0,\n      averageDetectorTime: 0,\n      totalProcessingTime: 0\n    };\n\n    this.initialized = false;\n    this.documentId = this.generateDocumentId();\n    \n    console.log(`\uD83C\uDF9B\uFE0F Content Orchestrator initialized for ${this.currentFrameInfo.type} frame (scan: ${this.shouldScanFrame})`);\n    \n    // Initialize global orchestrator instance\n    this.setupGlobalInstance();\n  }\n\n  /**\n   * Analyze current frame context\n   */\n  analyzeCurrentFrame() {\n    const isTopFrame = window === window.top;\n    const isIframe = !isTopFrame;\n    \n    let frameDepth = 0;\n    let currentWin = window;\n    while (currentWin !== window.top && frameDepth < 10) {\n      frameDepth++;\n      try {\n        currentWin = currentWin.parent;\n      } catch (e) {\n        break; // Cross-origin frame\n      }\n    }\n\n    return {\n      isTopFrame,\n      isIframe,\n      frameDepth,\n      origin: window.location.origin,\n      hostname: window.location.hostname,\n      pathname: window.location.pathname,\n      type: isTopFrame ? 'top' : `iframe-depth-${frameDepth}`,\n      crossOrigin: this.isCrossOriginFrame()\n    };\n  }\n\n  /**\n   * Check if current frame is cross-origin\n   */\n  isCrossOriginFrame() {\n    try {\n      return window.location.hostname !== window.top.location.hostname;\n    } catch (e) {\n      return true; // Assume cross-origin if we can't access\n    }\n  }\n\n  /**\n   * Determine if this frame should be scanned\n   */\n  determineScanEligibility() {\n    if (!this.options.enableFrameGating) {\n      return true; // Always scan if frame gating disabled\n    }\n\n    // Always scan top frame\n    if (this.currentFrameInfo.isTopFrame) {\n      return true;\n    }\n\n    // Skip iframe scanning if topFrameOnly is true\n    if (this.options.topFrameOnly) {\n      console.log(`\u23ED\uFE0F Skipping iframe scan (topFrameOnly mode): ${this.currentFrameInfo.hostname}`);\n      return false;\n    }\n\n    // Check iframe depth limit\n    if (this.currentFrameInfo.frameDepth > this.options.maxIframeDepth) {\n      console.log(`\u23ED\uFE0F Skipping iframe scan (depth ${this.currentFrameInfo.frameDepth} > ${this.options.maxIframeDepth})`);\n      return false;\n    }\n\n    // Check allowed iframe hosts\n    if (this.options.allowedIframeHosts.length > 0) {\n      const isAllowed = this.options.allowedIframeHosts.some(host => \n        this.currentFrameInfo.hostname.includes(host)\n      );\n      if (!isAllowed) {\n        console.log(`\u23ED\uFE0F Skipping iframe scan (host not in allowlist): ${this.currentFrameInfo.hostname}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Generate unique document identifier for caching\n   */\n  generateDocumentId() {\n    const url = window.location.href;\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${btoa(url).substr(0, 20)}_${timestamp}_${random}`;\n  }\n\n  /**\n   * Register a detector with the orchestrator\n   */\n  registerDetector(name, detectorInstance, options = {}) {\n    if (!this.shouldScanFrame) {\n      console.log(`\u23ED\uFE0F Detector registration skipped (frame not eligible): ${name}`);\n      return false;\n    }\n\n    const detectorConfig = {\n      name,\n      instance: detectorInstance,\n      priority: options.priority || 5, // Lower number = higher priority\n      timeout: options.timeout || this.options.detectorTimeout,\n      maxRetries: options.maxRetries || 2,\n      dependencies: options.dependencies || [],\n      registered: Date.now(),\n      ...options\n    };\n\n    this.registeredDetectors.set(name, detectorConfig);\n    console.log(`\u2705 Detector registered: ${name} (priority: ${detectorConfig.priority})`);\n    \n    return true;\n  }\n\n  /**\n   * Execute detectors in sequence with throttling\n   */\n  async executeDetectors(context = {}) {\n    if (!this.shouldScanFrame) {\n      console.log('\u23ED\uFE0F Detector execution skipped (frame not eligible)');\n      return { success: false, reason: 'frame_not_eligible', results: [] };\n    }\n\n    console.log(`\uD83D\uDE80 Starting detector execution (${this.registeredDetectors.size} detectors)`);\n    const startTime = performance.now();\n    \n    try {\n      // Sort detectors by priority\n      const sortedDetectors = Array.from(this.registeredDetectors.values())\n        .sort((a, b) => a.priority - b.priority);\n\n      const results = [];\n      let successCount = 0;\n      let errorCount = 0;\n\n      for (const detector of sortedDetectors) {\n        // Check throttling before each detector\n        if (this.options.enableThrottling && !await this.canExecuteDetector(detector)) {\n          console.log(`\u23F8\uFE0F Detector throttled: ${detector.name}`);\n          this.metrics.throttledRequests++;\n          continue;\n        }\n\n        try {\n          const detectorResult = await this.executeDetector(detector, context);\n          \n          if (detectorResult.success) {\n            results.push(detectorResult);\n            successCount++;\n          } else {\n            errorCount++;\n          }\n          \n        } catch (error) {\n          console.error(`\u274C Detector execution failed: ${detector.name}`, error);\n          errorCount++;\n        }\n\n        // Respect minimum interval between detectors\n        if (this.options.minDetectorInterval > 0) {\n          await this.sleep(this.options.minDetectorInterval);\n        }\n      }\n\n      const totalTime = performance.now() - startTime;\n      this.metrics.totalProcessingTime += totalTime;\n      this.metrics.detectorsExecuted += successCount;\n\n      console.log(`\u2705 Detector execution completed: ${successCount} success, ${errorCount} errors (${totalTime.toFixed(2)}ms)`);\n      \n      return {\n        success: true,\n        results,\n        metrics: {\n          totalDetectors: sortedDetectors.length,\n          successCount,\n          errorCount,\n          totalTime,\n          frameInfo: this.currentFrameInfo\n        }\n      };\n\n    } catch (error) {\n      console.error('\u274C Detector execution pipeline failed:', error);\n      return { success: false, error: error.message, results: [] };\n    }\n  }\n\n  /**\n   * Execute a single detector with error handling and metrics\n   */\n  async executeDetector(detector, context) {\n    const startTime = performance.now();\n    \n    try {\n      console.log(`\uD83D\uDD0D Executing detector: ${detector.name}`);\n      \n      // Track active detector\n      this.activeDetectors.set(detector.name, { startTime, status: 'running' });\n      \n      // Execute detector with timeout\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Detector timeout')), detector.timeout)\n      );\n      \n      const detectorPromise = this.invokeDetector(detector, context);\n      const result = await Promise.race([detectorPromise, timeoutPromise]);\n      \n      // Process results through deduplication\n      const dedupedResult = this.options.enableDeduplication ? \n        this.deduplicateResults(result, detector.name) : result;\n      \n      const executionTime = performance.now() - startTime;\n      \n      // Update metrics\n      this.updateDetectorMetrics(detector.name, {\n        executionTime,\n        itemsFound: dedupedResult?.items?.length || 0,\n        success: true\n      });\n      \n      console.log(`\u2705 Detector completed: ${detector.name} (${executionTime.toFixed(2)}ms, ${dedupedResult?.items?.length || 0} items)`);\n      \n      return {\n        success: true,\n        detector: detector.name,\n        result: dedupedResult,\n        executionTime,\n        frameInfo: this.currentFrameInfo\n      };\n      \n    } catch (error) {\n      const executionTime = performance.now() - startTime;\n      \n      this.updateDetectorMetrics(detector.name, {\n        executionTime,\n        error: error.message,\n        success: false\n      });\n      \n      console.error(`\u274C Detector failed: ${detector.name} (${executionTime.toFixed(2)}ms)`, error);\n      \n      return {\n        success: false,\n        detector: detector.name,\n        error: error.message,\n        executionTime\n      };\n      \n    } finally {\n      this.activeDetectors.delete(detector.name);\n      this.lastDetectorExecution = Date.now();\n    }\n  }\n\n  /**\n   * Invoke detector method with proper context\n   */\n  async invokeDetector(detector, context) {\n    const { instance } = detector;\n    \n    // Try different method names that detectors might use\n    const methodNames = [\n      'collectImages',\n      'detectImages', \n      'scanImages',\n      'findImages',\n      'execute',\n      'run'\n    ];\n    \n    for (const methodName of methodNames) {\n      if (typeof instance[methodName] === 'function') {\n        return await instance[methodName](context);\n      }\n    }\n    \n    // Fallback: if instance is a function, call it directly\n    if (typeof instance === 'function') {\n      return await instance(context);\n    }\n    \n    throw new Error(`No executable method found on detector: ${detector.name}`);\n  }\n\n  /**\n   * Deduplicate results using cache system\n   */\n  deduplicateResults(result, detectorName) {\n    if (!result || !result.items || !Array.isArray(result.items)) {\n      return result;\n    }\n\n    const dedupedItems = [];\n    let duplicateCount = 0;\n\n    for (const item of result.items) {\n      const itemKey = this.generateItemKey(item);\n      \n      if (!this.isItemDuplicate(itemKey)) {\n        dedupedItems.push(item);\n        this.markItemAsSeen(itemKey, detectorName);\n      } else {\n        duplicateCount++;\n      }\n    }\n\n    if (duplicateCount > 0) {\n      console.log(`\uD83D\uDD04 Deduplication: ${duplicateCount} duplicates removed from ${detectorName}`);\n      this.metrics.itemsDeduped += duplicateCount;\n    }\n\n    return {\n      ...result,\n      items: dedupedItems,\n      deduplication: {\n        originalCount: result.items.length,\n        dedupedCount: dedupedItems.length,\n        duplicatesRemoved: duplicateCount\n      }\n    };\n  }\n\n  /**\n   * Generate cache key for an item\n   */\n  generateItemKey(item) {\n    // Use URL as primary key, fallback to other properties\n    const url = item.url || item.src || item.href;\n    if (url) {\n      return `url:${this.normalizeUrl(url)}`;\n    }\n    \n    // Fallback to element-based key\n    if (item.element) {\n      const selector = this.getElementSelector(item.element);\n      return `element:${selector}`;\n    }\n    \n    // Last resort: use item hash\n    return `hash:${this.hashObject(item)}`;\n  }\n\n  /**\n   * Check if item is duplicate\n   */\n  isItemDuplicate(itemKey) {\n    return this.seenItems.has(itemKey) || \n           this.documentCache.has(itemKey) || \n           this.globalCache.has(itemKey);\n  }\n\n  /**\n   * Mark item as seen\n   */\n  markItemAsSeen(itemKey, detectorName) {\n    const timestamp = Date.now();\n    \n    this.seenItems.add(itemKey);\n    this.documentCache.set(itemKey, { detector: detectorName, timestamp });\n    \n    // Manage cache size\n    if (this.documentCache.size > this.options.maxCacheSize) {\n      this.cleanupCache();\n    }\n  }\n\n  /**\n   * Clean up old cache entries\n   */\n  cleanupCache() {\n    const now = Date.now();\n    const expiredKeys = [];\n    \n    for (const [key, data] of this.documentCache.entries()) {\n      if (now - data.timestamp > this.options.cacheTimeout) {\n        expiredKeys.push(key);\n      }\n    }\n    \n    expiredKeys.forEach(key => {\n      this.documentCache.delete(key);\n      this.seenItems.delete(key);\n    });\n    \n    console.log(`\uD83E\uDDF9 Cache cleanup: removed ${expiredKeys.length} expired entries`);\n  }\n\n  /**\n   * Check if detector can execute (throttling)\n   */\n  async canExecuteDetector(detector) {\n    // Check active detector limit\n    if (this.activeDetectors.size >= this.options.maxConcurrentDetectors) {\n      return false;\n    }\n    \n    // Check minimum interval\n    const timeSinceLastExecution = Date.now() - this.lastDetectorExecution;\n    if (timeSinceLastExecution < this.options.minDetectorInterval) {\n      return false;\n    }\n    \n    // Check CPU usage if monitoring is available\n    if (this.cpuMonitor.isAvailable()) {\n      const cpuUsage = await this.cpuMonitor.getCurrentUsage();\n      if (cpuUsage > this.options.cpuUsageThreshold) {\n        console.log(`\u23F8\uFE0F High CPU usage detected: ${cpuUsage}%`);\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Update detector metrics\n   */\n  updateDetectorMetrics(detectorName, metrics) {\n    const existing = this.detectorMetrics.get(detectorName) || {\n      executions: 0,\n      totalTime: 0,\n      totalItems: 0,\n      errors: 0,\n      successes: 0\n    };\n    \n    existing.executions++;\n    existing.totalTime += metrics.executionTime || 0;\n    existing.totalItems += metrics.itemsFound || 0;\n    \n    if (metrics.success) {\n      existing.successes++;\n    } else {\n      existing.errors++;\n      existing.lastError = metrics.error;\n    }\n    \n    existing.averageTime = existing.totalTime / existing.executions;\n    existing.lastExecution = Date.now();\n    \n    this.detectorMetrics.set(detectorName, existing);\n  }\n\n  /**\n   * Get orchestrator metrics\n   */\n  getMetrics() {\n    return {\n      orchestrator: this.metrics,\n      detectors: Object.fromEntries(this.detectorMetrics),\n      frame: this.currentFrameInfo,\n      cache: {\n        documentCacheSize: this.documentCache.size,\n        globalCacheSize: this.globalCache.size,\n        seenItemsSize: this.seenItems.size\n      },\n      active: {\n        detectorsRunning: this.activeDetectors.size,\n        detectorQueue: this.detectorQueue.length\n      }\n    };\n  }\n\n  /**\n   * Setup global instance\n   */\n  setupGlobalInstance() {\n    // Create global namespace if it doesn't exist\n    if (typeof window !== 'undefined') {\n      if (!window.__ST) {\n        window.__ST = {};\n      }\n      \n      // Store orchestrator instance\n      window.__ST.ContentOrchestrator = this;\n      window.ContentOrchestrator = this; // Backward compatibility\n      \n      console.log('\u2705 Content Orchestrator available globally');\n    }\n  }\n\n  // Utility methods\n  normalizeUrl(url) { return window.RobustHelpers?.normalizeUrl(url) || url; }\n  getElementSelector(element) { return window.StepTwoSelectorUtils?.getElementCSSPath(element) || 'unknown'; }\n  hashObject(obj) { return btoa(JSON.stringify(obj)).substr(0, 16); }\n  sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }\n}\n\n/**\n * Simple CPU Monitor for throttling decisions\n */\nclass CPUMonitor {\n  constructor() {\n    this.available = 'performance' in window && 'measureUserAgentSpecificMemory' in performance;\n    this.lastMeasurement = 0;\n    this.measurementInterval = 1000; // 1 second\n  }\n\n  isAvailable() {\n    return this.available;\n  }\n\n  async getCurrentUsage() {\n    if (!this.available) {\n      return 0; // Assume low CPU if can't measure\n    }\n\n    const now = Date.now();\n    if (now - this.lastMeasurement < this.measurementInterval) {\n      return this.lastCpuUsage || 0;\n    }\n\n    try {\n      // Simplified CPU usage estimation based on timing\n      const start = performance.now();\n      \n      // Do a small amount of work to measure responsiveness\n      let count = 0;\n      const endTime = start + 10; // 10ms test\n      while (performance.now() < endTime) {\n        count++;\n      }\n      \n      const actualTime = performance.now() - start;\n      \n      // Estimate CPU usage based on how long the work took\n      // If it took significantly longer than 10ms, CPU is likely busy\n      const cpuEstimate = Math.min(100, Math.max(0, (actualTime - 10) * 5));\n      \n      this.lastCpuUsage = cpuEstimate;\n      this.lastMeasurement = now;\n      \n      return cpuEstimate;\n    } catch (error) {\n      return 0;\n    }\n  }\n}\n\n// Initialize global Content Orchestrator instance with coordination\nif (typeof window !== 'undefined' && !window.__ST?.ContentOrchestratorLoaded) {\n  // Mark as loaded to prevent duplicate initialization\n  if (!window.__ST) window.__ST = {};\n  window.__ST.ContentOrchestratorLoaded = true;\n\n  // BUGFIX: Add shared detection system registry to prevent duplicates\n  window.__ST.detectionSystems = {\n    smartPatternRecognition: null,\n    dynamicContentObserver: null,\n    advancedExtractor: null,\n    initialized: new Set()\n  };\n\n  // Create orchestrator with frame-appropriate settings\n  const orchestratorOptions = {\n    enableFrameGating: true,\n    topFrameOnly: true, // Default to top-level only to reduce duplicates\n    enableDeduplication: true,\n    enableThrottling: true,\n    enableDetectorSequencing: true,\n    enableMetricsTracking: true,\n    maxConcurrentDetectors: 2,\n    minDetectorInterval: 500\n  };\n\n  window.__ST.orchestrator = new ContentOrchestrator(orchestratorOptions);\n  \n  console.log('\u2705 Content Orchestrator System initialized with coordination registry');\n  \n  // BUGFIX: Initialize shared detection systems\n  window.__ST.initializeSharedDetectionSystems = function() {\n    console.log('\uD83D\uDD04 [COORD] Initializing shared detection systems...');\n    \n    // Initialize SmartPatternRecognition once globally\n    if (!window.__ST.detectionSystems.smartPatternRecognition && typeof SmartPatternRecognition !== 'undefined') {\n      try {\n        window.__ST.detectionSystems.smartPatternRecognition = new SmartPatternRecognition({\n          enableAdvancedPatterns: true,\n          enableUrlValidation: true,\n          coordinated: true\n        });\n        console.log('\u2705 [COORD] Shared SmartPatternRecognition initialized');\n      } catch (error) {\n        console.error('\u274C [COORD] Failed to initialize SmartPatternRecognition:', error);\n      }\n    }\n    \n    // Initialize DynamicContentObserver and register with orchestrator\n    if (!window.__ST.detectionSystems.dynamicContentObserver && typeof DynamicContentObserver !== 'undefined') {\n      try {\n        window.__ST.detectionSystems.dynamicContentObserver = new DynamicContentObserver({\n          throttleDelay: 1000,\n          coordinated: true\n        });\n        \n        // Register with orchestrator\n        const observerRegistered = window.__ST.orchestrator.registerDetector('dynamic-content-observer', {\n          name: 'dynamic-content-observer',\n          execute: async (context) => {\n            return window.__ST.detectionSystems.dynamicContentObserver.analyzeChanges();\n          },\n          cleanup: () => {\n            window.__ST.detectionSystems.dynamicContentObserver.stop();\n          }\n        }, {\n          priority: 1, // High priority - runs first\n          timeout: 15000,\n          maxRetries: 1\n        });\n        \n        if (observerRegistered) {\n          console.log('\u2705 [COORD] DynamicContentObserver registered with orchestrator');\n        }\n      } catch (error) {\n        console.error('\u274C [COORD] Failed to initialize DynamicContentObserver:', error);\n      }\n    }\n  };\n  \n  // Helper function to get shared detection system\n  window.__ST.getSharedDetectionSystem = function(systemName) {\n    return window.__ST.detectionSystems[systemName] || null;\n  };\n  \n  // Helper function to prevent duplicate initialization\n  window.__ST.markSystemInitialized = function(systemName) {\n    window.__ST.detectionSystems.initialized.add(systemName);\n    console.log(`\uD83C\uDFF7\uFE0F [COORD] System marked as initialized: ${systemName}`);\n  };\n  \n  window.__ST.isSystemInitialized = function(systemName) {\n    return window.__ST.detectionSystems.initialized.has(systemName);\n  };\n}\n\n  // Get extension status\n  function getExtensionStatus() {\n    return {\n      initialized: ExtensionState.initialized,\n      lastActivity: ExtensionState.lastActivity,\n      observerActive: ExtensionState.observer?.isActive || false,\n      pickerActive: ExtensionState.picker?.isActive || false,\n      config: ExtensionState.config,\n      url: window.location.href,\n      timestamp: Date.now()\n    };\n  }\n\n  // Get extension metrics\n  function getExtensionMetrics() {\n    const metrics = {\n      scraper: ExtensionState.scraper?.getMetricsReport() || {},\n      observer: ExtensionState.observer?.getMetrics() || {},\n      timestamp: Date.now()\n    };\n\n    return metrics;\n  }\n\n  // DISABLED: Legacy message listener to prevent duplicate listeners causing race conditions\n  // The enhanced message listener (setupEnhancedMessageListener) handles all messages now\n  // if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.onMessage) {\n  //   chrome.runtime.onMessage.addListener(handleExtensionMessage);\n  //   console.log('\u2705 Message listener registered');\n  // }\n  console.log('\u26A0\uFE0F Legacy message listener disabled - using enhanced listener only');\n\n  // Auto-initialize if configured\n  if (ExtensionState.config.autoInitialize) {\n    // Delay initialization to ensure DOM is ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        setTimeout(() => initializeExtension().catch(console.error), 100);\n      });\n    } else {\n      setTimeout(() => initializeExtension().catch(console.error), 100);\n    }\n  }\n\n  // Cleanup on page unload\n  window.addEventListener('beforeunload', () => {\n    if (ExtensionState.observer) {\n      ExtensionState.observer.stop();\n    }\n    if (ExtensionState.picker) {\n      ExtensionState.picker.stop();\n    }\n  });\n\n  console.log('\u2705 STEPTWO Content Bundle loaded and ready!');\n\n  // Export global API for external access\n  window.StepTwo = {\n    initialize: initializeExtension,\n    scrape: window.runScrape,\n    findGallery: (options) => ExtensionState.selector?.findGalleryImages(options),\n    startPicker: () => ExtensionState.picker?.startPicking(),\n    stopPicker: () => ExtensionState.picker?.stop(),\n    startObserver: (callback) => ExtensionState.observer?.start(callback),\n    stopObserver: () => ExtensionState.observer?.stop(),\n    getStatus: getExtensionStatus,\n    getMetrics: getExtensionMetrics\n  };\n\n} else {\n  console.log('\u2705 STEPTWO Content Bundle already loaded');\n}\n\n// =============================================================================\n// SMART PATTERN RECOGNITION SYSTEM - Merged from smart-pattern-recognition.js\n// =============================================================================\n\n/**\n * Smart Pattern Recognition System\n * Provides intelligent image analysis, URL validation, and confidence scoring\n */\nclass SmartPatternRecognition {\n  constructor(options = {}) {\n    this.options = {\n      // Pattern recognition settings\n      enableAdvancedPatterns: options.enableAdvancedPatterns !== false,\n      enableUrlValidation: options.enableUrlValidation !== false,\n      enableContentValidation: options.enableContentValidation !== false,\n      enableDomainReputation: options.enableDomainReputation !== false,\n      enableContextAnalysis: options.enableContextAnalysis !== false,\n      \n      // Quality thresholds\n      minConfidenceScore: options.minConfidenceScore || 0.3,\n      highConfidenceThreshold: options.highConfidenceThreshold || 0.75,\n      minImageWidth: options.minImageWidth || 30, // More lenient for gallery images\n      minImageHeight: options.minImageHeight || 30, // More lenient for gallery images\n      minFileSize: options.minFileSize || 1024, // 1KB\n      maxAspectRatio: options.maxAspectRatio || 10,\n      \n      // Performance settings\n      maxCacheSize: options.maxCacheSize || 1000,\n      cacheTimeout: options.cacheTimeout || 300000, // 5 minutes\n      maxAnalysisTime: options.maxAnalysisTime || 5000, // 5 seconds\n      \n      ...options\n    };\n\n    // Caching system for pattern analysis results\n    this.patternCache = new Map();\n    this.domainReputationCache = new Map();\n    this.urlValidationCache = new Map();\n    this.contentValidationCache = new Map();\n\n    // Pattern libraries\n    this.galleryPatterns = this.buildGalleryPatterns();\n    this.excludePatterns = this.buildExcludePatterns();\n    this.dimensionPatterns = this.buildDimensionPatterns();\n    this.knownGalleryDomains = this.buildKnownDomains();\n    this.knownCdnDomains = this.buildCdnDomains();\n\n    // Quality assessment weights\n    this.scoringWeights = {\n      urlPattern: 0.25,\n      domainReputation: 0.20,\n      dimensionInfo: 0.15,\n      fileExtension: 0.10,\n      contextualClues: 0.15,\n      contentValidation: 0.15\n    };\n\n    // Initialize performance tracking\n    this.metrics = {\n      patternsProcessed: 0,\n      urlsValidated: 0,\n      contentValidated: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      averageProcessingTime: 0,\n      confidenceDistribution: { high: 0, medium: 0, low: 0 }\n    };\n\n    this.initialized = true;\n    console.log('\u2705 Smart Pattern Recognition System initialized');\n  }\n\n  // Build pattern libraries\n  buildGalleryPatterns() {\n    return {\n      positive: [\n        { test: url => /\\/gallery\\/|\\/galleries\\/|\\/photos\\/|\\/images\\//i.test(url), name: 'gallery-path', weight: 0.8 },\n        { test: url => /\\/media\\/|\\/assets\\/|\\/uploads\\//i.test(url), name: 'media-path', weight: 0.7 },\n        { test: url => /\\d{3,}x\\d{3,}|_\\d{3,}x\\d{3,}/i.test(url), name: 'dimensions', weight: 0.9 }\n      ],\n      thumbnails: [\n        { test: url => /thumb|thumbnail|preview|small/i.test(url), name: 'thumbnail', weight: 0.6 }\n      ],\n      highRes: [\n        { test: url => /original|full|large|hd|high/i.test(url), name: 'high-res', weight: 0.9 }\n      ]\n    };\n  }\n\n  buildExcludePatterns() {\n    return [\n      { test: url => /icon|favicon|logo|emoji|avatar|profile/i.test(url), name: 'ui-elements' },\n      { test: url => /loading|spinner|placeholder|blank/i.test(url), name: 'placeholders' }\n    ];\n  }\n\n  buildDimensionPatterns() {\n    return [\n      { regex: /(\\d{3,})x(\\d{3,})/i, widthGroup: 1, heightGroup: 2 },\n      { regex: /_(\\d{3,})x(\\d{3,})/i, widthGroup: 1, heightGroup: 2 }\n    ];\n  }\n\n  buildKnownDomains() {\n    return new Set([\n      'imgur.com', 'flickr.com', 'instagram.com', 'pinterest.com',\n      'unsplash.com', 'pixabay.com', 'pexels.com', 'artstation.com'\n    ]);\n  }\n\n  buildCdnDomains() {\n    return new Set([\n      'cloudinary.com', 'amazonaws.com', 'googleusercontent.com',\n      'fbcdn.net', 'cdninstagram.com', 'pinimg.com'\n    ]);\n  }\n\n  async validateUrl(url, context = {}) {\n    if (!this.options.enableUrlValidation) {\n      return { isValid: true, confidence: 0.5, reasons: ['validation-disabled'] };\n    }\n\n    const cacheKey = `url_${url}`;\n    if (this.urlValidationCache.has(cacheKey)) {\n      this.metrics.cacheHits++;\n      return this.urlValidationCache.get(cacheKey);\n    }\n\n    const startTime = performance.now();\n    let confidence = 0;\n    const reasons = [];\n\n    try {\n      const urlObj = new URL(url);\n      \n      // Gallery pattern analysis\n      const galleryScore = this.analyzeGalleryPatterns(url, urlObj);\n      confidence += galleryScore.score * this.scoringWeights.urlPattern;\n      reasons.push(...galleryScore.reasons);\n\n      // Domain reputation analysis\n      const domainScore = await this.analyzeDomainReputation(urlObj.hostname);\n      confidence += domainScore.score * this.scoringWeights.domainReputation;\n      reasons.push(...domainScore.reasons);\n\n      // File extension analysis\n      const extensionScore = this.analyzeFileExtension(url, urlObj);\n      confidence += extensionScore.score * this.scoringWeights.fileExtension;\n      reasons.push(...extensionScore.reasons);\n\n      // Normalize confidence score\n      confidence = Math.min(Math.max(confidence, 0), 1);\n\n      const result = {\n        isValid: confidence >= this.options.minConfidenceScore,\n        confidence,\n        reasons,\n        metadata: {\n          domain: urlObj.hostname,\n          path: urlObj.pathname,\n          processingTime: performance.now() - startTime\n        }\n      };\n\n      this.cacheResult(this.urlValidationCache, cacheKey, result);\n      this.metrics.urlsValidated++;\n      \n      return result;\n\n    } catch (error) {\n      console.warn('URL validation error:', error);\n      return {\n        isValid: false,\n        confidence: 0,\n        reasons: ['invalid-url'],\n        penalties: [error.message]\n      };\n    }\n  }\n\n  analyzeGalleryPatterns(url, urlObj) {\n    let score = 0;\n    const reasons = [];\n\n    for (const pattern of this.galleryPatterns.positive) {\n      if (pattern.test(url)) {\n        score += pattern.weight || 0.8;\n        reasons.push(`gallery-pattern-${pattern.name}`);\n      }\n    }\n\n    return { score: Math.min(score, 1), reasons };\n  }\n\n  async analyzeDomainReputation(hostname) {\n    const cacheKey = `domain_${hostname}`;\n    if (this.domainReputationCache.has(cacheKey)) {\n      this.metrics.cacheHits++;\n      return this.domainReputationCache.get(cacheKey);\n    }\n\n    let score = 0.5;\n    const reasons = [];\n\n    if (this.knownGalleryDomains.has(hostname)) {\n      score = 0.9;\n      reasons.push('known-gallery-domain');\n    } else if (this.knownCdnDomains.has(hostname)) {\n      score = 0.8;\n      reasons.push('known-cdn-domain');\n    }\n\n    const result = { score, reasons };\n    this.cacheResult(this.domainReputationCache, cacheKey, result);\n    \n    return result;\n  }\n\n  analyzeFileExtension(url, urlObj) {\n    const path = urlObj.pathname.toLowerCase();\n    let score = 0;\n    const reasons = [];\n\n    const extensionMatch = path.match(/\\.([a-z0-9]+)(?:\\?|$)/);\n    if (!extensionMatch) {\n      return { score: 0.3, reasons: ['no-extension'] };\n    }\n\n    const extension = extensionMatch[1];\n    const extensionScores = {\n      'jpg': 0.9, 'jpeg': 0.9, 'png': 0.9, 'webp': 0.85,\n      'gif': 0.7, 'svg': 0.6, 'bmp': 0.5\n    };\n\n    score = extensionScores[extension] || 0.1;\n    reasons.push(`extension-${extension}`);\n\n    return { score, reasons };\n  }\n\n  async calculateConfidenceScore(imageObj, context = {}) {\n    const startTime = performance.now();\n\n    try {\n      const urlValidation = await this.validateUrl(imageObj.src, context);\n      \n      const finalScore = urlValidation.confidence;\n      this.updateConfidenceMetrics(finalScore);\n\n      return {\n        confidence: Math.min(Math.max(finalScore, 0), 1),\n        breakdown: { url: urlValidation },\n        processingTime: performance.now() - startTime\n      };\n\n    } catch (error) {\n      console.warn('Confidence calculation error:', error);\n      return {\n        confidence: 0.3,\n        breakdown: {},\n        error: error.message\n      };\n    }\n  }\n\n  updateConfidenceMetrics(score) {\n    this.metrics.patternsProcessed++;\n    \n    if (score >= 0.7) {\n      this.metrics.confidenceDistribution.high++;\n    } else if (score >= 0.4) {\n      this.metrics.confidenceDistribution.medium++;\n    } else {\n      this.metrics.confidenceDistribution.low++;\n    }\n  }\n\n  cacheResult(cache, key, result) {\n    if (cache.size >= this.options.maxCacheSize) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n    \n    result._cached = Date.now();\n    cache.set(key, result);\n  }\n\n  /**\n   * Enhanced image categorization with Smart Pattern Recognition\n   * This is the missing method that AdvancedCollectorSystem expects\n   */\n  categorizeImageEnhanced(imageObj, confidenceData = null) {\n    const startTime = performance.now();\n    \n    try {\n      // Use provided confidence data or calculate it\n      const confidence = confidenceData ? confidenceData.confidence : 0.5;\n      \n      // Enhanced categorization logic based on confidence and patterns\n      let category, categoryReason, confidenceTier;\n      \n      if (confidence >= this.options.highConfidenceThreshold) {\n        category = 'high_confidence';\n        categoryReason = 'Smart pattern analysis indicates high-quality gallery image';\n        confidenceTier = 'high';\n      } else if (confidence >= this.options.minConfidenceScore) {\n        category = 'same_origin';\n        categoryReason = 'Moderate confidence based on URL patterns and context';\n        confidenceTier = 'medium';\n      } else {\n        category = 'external';\n        categoryReason = 'Low confidence, requires additional validation';\n        confidenceTier = 'low';\n      }\n      \n      // Apply advanced pattern analysis\n      const galleryTypeResult = this.detectGalleryType(imageObj);\n      const qualityAssessment = this.assessImageQuality(imageObj);\n      const duplicateCheck = this.checkForDuplicates(imageObj);\n      \n      // Adjust category based on advanced analysis\n      if (galleryTypeResult.isGallery && qualityAssessment.score > 0.7) {\n        category = 'high_confidence';\n        categoryReason += ` | Gallery pattern detected: ${galleryTypeResult.type}`;\n      }\n      \n      if (duplicateCheck.isDuplicate) {\n        category = 'external'; // Lower priority for duplicates\n        categoryReason += ' | Potential duplicate detected';\n      }\n      \n      return {\n        ...imageObj,\n        category,\n        categoryReason,\n        confidenceTier,\n        enhancedAnalysis: {\n          galleryType: galleryTypeResult,\n          quality: qualityAssessment,\n          duplicateStatus: duplicateCheck,\n          processingTime: performance.now() - startTime\n        }\n      };\n      \n    } catch (error) {\n      console.warn('Enhanced categorization failed:', error);\n      return {\n        ...imageObj,\n        category: 'external',\n        categoryReason: 'Error during enhanced analysis',\n        confidenceTier: 'low',\n        error: error.message\n      };\n    }\n  }\n  \n  /**\n   * Intelligent gallery pattern detection\n   */\n  detectGalleryType(imageObj) {\n    const url = imageObj.src;\n    const element = imageObj.element;\n    \n    // Check for gallery indicators in URL\n    const urlPatterns = {\n      instagram: /instagram\\.com.*\\/(p|reel)\\//i,\n      pinterest: /pinimg\\.com|pinterest\\.com/i,\n      ecommerce: /shop|product|catalog|store/i,\n      photography: /photo|gallery|portfolio/i,\n      artstation: /artstation\\.com/i,\n      behance: /behance\\.net/i\n    };\n    \n    for (const [type, pattern] of Object.entries(urlPatterns)) {\n      if (pattern.test(url)) {\n        return { isGallery: true, type, confidence: 0.9 };\n      }\n    }\n    \n    // Check DOM context for gallery patterns\n    if (element) {\n      const parent = element.closest('.gallery, .images, .photos, .grid, [data-gallery], [class*=\"grid\"], [class*=\"masonry\"]');\n      if (parent) {\n        const galleryType = this.detectDOMGalleryType(parent);\n        return { isGallery: true, type: galleryType, confidence: 0.8 };\n      }\n    }\n    \n    return { isGallery: false, type: 'unknown', confidence: 0.2 };\n  }\n  \n  /**\n   * Detect gallery type from DOM structure\n   */\n  detectDOMGalleryType(container) {\n    const style = window.getComputedStyle(container);\n    const className = container.className.toLowerCase();\n    \n    if (style.display === 'grid' || className.includes('grid')) {\n      return 'grid';\n    }\n    if (className.includes('carousel') || className.includes('slider')) {\n      return 'carousel';\n    }\n    if (className.includes('masonry')) {\n      return 'masonry';\n    }\n    if (container.querySelector('[data-infinite]') || className.includes('infinite')) {\n      return 'infinite-scroll';\n    }\n    \n    return 'standard';\n  }\n  \n  /**\n   * Advanced image quality assessment\n   */\n  assessImageQuality(imageObj) {\n    let score = 0.5;\n    const factors = [];\n    \n    // Dimension-based scoring\n    const width = imageObj.width || 0;\n    const height = imageObj.height || 0;\n    \n    if (width >= 800 && height >= 600) {\n      score += 0.3;\n      factors.push('high-resolution');\n    } else if (width >= 400 && height >= 300) {\n      score += 0.1;\n      factors.push('medium-resolution');\n    }\n    \n    // Aspect ratio assessment\n    if (width > 0 && height > 0) {\n      const aspectRatio = width / height;\n      if (aspectRatio >= 0.5 && aspectRatio <= 2.0) {\n        score += 0.1;\n        factors.push('good-aspect-ratio');\n      }\n    }\n    \n    // URL quality indicators\n    const url = imageObj.src;\n    const highQualityIndicators = ['original', 'full', 'large', 'hd', 'high', '1080', '4k'];\n    const lowQualityIndicators = ['thumb', 'small', 'preview', 'icon', 'avatar'];\n    \n    for (const indicator of highQualityIndicators) {\n      if (url.toLowerCase().includes(indicator)) {\n        score += 0.2;\n        factors.push(`high-quality-indicator-${indicator}`);\n        break;\n      }\n    }\n    \n    for (const indicator of lowQualityIndicators) {\n      if (url.toLowerCase().includes(indicator)) {\n        score -= 0.2;\n        factors.push(`low-quality-indicator-${indicator}`);\n        break;\n      }\n    }\n    \n    return {\n      score: Math.min(Math.max(score, 0), 1),\n      factors\n    };\n  }\n  \n  /**\n   * Duplicate detection using URL patterns\n   */\n  checkForDuplicates(imageObj) {\n    const url = imageObj.src;\n    \n    // Simple URL-based duplicate detection\n    // Extract base URL without query parameters for comparison\n    const baseUrl = url.split('?')[0];\n    const urlHash = this.generateSimpleHash(baseUrl);\n    \n    if (this.patternCache.has(`duplicate_${urlHash}`)) {\n      return {\n        isDuplicate: true,\n        method: 'url-hash',\n        confidence: 0.9\n      };\n    }\n    \n    // Cache this URL hash\n    this.patternCache.set(`duplicate_${urlHash}`, true);\n    \n    return {\n      isDuplicate: false,\n      method: 'url-hash',\n      confidence: 0.1\n    };\n  }\n  \n  /**\n   * Generate simple hash for URL comparison\n   */\n  generateSimpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(36);\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      cacheStats: {\n        patternCacheSize: this.patternCache.size,\n        domainCacheSize: this.domainReputationCache.size,\n        urlCacheSize: this.urlValidationCache.size,\n        contentCacheSize: this.contentValidationCache.size\n      }\n    };\n  }\n\n  reset() {\n    this.metrics = {\n      patternsProcessed: 0,\n      urlsValidated: 0,\n      contentValidated: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      averageProcessingTime: 0,\n      confidenceDistribution: { high: 0, medium: 0, low: 0 }\n    };\n\n    this.patternCache.clear();\n    this.domainReputationCache.clear();\n    this.urlValidationCache.clear();\n    this.contentValidationCache.clear();\n  }\n}\n\n// Export for use in other modules\nif (typeof window !== 'undefined') {\n  window.SmartPatternRecognition = SmartPatternRecognition;\n}\n\nconsole.log('\u2705 Smart Pattern Recognition System loaded successfully');\n\n// =============================================================================\n// ENHANCED SMART SELECTOR SYSTEM - Merged from enhanced-smart-selector.js\n// =============================================================================\n\nif (!window.EnhancedSmartSelectorSystem) {\n\n  class EnhancedSmartSelectorSystem {\n    constructor(options = {}) {\n      this.options = {\n        maxFallbackAttempts: options.maxFallbackAttempts || 3,\n        selectorTimeout: options.selectorTimeout || 2000,\n        confidenceThreshold: options.confidenceThreshold || 0.75,\n        earlyExitThreshold: options.earlyExitThreshold || 0.90,\n        \n        confidenceWeights: {\n          dataAttributes: 0.95,\n          reactPatterns: 0.92,\n          semanticClasses: 0.88,\n          structuralPatterns: 0.85,\n          genericSelectors: 0.60\n        },\n        \n        enableProgressiveAnalysis: options.enableProgressiveAnalysis !== false,\n        enableEarlyExit: options.enableEarlyExit !== false,\n        maxAnalysisTime: options.maxAnalysisTime || 5000,\n        \n        // Comprehensive site-specific patterns\n        siteSpecificPatterns: {\n          instagram: {\n            domain: ['instagram.com', 'www.instagram.com'],\n            confidence: 0.95,\n            imageSelectors: [\n              '._aagu img', '._aagv img', 'article img[src*=\"scontent\"]',\n              '[role=\"presentation\"] img[src*=\"scontent\"]', 'img[alt*=\"Photo by\"]',\n              'div[class*=\"x1n2onr6\"] img', 'article img:not([src*=\"static\"])',\n              'section[role=\"main\"] img:not([alt*=\"avatar\"])'\n            ]\n          },\n          pinterest: {\n            domain: ['pinterest.com', 'www.pinterest.com'],\n            confidence: 0.93,\n            imageSelectors: [\n              '[data-test-id=\"pin-image\"] img', '.GrowthUnauthPinImage img',\n              '.pinImage img', 'img[src*=\"pinimg\"]', 'div[class*=\"gridCentered\"] img'\n            ]\n          },\n          twitter: {\n            domain: ['twitter.com', 'x.com'],\n            confidence: 0.90,\n            imageSelectors: [\n              '[data-testid=\"tweetPhoto\"] img', '[data-testid=\"media\"] img',\n              'img[src*=\"pbs.twimg.com\"]', '[role=\"group\"] img[src*=\"pbs.twimg.com\"]'\n            ]\n          },\n          generic: {\n            confidence: 0.60,\n            imageSelectors: [\n              'img[src]:not([src*=\"icon\"]):not([src*=\"avatar\"]):not([width=\"16\"]):not([height=\"16\"])',\n              '.gallery img', '.images img', '.photos img', 'article img:not([width=\"16\"])',\n              'figure img', '.media img'\n            ]\n          }\n        },\n        \n        ...options\n      };\n\n      this.cache = new Map();\n      \n      // Enhanced performance and learning metrics\n      this.performanceMetrics = {\n        totalAnalyses: 0,\n        averageConfidence: 0,\n        siteSpecificHits: 0,\n        genericFallbacks: 0,\n        processingTimes: [],\n        adaptiveLearning: {\n          successfulPatterns: new Map(),\n          failedPatterns: new Map(),\n          confidenceAdjustments: 0,\n          patternEvolution: []\n        }\n      };\n      \n      // Adaptive learning system\n      this.adaptiveLearning = {\n        patternSuccess: new Map(),\n        patternFailure: new Map(),\n        userFeedback: new Map(),\n        confidenceHistory: [],\n        lastUpdate: Date.now()\n      };\n      \n      // Initialize Smart Pattern Recognition if available\n      this.smartPatternRecognition = null;\n      this.initializeSmartPatternRecognition();\n\n      this.initializeModalSystem();\n      console.log('\u2705 Enhanced Smart Selector System initialized with adaptive learning');\n    }\n    \n    /**\n     * Initialize Smart Pattern Recognition integration with coordination\n     */\n    initializeSmartPatternRecognition() {\n      try {\n        // BUGFIX: Use shared instance to prevent race conditions\n        if (window.__ST?.getSharedDetectionSystem) {\n          this.smartPatternRecognition = window.__ST.getSharedDetectionSystem('smartPatternRecognition');\n          if (this.smartPatternRecognition) {\n            console.log('\u2705 [COORD] Using shared SmartPatternRecognition instance');\n            return;\n          }\n        }\n        \n        // Fallback to individual instance if shared system not available\n        if (typeof SmartPatternRecognition !== 'undefined' && !window.__ST?.isSystemInitialized('smart-pattern-recognition-selector')) {\n          this.smartPatternRecognition = new SmartPatternRecognition({\n            minConfidenceScore: this.options.confidenceThreshold * 0.8,\n            highConfidenceThreshold: this.options.confidenceThreshold,\n            enableAdvancedPatterns: true,\n            enableUrlValidation: true,\n            enableContentValidation: true\n          });\n          console.log('\u2705 Smart Pattern Recognition integrated with Enhanced Smart Selector');\n        }\n      } catch (error) {\n        console.warn('\u26A0\uFE0F Smart Pattern Recognition integration failed:', error);\n      }\n    }\n\n    async findGalleryImages(options = {}) {\n      const startTime = performance.now();\n      const domain = window.location.hostname.toLowerCase();\n      \n      try {\n        // Progressive analysis with early exit\n        const analysisResults = await this.performProgressiveAnalysis(domain, options);\n        \n        if (this.options.enableEarlyExit && \n            analysisResults.confidence >= this.options.earlyExitThreshold) {\n          console.log(`\uD83D\uDE80 Early exit triggered - high confidence: ${analysisResults.confidence}`);\n          return this.finalizeResults(analysisResults, startTime);\n        }\n\n        // Site-specific analysis\n        const siteResults = await this.performSiteSpecificAnalysis(domain, options);\n        \n        // Merge and optimize results\n        const mergedResults = this.mergeAnalysisResults([analysisResults, siteResults]);\n        \n        return this.finalizeResults(mergedResults, startTime);\n        \n      } catch (error) {\n        console.error('Enhanced Smart Selector error:', error);\n        return this.handleAnalysisError(error, startTime);\n      }\n    }\n\n    async performProgressiveAnalysis(domain, options) {\n      const results = { images: [], confidence: 0, metadata: {} };\n      \n      // High confidence selectors first\n      const highConfidenceSelectors = this.getHighConfidenceSelectors(domain);\n      const cachedQuery = window.__ST?.cachedQuery || ((sel) => Array.from(document.querySelectorAll(sel)));\n      \n      for (const selector of highConfidenceSelectors) {\n        const elements = cachedQuery(selector);\n        for (const element of elements) {\n          const imageData = this.extractImageData(element, selector, 0.9);\n          if (imageData) {\n            results.images.push(imageData);\n          }\n        }\n        \n        if (results.images.length > 10) break; // Early exit for performance\n      }\n      \n      results.confidence = this.calculateOverallConfidence(results.images);\n      return results;\n    }\n\n    async performSiteSpecificAnalysis(domain, options) {\n      const sitePattern = this.findSitePattern(domain);\n      const results = { images: [], confidence: 0, metadata: { sitePattern: sitePattern?.domain } };\n      const cachedQuery = window.__ST?.cachedQuery || ((sel) => Array.from(document.querySelectorAll(sel)));\n      \n      if (sitePattern) {\n        console.log(`\uD83C\uDFAF Using site-specific patterns for ${sitePattern.domain}`);\n        \n        for (const selector of sitePattern.imageSelectors) {\n          const elements = cachedQuery(selector);\n          for (const element of elements) {\n            const imageData = this.extractImageData(element, selector, sitePattern.confidence);\n            if (imageData) {\n              results.images.push(imageData);\n            }\n          }\n        }\n        \n        this.performanceMetrics.siteSpecificHits++;\n      } else {\n        // Fallback to generic patterns\n        const genericPattern = this.options.siteSpecificPatterns.generic;\n        for (const selector of genericPattern.imageSelectors) {\n          const elements = cachedQuery(selector);\n          for (const element of elements) {\n            const imageData = this.extractImageData(element, selector, genericPattern.confidence);\n            if (imageData) {\n              results.images.push(imageData);\n            }\n          }\n        }\n        \n        this.performanceMetrics.genericFallbacks++;\n      }\n      \n      results.confidence = this.calculateOverallConfidence(results.images);\n      return results;\n    }\n\n    findSitePattern(domain) {\n      for (const [key, pattern] of Object.entries(this.options.siteSpecificPatterns)) {\n        if (pattern.domain && pattern.domain.some(d => domain.includes(d))) {\n          return pattern;\n        }\n      }\n      return null;\n    }\n\n    getHighConfidenceSelectors(domain) {\n      return [\n        '[data-testid*=\"image\"] img',\n        '[data-test-id*=\"image\"] img',\n        '[data-gallery] img',\n        '.gallery img',\n        '.image-container img',\n        'img[loading=\"lazy\"]:not([src*=\"icon\"])'\n      ];\n    }\n\n    /**\n     * Enhanced image data extraction with comprehensive detection\n     */\n    extractImageData(element, selector, confidence) {\n      const detectionResults = this.detectAllImageSources(element);\n      \n      if (!detectionResults.src) return null;\n      \n      // Advanced filtering with quality assessment\n      if (!this.passesQualityFilter(detectionResults, element)) {\n        return null;\n      }\n      \n      // Enhanced metadata collection\n      const metadata = this.collectEnhancedMetadata(element, detectionResults);\n      \n      // Apply adaptive confidence adjustment\n      const adjustedConfidence = this.adjustConfidenceAdaptively(confidence, metadata, detectionResults);\n      \n      return {\n        src: detectionResults.src,\n        alt: element.alt || detectionResults.alt || '',\n        width: element.naturalWidth || detectionResults.width || element.getBoundingClientRect().width,\n        height: element.naturalHeight || detectionResults.height || element.getBoundingClientRect().height,\n        selector: selector,\n        confidence: adjustedConfidence,\n        element: element,\n        metadata: metadata,\n        detectionMethod: detectionResults.method,\n        qualityScore: detectionResults.qualityScore\n      };\n    }\n    \n    /**\n     * Comprehensive image source detection including lazy loading, srcset, and video posters\n     */\n    detectAllImageSources(element) {\n      const results = { src: null, method: 'none', qualityScore: 0.5, width: 0, height: 0, alt: '' };\n      \n      // Method 1: Standard IMG elements with lazy loading support\n      if (element.tagName === 'IMG') {\n        // Priority order for different src attributes\n        const srcAttributes = [\n          'src',           // Standard source\n          'data-src',      // Common lazy loading\n          'data-lazy-src', // Lazy loading variant\n          'data-srcset',   // Responsive images\n          'data-original', // Original image\n          'data-full',     // Full size image\n          'data-large'     // Large image\n        ];\n        \n        for (const attr of srcAttributes) {\n          const value = element.getAttribute(attr);\n          if (value && !value.startsWith('data:')) {\n            results.src = value;\n            results.method = `img-${attr}`;\n            results.qualityScore = this.getAttributeQualityScore(attr);\n            break;\n          }\n        }\n        \n        // Handle srcset for responsive images\n        if (!results.src) {\n          const srcset = element.getAttribute('srcset') || element.getAttribute('data-srcset');\n          if (srcset) {\n            const sources = this.parseSrcset(srcset);\n            const bestSource = this.selectBestSource(sources);\n            if (bestSource) {\n              results.src = bestSource.url;\n              results.method = 'img-srcset';\n              results.qualityScore = 0.8;\n              results.width = bestSource.width;\n            }\n          }\n        }\n        \n        results.alt = element.alt || '';\n      }\n      \n      // Method 2: Background images with advanced CSS detection\n      if (!results.src) {\n        const backgroundSrc = this.detectBackgroundImage(element);\n        if (backgroundSrc) {\n          results.src = backgroundSrc.url;\n          results.method = 'background-css';\n          results.qualityScore = backgroundSrc.qualityScore;\n        }\n      }\n      \n      // Method 3: Video poster images and thumbnails\n      if (!results.src && (element.tagName === 'VIDEO' || element.closest('video'))) {\n        const videoSrc = this.detectVideoThumbnail(element);\n        if (videoSrc) {\n          results.src = videoSrc.url;\n          results.method = 'video-poster';\n          results.qualityScore = videoSrc.qualityScore;\n        }\n      }\n      \n      // Method 4: Progressive web app detection\n      if (!results.src) {\n        const pwaSrc = this.detectProgressiveImage(element);\n        if (pwaSrc) {\n          results.src = pwaSrc.url;\n          results.method = 'progressive-app';\n          results.qualityScore = pwaSrc.qualityScore;\n        }\n      }\n      \n      return results;\n    }\n    \n    /**\n     * Parse srcset attribute to extract image sources\n     */\n    parseSrcset(srcset) {\n      const sources = [];\n      const candidates = srcset.split(',');\n      \n      for (const candidate of candidates) {\n        const trimmed = candidate.trim();\n        const parts = trimmed.split(/\\s+/);\n        \n        if (parts.length >= 1) {\n          const url = parts[0];\n          let width = 0;\n          \n          // Extract width from descriptor (e.g., \"800w\")\n          if (parts.length > 1) {\n            const descriptor = parts[1];\n            if (descriptor.endsWith('w')) {\n              width = parseInt(descriptor.slice(0, -1), 10) || 0;\n            }\n          }\n          \n          sources.push({ url, width });\n        }\n      }\n      \n      return sources;\n    }\n    \n    /**\n     * Select the best source from srcset based on quality\n     */\n    selectBestSource(sources) {\n      if (sources.length === 0) return null;\n      \n      // Sort by width descending, prefer larger images\n      sources.sort((a, b) => b.width - a.width);\n      \n      // Return the largest available, but prefer reasonable sizes\n      const idealWidth = 1200; // Target width for good quality\n      \n      for (const source of sources) {\n        if (source.width >= idealWidth) {\n          return source;\n        }\n      }\n      \n      // If no ideal size, return the largest\n      return sources[0];\n    }\n    \n    /**\n     * Advanced background image detection\n     */\n    detectBackgroundImage(element) {\n      const style = window.getComputedStyle(element);\n      const backgroundImage = style.backgroundImage;\n      \n      if (backgroundImage && backgroundImage !== 'none') {\n        // Extract URL from CSS background-image\n        const matches = backgroundImage.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n        if (matches) {\n          const url = matches[1];\n          let qualityScore = 0.6;\n          \n          // Assess quality based on URL patterns\n          if (url.includes('large') || url.includes('full') || url.includes('original')) {\n            qualityScore = 0.9;\n          } else if (url.includes('medium') || url.includes('cover')) {\n            qualityScore = 0.7;\n          }\n          \n          return { url, qualityScore };\n        }\n      }\n      \n      // Check for CSS custom properties (CSS variables)\n      const computedStyle = style;\n      for (let i = 0; i < computedStyle.length; i++) {\n        const property = computedStyle[i];\n        if (property.startsWith('--') && property.includes('image')) {\n          const value = computedStyle.getPropertyValue(property);\n          if (value.includes('url(')) {\n            const matches = value.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n            if (matches) {\n              return { url: matches[1], qualityScore: 0.5 };\n            }\n          }\n        }\n      }\n      \n      return null;\n    }\n    \n    /**\n     * Detect video thumbnails and poster images\n     */\n    detectVideoThumbnail(element) {\n      const video = element.tagName === 'VIDEO' ? element : element.closest('video');\n      \n      if (video) {\n        // Check for poster attribute\n        const poster = video.getAttribute('poster');\n        if (poster) {\n          return { url: poster, qualityScore: 0.8 };\n        }\n        \n        // Check for thumbnail in parent container\n        const container = video.parentElement;\n        if (container) {\n          const thumbnail = container.querySelector('[data-thumbnail], [data-poster], .video-thumbnail img');\n          if (thumbnail) {\n            const src = thumbnail.src || thumbnail.getAttribute('data-src');\n            if (src) {\n              return { url: src, qualityScore: 0.7 };\n            }\n          }\n        }\n      }\n      \n      return null;\n    }\n    \n    /**\n     * Detect progressive web app images\n     */\n    detectProgressiveImage(element) {\n      // Check for PWA-specific attributes\n      const pwaAttributes = [\n        'data-progressive-src',\n        'data-intersection-src',\n        'data-dynamic-src'\n      ];\n      \n      for (const attr of pwaAttributes) {\n        const value = element.getAttribute(attr);\n        if (value) {\n          return { url: value, qualityScore: 0.6 };\n        }\n      }\n      \n      return null;\n    }\n    \n    /**\n     * Get quality score for different src attributes\n     */\n    getAttributeQualityScore(attribute) {\n      const scores = {\n        'src': 0.9,\n        'data-original': 0.95,\n        'data-full': 0.9,\n        'data-large': 0.85,\n        'data-src': 0.8,\n        'data-lazy-src': 0.75,\n        'data-srcset': 0.8\n      };\n      \n      return scores[attribute] || 0.5;\n    }\n    \n    /**\n     * Advanced quality filtering with multiple criteria\n     */\n    passesQualityFilter(detectionResults, element) {\n      const src = detectionResults.src;\n      \n      // Filter out low-value images based on URL patterns\n      const lowValueIndicators = ['icon', 'avatar', 'logo', 'emoji', 'loading', 'spinner', 'placeholder'];\n      if (lowValueIndicators.some(indicator => src.toLowerCase().includes(indicator))) {\n        return false;\n      }\n      \n      // Filter based on alt text\n      if (element.alt) {\n        const altLower = element.alt.toLowerCase();\n        if (lowValueIndicators.some(indicator => altLower.includes(indicator))) {\n          return false;\n        }\n      }\n      \n      // Size-based filtering\n      const rect = element.getBoundingClientRect();\n      if (rect.width < 20 || rect.height < 20) { // More lenient threshold\n        return false;\n      }\n      \n      // Aspect ratio filtering (avoid extremely wide or tall images)\n      if (rect.width > 0 && rect.height > 0) {\n        const aspectRatio = rect.width / rect.height;\n        if (aspectRatio > 10 || aspectRatio < 0.1) {\n          return false;\n        }\n      }\n      \n      // Data URL filtering (avoid base64 images unless high quality)\n      if (src.startsWith('data:')) {\n        if (src.length < 1000) { // Very small data URLs are likely icons\n          return false;\n        }\n      }\n      \n      return true;\n    }\n    \n    /**\n     * Collect enhanced metadata for adaptive learning\n     */\n    collectEnhancedMetadata(element, detectionResults) {\n      const rect = element.getBoundingClientRect();\n      const computedStyle = window.getComputedStyle(element);\n      \n      return {\n        // Basic element info\n        className: element.className,\n        id: element.id,\n        tagName: element.tagName,\n        \n        // Positioning and layout\n        position: {\n          x: rect.left,\n          y: rect.top,\n          width: rect.width,\n          height: rect.height\n        },\n        \n        // Style information\n        styles: {\n          display: computedStyle.display,\n          position: computedStyle.position,\n          zIndex: computedStyle.zIndex,\n          opacity: computedStyle.opacity\n        },\n        \n        // Context analysis\n        context: this.analyzeElementContext(element),\n        \n        // Detection metadata\n        detection: {\n          method: detectionResults.method,\n          qualityScore: detectionResults.qualityScore,\n          timestamp: Date.now()\n        },\n        \n        // Parent analysis\n        parentAnalysis: this.analyzeParentContainer(element)\n      };\n    }\n    \n    /**\n     * Adaptive confidence adjustment based on learning\n     */\n    adjustConfidenceAdaptively(baseConfidence, metadata, detectionResults) {\n      let adjustedConfidence = baseConfidence;\n      \n      // Apply learned pattern adjustments\n      const patternKey = this.generatePatternKey(metadata, detectionResults);\n      \n      if (this.adaptiveLearning.patternSuccess.has(patternKey)) {\n        const successRate = this.adaptiveLearning.patternSuccess.get(patternKey);\n        adjustedConfidence *= (1 + (successRate - 0.5) * 0.4); // Max 20% boost/penalty\n        this.performanceMetrics.adaptiveLearning.confidenceAdjustments++;\n      }\n      \n      // Gallery context boost\n      if (metadata.context && metadata.context.isInGallery) {\n        adjustedConfidence *= 1.2;\n      }\n      \n      // Quality score integration\n      adjustedConfidence *= (0.7 + detectionResults.qualityScore * 0.3);\n      \n      // Smart Pattern Recognition integration\n      if (this.smartPatternRecognition) {\n        try {\n          const smartAnalysis = this.smartPatternRecognition.calculateConfidenceScore(\n            { src: detectionResults.src }, \n            { metadata, detectionResults }\n          );\n          if (smartAnalysis && smartAnalysis.confidence) {\n            adjustedConfidence = (adjustedConfidence + smartAnalysis.confidence) / 2;\n          }\n        } catch (error) {\n          console.warn('Smart Pattern Recognition confidence calculation failed:', error);\n        }\n      }\n      \n      return Math.min(Math.max(adjustedConfidence, 0), 1);\n    }\n    \n    /**\n     * Generate pattern key for adaptive learning\n     */\n    generatePatternKey(metadata, detectionResults) {\n      const components = [\n        detectionResults.method || 'unknown',\n        metadata.context ? metadata.context.galleryType : 'none',\n        metadata.tagName || 'unknown',\n        metadata.className ? metadata.className.split(' ')[0] : 'no-class'\n      ];\n      \n      return components.join('|');\n    }\n    \n    /**\n     * Analyze element context for better pattern recognition\n     */\n    analyzeElementContext(element) {\n      const context = {\n        isInGallery: false,\n        galleryType: 'none',\n        siblingCount: 0,\n        hasGalleryIndicators: false\n      };\n      \n      // Check if element is in a gallery container\n      const galleryContainer = element.closest('.gallery, .images, .photos, [data-gallery], .grid, .masonry, .carousel');\n      if (galleryContainer) {\n        context.isInGallery = true;\n        context.galleryType = this.detectContainerType(galleryContainer);\n        context.hasGalleryIndicators = true;\n      }\n      \n      // Count similar siblings\n      const parent = element.parentElement;\n      if (parent) {\n        const siblings = parent.querySelectorAll(element.tagName);\n        context.siblingCount = siblings.length;\n      }\n      \n      return context;\n    }\n    \n    /**\n     * Analyze parent container for pattern recognition\n     */\n    analyzeParentContainer(element) {\n      const parent = element.parentElement;\n      if (!parent) return null;\n      \n      const computedStyle = window.getComputedStyle(parent);\n      \n      return {\n        className: parent.className,\n        display: computedStyle.display,\n        flexDirection: computedStyle.flexDirection,\n        gridTemplateColumns: computedStyle.gridTemplateColumns,\n        childCount: parent.children.length,\n        hasDataAttributes: this.hasGalleryDataAttributes(parent)\n      };\n    }\n    \n    /**\n     * Check for gallery-related data attributes\n     */\n    hasGalleryDataAttributes(element) {\n      const galleryAttributes = ['data-gallery', 'data-grid', 'data-masonry', 'data-carousel', 'data-slideshow'];\n      return galleryAttributes.some(attr => element.hasAttribute(attr));\n    }\n    \n    /**\n     * Detect container type for gallery classification\n     */\n    detectContainerType(container) {\n      const className = container.className.toLowerCase();\n      const style = window.getComputedStyle(container);\n      \n      if (style.display === 'grid' || className.includes('grid')) {\n        return 'grid';\n      }\n      if (className.includes('masonry')) {\n        return 'masonry';\n      }\n      if (className.includes('carousel') || className.includes('slider')) {\n        return 'carousel';\n      }\n      if (className.includes('gallery')) {\n        return 'gallery';\n      }\n      \n      return 'container';\n    }\n    \n    /**\n     * Learn from successful pattern selections\n     */\n    learnFromSuccess(imageData) {\n      if (!imageData.metadata) return;\n      \n      const patternKey = this.generatePatternKey(imageData.metadata, {\n        method: imageData.detectionMethod || 'unknown'\n      });\n      \n      const currentSuccess = this.adaptiveLearning.patternSuccess.get(patternKey) || 0.5;\n      const newSuccess = Math.min(currentSuccess + 0.1, 1.0);\n      \n      this.adaptiveLearning.patternSuccess.set(patternKey, newSuccess);\n      this.performanceMetrics.adaptiveLearning.successfulPatterns.set(patternKey, \n        (this.performanceMetrics.adaptiveLearning.successfulPatterns.get(patternKey) || 0) + 1\n      );\n      \n      console.log(`\uD83C\uDFAF Pattern learning: ${patternKey} success rate: ${newSuccess.toFixed(2)}`);\n    }\n    \n    /**\n     * Learn from failed pattern selections\n     */\n    learnFromFailure(imageData) {\n      if (!imageData.metadata) return;\n      \n      const patternKey = this.generatePatternKey(imageData.metadata, {\n        method: imageData.detectionMethod || 'unknown'\n      });\n      \n      const currentSuccess = this.adaptiveLearning.patternSuccess.get(patternKey) || 0.5;\n      const newSuccess = Math.max(currentSuccess - 0.1, 0.0);\n      \n      this.adaptiveLearning.patternSuccess.set(patternKey, newSuccess);\n      this.performanceMetrics.adaptiveLearning.failedPatterns.set(patternKey,\n        (this.performanceMetrics.adaptiveLearning.failedPatterns.get(patternKey) || 0) + 1\n      );\n      \n      console.log(`\u274C Pattern learning: ${patternKey} success rate: ${newSuccess.toFixed(2)}`);\n    }\n\n    calculateOverallConfidence(images) {\n      if (images.length === 0) return 0;\n      \n      const totalConfidence = images.reduce((sum, img) => sum + img.confidence, 0);\n      return totalConfidence / images.length;\n    }\n\n    mergeAnalysisResults(resultsArray) {\n      const mergedImages = [];\n      const seenUrls = new Set();\n      \n      for (const results of resultsArray) {\n        for (const image of results.images) {\n          if (!seenUrls.has(image.src)) {\n            seenUrls.add(image.src);\n            mergedImages.push(image);\n          }\n        }\n      }\n      \n      // Sort by confidence\n      mergedImages.sort((a, b) => b.confidence - a.confidence);\n      \n      return {\n        images: mergedImages,\n        confidence: this.calculateOverallConfidence(mergedImages),\n        metadata: { merged: true }\n      };\n    }\n\n    finalizeResults(results, startTime) {\n      const processingTime = performance.now() - startTime;\n      \n      this.performanceMetrics.totalAnalyses++;\n      this.performanceMetrics.processingTimes.push(processingTime);\n      this.performanceMetrics.averageConfidence = \n        (this.performanceMetrics.averageConfidence + results.confidence) / 2;\n      \n      console.log(`\u2705 Enhanced Smart Selector completed: ${results.images.length} images found (${processingTime.toFixed(2)}ms)`);\n      \n      return {\n        success: true,\n        images: results.images,\n        confidence: results.confidence,\n        metadata: {\n          ...results.metadata,\n          processingTime,\n          totalFound: results.images.length,\n          performance: this.performanceMetrics\n        }\n      };\n    }\n\n    handleAnalysisError(error, startTime) {\n      const processingTime = performance.now() - startTime;\n      \n      console.error('Analysis error:', error);\n      \n      return {\n        success: false,\n        images: [],\n        confidence: 0,\n        error: error.message,\n        metadata: { processingTime }\n      };\n    }\n\n    // Modal system for selector interface\n    initializeModalSystem() {\n      this.modalContainer = null;\n      this.modalIframe = null;\n      this.modalOverlay = null;\n      this.isModalActive = false;\n    }\n\n    createSecureModal(title = 'Smart Selector', content = '') {\n      if (this.isModalActive) {\n        this.closeModal();\n      }\n\n      this.modalOverlay = document.createElement('div');\n      this.modalOverlay.id = 'steptwo-smart-selector-overlay';\n      this.modalOverlay.style.cssText = `\n        position: fixed !important; top: 0 !important; left: 0 !important;\n        width: 100vw !important; height: 100vh !important;\n        background: rgba(0, 0, 0, 0.7) !important; z-index: 2147483647 !important;\n        display: flex !important; align-items: center !important; justify-content: center !important;\n      `;\n\n      this.modalContainer = document.createElement('div');\n      this.modalContainer.style.cssText = `\n        background: white !important; border-radius: 12px !important;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3) !important;\n        max-width: 90vw !important; max-height: 90vh !important;\n        width: 800px !important; height: 600px !important;\n        display: flex !important; flex-direction: column !important;\n      `;\n\n      const header = document.createElement('div');\n      header.style.cssText = `\n        padding: 20px !important; border-bottom: 1px solid #e0e0e0 !important;\n        display: flex !important; justify-content: space-between !important;\n        align-items: center !important; background: #f8f9fa !important;\n      `;\n\n      const titleElement = document.createElement('h3');\n      titleElement.textContent = title;\n      titleElement.style.cssText = `\n        margin: 0 !important; font-size: 18px !important;\n        font-weight: 600 !important; color: #333 !important;\n      `;\n\n      const closeButton = document.createElement('button');\n      closeButton.textContent = '\u2715'; // Fixed: Use textContent instead of innerHTML for CSP compliance\n      closeButton.style.cssText = `\n        background: none !important; border: none !important;\n        font-size: 20px !important; cursor: pointer !important;\n        color: #666 !important; padding: 5px 8px !important;\n      `;\n      closeButton.onclick = () => this.closeModal();\n\n      header.appendChild(titleElement);\n      header.appendChild(closeButton);\n\n      this.modalIframe = document.createElement('iframe');\n      this.modalIframe.style.cssText = `\n        flex: 1 !important; border: none !important;\n        width: 100% !important; height: 100% !important;\n      `;\n      \n      this.modalIframe.srcdoc = this.createIframeContent(content);\n\n      this.modalContainer.appendChild(header);\n      this.modalContainer.appendChild(this.modalIframe);\n      this.modalOverlay.appendChild(this.modalContainer);\n      \n      document.body.appendChild(this.modalOverlay);\n      \n      this.modalOverlay.addEventListener('click', (e) => {\n        if (e.target === this.modalOverlay) {\n          this.closeModal();\n        }\n      });\n\n      this.isModalActive = true;\n      return this.modalContainer;\n    }\n\n    createIframeContent(content) {\n      return `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <style>\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \n                   line-height: 1.6; color: #333; padding: 20px; }\n            .selector-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); \n                            gap: 12px; margin: 20px 0; }\n            .selector-item { background: #f8f9fa; padding: 12px; border-radius: 8px; \n                            border: 2px solid #e9ecef; cursor: pointer; transition: all 0.2s ease; }\n            .selector-item:hover { background: #e3f2fd; border-color: #2196f3; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">${content}</div>\n        </body>\n        </html>\n      `;\n    }\n\n    closeModal() {\n      if (this.modalOverlay && this.modalOverlay.parentNode) {\n        this.modalOverlay.remove();\n      }\n      this.isModalActive = false;\n      this.modalContainer = null;\n      this.modalIframe = null;\n      this.modalOverlay = null;\n    }\n\n    getPerformanceMetrics() {\n      return { ...this.performanceMetrics };\n    }\n\n    clearCache() {\n      this.cache.clear();\n    }\n  }\n\n  // Export globally\n  window.EnhancedSmartSelectorSystem = EnhancedSmartSelectorSystem;\n  console.log('\u2705 Enhanced Smart Selector System loaded successfully');\n}\n\n// =============================================================================\n// CENTRALIZED MESSAGE COORDINATOR - Prevents race conditions and conflicts\n// =============================================================================\n\n/**\n * Centralized Message Coordinator - Single source of truth for message handling\n * Prevents race conditions and listener conflicts between multiple content scripts\n */\n\n// CRITICAL FIX: Generate unique frame identifier to prevent handler conflicts\nfunction generateFrameId() {\n  return `frame_${Date.now()}_${Math.random().toString(36).substr(2, 9)}_${window.location.hostname || 'unknown'}`;\n}\n\n// Global message coordination state\nwindow.__STEPTWO_MESSAGE_COORDINATOR = window.__STEPTWO_MESSAGE_COORDINATOR || {\n  initialized: false,\n  ready: false,\n  frameId: generateFrameId(), // CRITICAL FIX: Unique frame identifier\n  listeners: new Map(),\n  messageHandlers: new Map(),\n  queuedHandlers: [], // CRITICAL FIX: Queue handlers during initialization\n  startupTime: Date.now(),\n  initializationAttempts: 0,\n  MAX_ATTEMPTS: 3\n};\n\nconst coordinator = window.__STEPTWO_MESSAGE_COORDINATOR;\n\n// Enhanced state management with enterprise monitoring  \nlet initialized = false;\nlet extensionReady = false;\nlet errorBoundary = null;\nlet performanceMonitor = null;\nlet startupTime = Date.now();\nlet initializationAttempts = 0;\nconst MAX_INITIALIZATION_ATTEMPTS = 3;\n\n// Check if we're in a Chrome extension context and initialize\nif (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.getURL) {\n  initializeContentScriptCoordinator();\n} else {\n  console.log('\uD83C\uDF10 Not in Chrome extension context, skipping coordinator initialization');\n}\n\n// Enhanced initialization with centralized coordination\nasync function initializeContentScriptCoordinator() {\n  coordinator.initializationAttempts++;\n  \n  if (coordinator.initializationAttempts > coordinator.MAX_ATTEMPTS) {\n    console.error('\u274C Max coordinator initialization attempts exceeded');\n    return;\n  }\n\n  // Prevent double initialization\n  if (coordinator.initialized) {\n    console.log('\u26A0\uFE0F Message coordinator already initialized, registering as handler');\n    await registerWithCoordinator();\n    return;\n  }\n\n  try {\n    console.log(`\uD83D\uDD04 Initializing STEPTWO message coordinator (attempt ${coordinator.initializationAttempts})...`);\n\n    // Initialize enterprise error boundary first\n    await initializeErrorBoundary();\n    \n    // Initialize performance monitoring\n    await initializePerformanceMonitoring();\n    \n    // Wait for DOM to be ready with timeout\n    await waitForDOMReady();\n    \n    // Perform pre-initialization checks\n    await performPreInitChecks();\n\n    // Enhanced module availability check with fallbacks\n    const moduleCheckResult = await checkModuleAvailability();\n    \n    if (!moduleCheckResult.success && moduleCheckResult.critical) {\n      console.warn(`\u26A0\uFE0F Critical modules missing: ${moduleCheckResult.missing.join(', ')}`);\n      // Continue initialization with fallbacks rather than failing completely\n    }\n\n    // Set up centralized message listener (only once)\n    await setupCentralizedMessageListener();\n\n    // Initialize core systems with error boundaries\n    await initializeCoreSystems();\n    \n    // Register this script's message handlers\n    await registerMessageHandlers();\n    \n    // Perform post-initialization validation\n    await performPostInitValidation();\n\n    coordinator.initialized = true;\n    coordinator.ready = true;\n    initialized = true;\n    extensionReady = true;\n    \n    // CRITICAL FIX: Process any queued handler registrations now that coordinator is ready\n    processQueuedHandlers();\n    \n    const initTime = Date.now() - coordinator.startupTime;\n    console.log(`\u2705 STEPTWO message coordinator initialized successfully in ${initTime}ms`);\n    \n    // Report successful initialization\n    reportInitializationSuccess(initTime);\n\n  } catch (error) {\n    await handleInitializationError(error);\n  }\n}\n\n/**\n * Register with existing coordinator (when coordinator already initialized by another script)\n */\nasync function registerWithCoordinator() {\n  try {\n    console.log('\uD83D\uDD17 Registering content-bundle handlers with existing coordinator...');\n    \n    // Initialize local systems\n    await initializeErrorBoundary();\n    await initializePerformanceMonitoring();\n    await waitForDOMReady();\n    await initializeCoreSystems();\n    \n    // Register our message handlers with the coordinator\n    await registerMessageHandlers();\n    \n    initialized = true;\n    extensionReady = true;\n    \n    console.log('\u2705 Content-bundle registered with coordinator successfully');\n  } catch (error) {\n    console.error('\u274C Failed to register with coordinator:', error);\n  }\n}\n\n/**\n * Centralized message listener setup - Single listener for all content scripts\n * CRITICAL: Only one listener across all content scripts to prevent conflicts\n */\nasync function setupCentralizedMessageListener() {\n  if (!chrome.runtime.onMessage) {\n    throw new Error('Chrome runtime message API not available');\n  }\n\n  // CRITICAL: Check if listener already exists (prevent duplicates)\n  if (window.__STEPTWO_MESSAGE_LISTENER_REGISTERED) {\n    console.log('\u26A0\uFE0F Message listener already registered, skipping duplicate setup');\n    return;\n  }\n\n  console.log('\uD83C\uDFAF Setting up centralized message listener...');\n\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('\uD83D\uDCE8 Centralized message received:', { \n      action: message.action || message.type, \n      sender: sender.tab ? 'tab' : 'extension',\n      url: window.location.href \n    });\n    \n    // Route through centralized coordinator\n    handleCentralizedMessage(message, sender, sendResponse);\n    \n    return true; // Keep message channel open for async responses\n  });\n\n  // Mark listener as registered globally\n  window.__STEPTWO_MESSAGE_LISTENER_REGISTERED = true;\n  console.log('\u2705 Centralized message listener set up successfully');\n}\n\n/**\n * Register message handlers with the coordinator\n */\nasync function registerMessageHandlers() {\n  console.log('\uD83D\uDD17 Registering content-bundle message handlers...');\n  \n  // Register handlers for this script's capabilities\n  const handlers = {\n    'ping': handlePing,\n    'check_orchestrator_status': handleCheckOrchestratorStatus,\n    'getPageStatus': handleGetPageStatus,\n    'quickScan': handleQuickScan,\n    'advancedScan': handleAdvancedScan,\n    'enhancedGalleryDetection': handleEnhancedGalleryDetection,\n    'sitePatternAnalysis': handleSitePatternAnalysis,\n    'lazyImageDetection': handleLazyImageDetection,\n    'toggleSelector': handleToggleSelector,\n    'testSelector': handleTestSelector,\n    'clearHighlights': handleClearHighlights\n  };\n\n  // CRITICAL FIX: Register each handler using frame-aware registration\n  for (const [messageType, handler] of Object.entries(handlers)) {\n    // Use the registerStepTwoMessageHandler function to ensure frame-aware registration\n    window.registerStepTwoMessageHandler(messageType, handler, 'content-bundle', 1);\n  }\n\n  console.log(`\u2705 Registered ${Object.keys(handlers).length} message handlers from content-bundle`);\n}\n\n/**\n * Centralized message routing - Routes messages to appropriate handlers\n */\nasync function handleCentralizedMessage(message, sender, sendResponse) {\n  const startTime = Date.now();\n  \n  try {\n    // Check if coordinator is ready\n    if (!coordinator.ready) {\n      console.warn('\u26A0\uFE0F Message coordinator not ready, rejecting message:', message);\n      sendResponse({ success: false, error: 'Coordinator not ready' });\n      return;\n    }\n\n    const { action, type } = message;\n    const messageType = type || action;\n    \n    console.log(`\uD83C\uDFAF Routing message: ${messageType}`);\n\n    // CRITICAL FIX: Find registered handler using frame-aware lookup\n    const handlerInfo = findFrameAwareHandler(messageType);\n    \n    if (handlerInfo && handlerInfo.handler) {\n      console.log(`\uD83D\uDCCB Using handler from: ${handlerInfo.source}`);\n      \n      // Wrap in error boundary if available\n      if (errorBoundary && typeof errorBoundary.safeExecute === 'function') {\n        await errorBoundary.safeExecute('message_handling', async () => {\n          return await handlerInfo.handler(message, sendResponse);\n        }, {\n          operationName: 'message_handling',\n          checkDOMSize: false,\n          maxExecutionTime: 30000 // 30 seconds for complex operations\n        }).catch(error => {\n          console.error(`\u274C Message handling failed for ${messageType}:`, error);\n          sendResponse({ \n            success: false, \n            error: error.message,\n            messageType,\n            fallback: true \n          });\n        });\n      } else {\n        // Basic error handling\n        try {\n          await handlerInfo.handler(message, sendResponse);\n        } catch (error) {\n          console.error(`\u274C Message handling failed for ${messageType}:`, error);\n          sendResponse({ success: false, error: error.message, messageType });\n        }\n      }\n    } else {\n      console.log(`\u2753 No handler found for message type: ${messageType}`);\n      sendResponse({ \n        success: false, \n        error: `No handler registered for message type: ${messageType}`,\n        messageType \n      });\n    }\n  } catch (error) {\n    console.error('\u274C Centralized message routing error:', error);\n    sendResponse({ success: false, error: error.message });\n  } finally {\n    const duration = Date.now() - startTime;\n    console.log(`\u23F1\uFE0F Message routing completed in ${duration}ms for: ${messageType || 'unknown'}`);\n  }\n}\n\n/**\n * CRITICAL FIX: Enhanced utility function that queues handlers during initialization\n * Prevents lost handler registrations during coordinator initialization window\n * Uses frame-aware handler keys to prevent conflicts between frames\n */\nwindow.registerStepTwoMessageHandler = function(messageType, handler, source = 'unknown', priority = 0) {\n  // CRITICAL FIX: Create frame-aware handler key to prevent cross-frame conflicts\n  const frameAwareKey = `${messageType}@${coordinator.frameId}@${source}`;\n  \n  // CRITICAL FIX: Check if coordinator is ready or queue the registration\n  if (!coordinator.initialized || !coordinator.messageHandlers) {\n    console.log(`\uD83D\uDCEC Coordinator not ready, queueing handler for '${messageType}' from ${source} [${coordinator.frameId}]`);\n    \n    // Queue the handler registration for later processing\n    coordinator.queuedHandlers.push({\n      messageType,\n      frameAwareKey,\n      handler,\n      source,\n      priority,\n      timestamp: Date.now()\n    });\n    \n    console.log(`\u2705 Queued handler for '${messageType}' from ${source} (${coordinator.queuedHandlers.length} in queue)`);\n    return true;\n  }\n  \n  // Coordinator is ready, register immediately with frame-aware key\n  coordinator.messageHandlers.set(frameAwareKey, {\n    messageType, // Store original message type for routing\n    handler,\n    source,\n    priority,\n    frameId: coordinator.frameId\n  });\n  \n  console.log(`\u2705 Registered handler for '${messageType}' from ${source} [${coordinator.frameId}]`);\n  return true;\n};\n\n/**\n * CRITICAL FIX: Process queued handler registrations when coordinator becomes ready\n * Ensures no handler registrations are lost during initialization window\n * Updated to handle frame-aware handler keys\n */\nfunction processQueuedHandlers() {\n  if (coordinator.queuedHandlers.length === 0) {\n    console.log('\uD83D\uDCCB No queued handlers to process');\n    return;\n  }\n  \n  console.log(`\uD83D\uDD04 Processing ${coordinator.queuedHandlers.length} queued handler registrations...`);\n  \n  let successCount = 0;\n  let failCount = 0;\n  \n  // Process all queued handlers\n  while (coordinator.queuedHandlers.length > 0) {\n    const queuedHandler = coordinator.queuedHandlers.shift();\n    \n    try {\n      // Register the queued handler with frame-aware key\n      const handlerKey = queuedHandler.frameAwareKey || queuedHandler.messageType;\n      \n      coordinator.messageHandlers.set(handlerKey, {\n        messageType: queuedHandler.messageType, // Store original message type for routing\n        handler: queuedHandler.handler,\n        source: queuedHandler.source,\n        priority: queuedHandler.priority,\n        frameId: coordinator.frameId\n      });\n      \n      console.log(`\u2705 Processed queued handler for '${queuedHandler.messageType}' from ${queuedHandler.source} [${coordinator.frameId}]`);\n      successCount++;\n      \n    } catch (error) {\n      console.error(`\u274C Failed to process queued handler for '${queuedHandler.messageType}':`, error);\n      failCount++;\n    }\n  }\n  \n  console.log(`\uD83D\uDCCA Queue processing complete: ${successCount} successful, ${failCount} failed`);\n}\n\n/**\n * CRITICAL FIX: Find frame-aware handler with intelligent fallback\n * Searches for handlers in priority order: current frame -> any frame -> fallback\n */\nfunction findFrameAwareHandler(messageType) {\n  const currentFrameId = coordinator.frameId;\n  \n  // Strategy 1: Look for handler specific to current frame with any source\n  for (const [handlerKey, handlerInfo] of coordinator.messageHandlers) {\n    if (handlerInfo.messageType === messageType && handlerInfo.frameId === currentFrameId) {\n      console.log(`\uD83C\uDFAF Found frame-specific handler: ${handlerKey}`);\n      return handlerInfo;\n    }\n  }\n  \n  // Strategy 2: Look for handler with same message type from any frame (backward compatibility)\n  for (const [handlerKey, handlerInfo] of coordinator.messageHandlers) {\n    if (handlerInfo.messageType === messageType || handlerKey === messageType) {\n      console.log(`\uD83D\uDD04 Found compatible handler: ${handlerKey}`);\n      return handlerInfo;\n    }\n  }\n  \n  // Strategy 3: Check if there's a direct key match (legacy handlers)\n  const directHandler = coordinator.messageHandlers.get(messageType);\n  if (directHandler) {\n    console.log(`\uD83D\uDCCE Found legacy handler: ${messageType}`);\n    return directHandler;\n  }\n  \n  console.log(`\u2753 No handler found for message type: ${messageType} in frame: ${currentFrameId}`);\n  return null;\n}\n\n// =============================================================================\n// CENTRALIZED MESSAGE HANDLERS - Simplified handlers for coordinator\n// =============================================================================\n\n/**\n * Simple ping handler\n */\nasync function handlePing(message, sendResponse) {\n  sendResponse({ success: true, ready: extensionReady, coordinator: coordinator.ready });\n}\n\n// REMOVED: Duplicate handleCheckOrchestratorStatus function - using the comprehensive version below\n\n/**\n * Main message handler - Routes messages to appropriate handlers\n */\nasync function handleMessage(message, sender, sendResponse) {\n  const startTime = Date.now();\n  try {\n    if (!extensionReady) {\n      console.warn('\u26A0\uFE0F Content script not ready, rejecting message:', message);\n      sendResponse({ success: false, error: 'Content script not ready' });\n      return;\n    }\n\n    const { action, type } = message;\n    const messageType = type || action;\n    \n    console.log(`\uD83C\uDFAF Processing message: ${messageType}`);\n\n    switch (messageType) {\n      case 'ping':\n        sendResponse({ success: true, ready: coordinatorState.ready });\n        break;\n\n      case 'check_orchestrator_status':\n        await handleCheckOrchestratorStatus(sendResponse);\n        break;\n\n      case 'getPageStatus':\n        await handleGetPageStatus(sendResponse);\n        break;\n\n      case 'quickScan':\n        await handleQuickScan(message, sendResponse);\n        break;\n\n      case 'advancedScan':\n        await handleAdvancedScan(message, sendResponse);\n        break;\n\n      case 'enhancedGalleryDetection':\n        await handleEnhancedGalleryDetection(message, sendResponse);\n        break;\n\n      case 'sitePatternAnalysis':\n        await handleSitePatternAnalysis(message, sendResponse);\n        break;\n\n      case 'lazyImageDetection':\n        await handleLazyImageDetection(message, sendResponse);\n        break;\n\n      case 'toggleSelector':\n        await handleToggleSelector(sendResponse);\n        break;\n\n      case 'testSelector':\n        await handleTestSelector(message, sendResponse);\n        break;\n\n      case 'clearHighlights':\n        await handleClearHighlights(sendResponse);\n        break;\n\n      // CRITICAL: Add missing orchestrator_score_element handler\n      case 'orchestrator_score_element':\n        await handleOrchestratorScoreElement(message, sendResponse);\n        break;\n\n      // Add missing legacy handlers to prevent message handler gaps\n      case 'scrape_images':\n        await handleScrapeImages(message, sendResponse);\n        break;\n\n      case 'find_gallery':\n        await handleFindGallery(message, sendResponse);\n        break;\n\n      case 'start_element_picker':\n        await handleStartElementPicker(message, sendResponse);\n        break;\n\n      case 'stop_element_picker':\n        await handleStopElementPicker(message, sendResponse);\n        break;\n\n      case 'start_smart_selector':\n        await handleStartSmartSelector(message, sendResponse);\n        break;\n\n      case 'stop_smart_selector':\n        await handleStopSmartSelector(message, sendResponse);\n        break;\n\n      case 'smart_find_images':\n        await handleSmartFindImages(message, sendResponse);\n        break;\n\n      case 'start_interactive_selection':\n        await handleStartInteractiveSelection(message, sendResponse);\n        break;\n\n      // Missing Smart Selector handlers added for complete workflow\n      case 'trigger_auto_expand':\n        await handleTriggerAutoExpand(message, sendResponse);\n        break;\n\n      case 'remove_last_sample':\n        await handleRemoveLastSample(message, sendResponse);\n        break;\n\n      case 'clear_smart_selection':\n        await handleClearSmartSelection(message, sendResponse);\n        break;\n\n      case 'smart_selector_update':\n        await handleSmartSelectorUpdate(message, sendResponse);\n        break;\n\n      case 'pattern_analysis_complete':\n        await handlePatternAnalysisComplete(message, sendResponse);\n        break;\n\n      default:\n        console.log('\u2753 Unknown message type:', messageType);\n        sendResponse({ success: true, message: 'Message received but not handled', messageType });\n    }\n  } catch (error) {\n    console.error('\u274C Message handling error:', error);\n    sendResponse({ success: false, error: error.message });\n  } finally {\n    const duration = Date.now() - startTime;\n    console.log(`\u23F1\uFE0F Message processing completed in ${duration}ms for: ${messageType || 'unknown'}`);\n  }\n}\n\n/**\n * CRITICAL: Handle orchestrator status check - This is what the dashboard expects\n * FIXED: Now includes strict gating for critical modules and proper availability checking\n */\nasync function handleCheckOrchestratorStatus(sendResponse) {\n  try {\n    // Check component availability with strict validation\n    const components = {\n      errorHandler: typeof window.StepTwoErrorHandler !== 'undefined',\n      validator: typeof window.inputValidator !== 'undefined',\n      selectorUtils: typeof window.StepTwoSelectorUtils !== 'undefined',\n      robustHelpers: typeof window.RobustHelpers !== 'undefined',\n      advancedCollector: typeof window.AdvancedCollectorSystem !== 'undefined',\n      smartSelector: typeof window.EnhancedSmartSelectorSystem !== 'undefined'\n    };\n\n    // Define critical components - orchestrator is not available without these\n    const criticalComponents = ['errorHandler', 'validator', 'selectorUtils'];\n    const missingCritical = criticalComponents.filter(comp => !components[comp]);\n    \n    // Determine availability based on critical component check\n    const available = missingCritical.length === 0;\n    const ready = available && extensionReady && initialized;\n    \n    // Perform lightweight self-test for additional validation\n    const selfTestResult = await performOrchestratorSelfTest();\n    \n    const status = {\n      available: available && selfTestResult.passed,\n      ready: ready && selfTestResult.passed,\n      initialized: initialized,\n      url: window.location.href,\n      timestamp: Date.now(),\n      components: components,\n      criticalComponents: {\n        required: criticalComponents,\n        missing: missingCritical,\n        allPresent: missingCritical.length === 0\n      },\n      selfTest: selfTestResult,\n      readyReason: available ? (ready ? 'All systems operational' : 'Components loaded but not ready') : `Missing critical components: ${missingCritical.join(', ')}`\n    };\n\n    console.log(available ? '\u2705 Orchestrator status check - AVAILABLE:' : '\u274C Orchestrator status check - NOT AVAILABLE:', status);\n    sendResponse({ success: true, status });\n  } catch (error) {\n    console.error('\u274C Orchestrator status check failed:', error);\n    sendResponse({ \n      success: false, \n      error: error.message,\n      status: { \n        available: false, \n        ready: false,\n        error: error.message,\n        timestamp: Date.now()\n      }\n    });\n  }\n}\n\n/**\n * Perform lightweight self-test to validate orchestrator dependencies\n * ADDED: Self-test function for orchestrator status validation\n */\nasync function performOrchestratorSelfTest() {\n  const testResults = {\n    passed: true,\n    tests: {},\n    errors: []\n  };\n\n  try {\n    // Test 1: Chrome runtime availability\n    testResults.tests.chromeRuntime = {\n      passed: typeof chrome !== 'undefined' && chrome.runtime,\n      description: 'Chrome runtime API available'\n    };\n    if (!testResults.tests.chromeRuntime.passed) {\n      testResults.errors.push('Chrome runtime API not available');\n      testResults.passed = false;\n    }\n\n    // Test 2: Essential DOM APIs\n    testResults.tests.domApis = {\n      passed: typeof document !== 'undefined' && typeof document.querySelectorAll === 'function',\n      description: 'Essential DOM APIs available'\n    };\n    if (!testResults.tests.domApis.passed) {\n      testResults.errors.push('Essential DOM APIs not available');\n      testResults.passed = false;\n    }\n\n    // Test 3: Error handler functional\n    testResults.tests.errorHandler = {\n      passed: typeof window.StepTwoErrorHandler !== 'undefined' && window.StepTwoErrorHandler.initialized,\n      description: 'Error handling system functional'\n    };\n    if (!testResults.tests.errorHandler.passed) {\n      testResults.errors.push('Error handling system not functional');\n      testResults.passed = false;\n    }\n\n    // Test 4: Basic selector functionality\n    try {\n      const testElement = document.createElement('div');\n      const testResult = testElement.tagName === 'DIV';\n      testResults.tests.basicSelectors = {\n        passed: testResult,\n        description: 'Basic element selection functional'\n      };\n      if (!testResult) {\n        testResults.errors.push('Basic element selection not working');\n        testResults.passed = false;\n      }\n    } catch (error) {\n      testResults.tests.basicSelectors = {\n        passed: false,\n        description: 'Basic element selection functional'\n      };\n      testResults.errors.push(`Basic element selection failed: ${error.message}`);\n      testResults.passed = false;\n    }\n\n    testResults.timestamp = Date.now();\n    testResults.summary = testResults.passed ? 'All self-tests passed' : `${testResults.errors.length} test(s) failed`;\n\n    console.log(testResults.passed ? '\u2705 Orchestrator self-test PASSED' : '\u274C Orchestrator self-test FAILED:', testResults);\n    return testResults;\n\n  } catch (error) {\n    console.error('\u274C Self-test execution failed:', error);\n    return {\n      passed: false,\n      tests: {},\n      errors: [`Self-test execution failed: ${error.message}`],\n      timestamp: Date.now(),\n      summary: 'Self-test execution failed'\n    };\n  }\n}\n\n/**\n * Handle orchestrator score element - CRITICAL missing handler\n */\nasync function handleOrchestratorScoreElement(message, sendResponse) {\n  try {\n    const { elementData, options = {} } = message;\n    \n    if (!elementData || !elementData.element) {\n      sendResponse({ \n        success: false, \n        error: 'Invalid element data provided' \n      });\n      return;\n    }\n\n    // Use EnhancedSmartSelectorSystem for scoring if available\n    if (window.EnhancedSmartSelectorSystem) {\n      try {\n        const selector = new window.EnhancedSmartSelectorSystem();\n        const result = await selector.scoreElement(elementData.element, options);\n        \n        sendResponse({\n          success: true,\n          confidence: result.confidence || 0.5,\n          confidenceTier: result.confidenceTier || 'medium',\n          patternAnalysis: result.patternAnalysis || {},\n          elementId: elementData.elementId || generateElementId()\n        });\n      } catch (error) {\n        console.warn('\u274C Enhanced selector scoring failed, using fallback:', error);\n        // Fallback scoring\n        const fallbackScore = calculateFallbackConfidence(elementData);\n        sendResponse({\n          success: true,\n          confidence: fallbackScore,\n          confidenceTier: fallbackScore >= 0.75 ? 'high' : fallbackScore >= 0.5 ? 'medium' : 'low',\n          patternAnalysis: { method: 'fallback' },\n          elementId: elementData.elementId || generateElementId()\n        });\n      }\n    } else {\n      // Use basic scoring when enhanced system not available\n      const fallbackScore = calculateFallbackConfidence(elementData);\n      sendResponse({\n        success: true,\n        confidence: fallbackScore,\n        confidenceTier: fallbackScore >= 0.75 ? 'high' : fallbackScore >= 0.5 ? 'medium' : 'low',\n        patternAnalysis: { method: 'basic_fallback' },\n        elementId: elementData.elementId || generateElementId()\n      });\n    }\n  } catch (error) {\n    console.error('\u274C Orchestrator score element failed:', error);\n    sendResponse({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Helper function for fallback confidence calculation\nfunction calculateFallbackConfidence(elementData) {\n  let confidence = 0.5; // Base confidence\n  \n  if (elementData.element && elementData.element.tagName) {\n    if (elementData.element.tagName === 'IMG') confidence += 0.2;\n    if (elementData.element.className && elementData.element.className.includes('gallery')) confidence += 0.1;\n    if (elementData.element.hasAttribute && elementData.element.hasAttribute('data-src')) confidence += 0.1;\n  }\n  \n  if (elementData.src || elementData.url) {\n    const url = elementData.src || elementData.url;\n    if (url.includes('gallery') || url.includes('photo')) confidence += 0.1;\n    if (/\\.(jpg|jpeg|png|webp)$/i.test(url)) confidence += 0.1;\n  }\n  \n  return Math.min(confidence, 1.0);\n}\n\n// Helper function to generate element IDs\nfunction generateElementId() {\n  return 'elem_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 5);\n}\n\n/**\n * Get page status - simplified but functional\n */\nasync function handleGetPageStatus(sendResponse) {\n  try {\n    const images = document.querySelectorAll('img');\n    const galleryDetected = detectSimpleGallery();\n    \n    sendResponse({\n      success: true,\n      itemCount: images.length,\n      pageStatus: galleryDetected ? 'Gallery detected' : 'Ready to scan',\n      isGalleryPage: galleryDetected,\n      url: window.location.href\n    });\n  } catch (error) {\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n/**\n * Quick scan handler\n */\nasync function handleQuickScan(message, sendResponse) {\n  try {\n    console.log('\uD83D\uDE80 Starting quick scan...');\n\n    // Use AdvancedCollectorSystem if available\n    if (window.AdvancedCollectorSystem) {\n      const collector = new window.AdvancedCollectorSystem({\n        concurrency: 3,\n        timeout: 15000,\n        maxPages: 1\n      });\n      \n      const results = await collector.collectImages({\n        ...message.settings,\n        maxPages: 1\n      });\n      \n      sendResponse({\n        success: true,\n        itemCount: results.images ? results.images.length : 0,\n        items: results.images,\n        stats: results.metrics\n      });\n      \n      console.log('\u2705 Quick scan completed:', results.images?.length || 0, 'items');\n      return;\n    }\n\n    // Fallback to basic scan\n    const images = Array.from(document.querySelectorAll('img')).map(img => ({\n      url: img.src,\n      alt: img.alt,\n      dimensions: {\n        width: img.width,\n        height: img.height\n      }\n    })).filter(img => img.url);\n\n    sendResponse({\n      success: true,\n      itemCount: images.length,\n      items: images,\n      stats: { totalFound: images.length }\n    });\n\n    console.log('\u2705 Quick scan completed (fallback):', images.length, 'items');\n  } catch (error) {\n    console.error('\u274C Quick scan failed:', error);\n    sendResponse({ success: false, error: error.message, itemCount: 0 });\n  }\n}\n\n/**\n * Advanced scan handler\n */\nasync function handleAdvancedScan(message, sendResponse) {\n  try {\n    console.log('\uD83D\uDE80 Starting advanced scan...');\n\n    // Use AdvancedCollectorSystem if available\n    if (window.AdvancedCollectorSystem) {\n      const collector = new window.AdvancedCollectorSystem({\n        concurrency: message.settings?.concurrency || 5,\n        timeout: message.settings?.timeout || 30000,\n        maxPages: message.settings?.maxPages || 5\n      });\n      \n      const results = await collector.collectImages({\n        selector: message.selector,\n        ...message.settings\n      });\n      \n      sendResponse({\n        success: true,\n        itemCount: results.images ? results.images.length : 0,\n        items: results.images,\n        stats: results.metrics\n      });\n      \n      console.log('\u2705 Advanced scan completed:', results.images?.length || 0, 'items');\n      return;\n    }\n\n    // Fallback to basic advanced scan\n    const selector = message.selector || 'img';\n    const elements = document.querySelectorAll(selector);\n    const items = Array.from(elements).map(el => {\n      if (el.tagName === 'IMG') {\n        return {\n          url: el.src,\n          alt: el.alt,\n          dimensions: { width: el.width, height: el.height }\n        };\n      } else {\n        // Try to extract background images\n        const style = window.getComputedStyle(el);\n        const backgroundImage = style.backgroundImage;\n        if (backgroundImage && backgroundImage !== 'none') {\n          const matches = backgroundImage.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n          return matches ? { url: matches[1], source: 'background' } : null;\n        }\n      }\n      return null;\n    }).filter(Boolean);\n    \n    sendResponse({\n      success: true,\n      itemCount: items.length,\n      items: items,\n      stats: { totalFound: items.length }\n    });\n\n    console.log('\u2705 Advanced scan completed (fallback):', items.length, 'items');\n  } catch (error) {\n    console.error('\u274C Advanced scan failed:', error);\n    sendResponse({ success: false, error: error.message, itemCount: 0 });\n  }\n}\n\n/**\n * Enhanced gallery detection handler\n */\nasync function handleEnhancedGalleryDetection(message, sendResponse) {\n  try {\n    console.log('\uD83D\uDD0D Starting enhanced gallery detection...');\n\n    // Use enhanced smart selector if available\n    if (window.EnhancedSmartSelectorSystem) {\n      const smartSelector = new window.EnhancedSmartSelectorSystem();\n      const galleryResults = await smartSelector.findGalleryImages({\n        maxImages: message.maxImages || 500,\n        minSize: message.minSize || 100\n      });\n\n      sendResponse({\n        success: true,\n        site: galleryResults.site || window.location.hostname,\n        galleryImages: galleryResults.images || [],\n        totalFound: galleryResults.totalFound || 0,\n        validCount: galleryResults.validCount || 0,\n        processingTime: galleryResults.processingTime || 0,\n        patterns: galleryResults.patterns || [],\n        isGalleryPage: (galleryResults.validCount || 0) > 3\n      });\n\n      console.log(`\u2705 Enhanced gallery detection completed: ${galleryResults.validCount || 0} valid images found`);\n      return;\n    }\n\n    // Fallback to simple gallery detection\n    const galleryDetected = detectSimpleGallery();\n    const images = document.querySelectorAll('img');\n    \n    sendResponse({\n      success: true,\n      site: window.location.hostname,\n      galleryImages: Array.from(images).slice(0, 50).map(img => ({\n        url: img.src,\n        alt: img.alt\n      })),\n      totalFound: images.length,\n      validCount: images.length,\n      processingTime: 10,\n      patterns: ['img'],\n      isGalleryPage: galleryDetected\n    });\n\n    console.log(`\u2705 Enhanced gallery detection completed (fallback): ${images.length} images found`);\n  } catch (error) {\n    console.error('\u274C Enhanced gallery detection failed:', error);\n    sendResponse({ \n      success: false, \n      error: error.message,\n      fallback: detectSimpleGallery()\n    });\n  }\n}\n\n/**\n * Site pattern analysis handler\n */\nasync function handleSitePatternAnalysis(message, sendResponse) {\n  try {\n    console.log('\uD83C\uDF10 Starting site pattern analysis...');\n\n    const siteInfo = {\n      currentSite: window.location.hostname,\n      detectedPatterns: ['img', '[data-src]', 'picture'],\n      urlPatterns: {\n        hostname: window.location.hostname,\n        pathname: window.location.pathname\n      },\n      galleryContainers: Array.from(document.querySelectorAll('.gallery, .grid, .photos, .images')).length\n    };\n\n    const pageAnalysis = {\n      url: window.location.href,\n      hostname: window.location.hostname,\n      title: document.title,\n      hasInfiniteScroll: document.querySelector('[data-infinite], .infinite-scroll, .load-more') !== null,\n      hasLazyLoading: document.querySelector('[data-src], [loading=\"lazy\"], .lazy') !== null,\n      estimatedImageCount: document.querySelectorAll('img, [data-src]').length\n    };\n\n    sendResponse({\n      success: true,\n      siteInfo,\n      pageAnalysis\n    });\n\n    console.log('\u2705 Site pattern analysis completed for:', siteInfo.currentSite);\n  } catch (error) {\n    console.error('\u274C Site pattern analysis failed:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n/**\n * Lazy image detection handler\n */\nasync function handleLazyImageDetection(message, sendResponse) {\n  try {\n    console.log('\uD83D\uDC41\uFE0F Starting lazy image detection...');\n\n    const lazyImages = document.querySelectorAll('[data-src], [data-lazy], [loading=\"lazy\"], .lazy, .lazyload');\n    const visibleLazyImages = Array.from(lazyImages).filter(img => {\n      const rect = img.getBoundingClientRect();\n      return rect.top < window.innerHeight && rect.bottom > 0;\n    });\n\n    sendResponse({\n      success: true,\n      totalLazyImages: lazyImages.length,\n      visibleLazyImages: visibleLazyImages.length,\n      patterns: Array.from(new Set(Array.from(lazyImages).map(img => img.className).filter(c => c)))\n    });\n\n    console.log(`\u2705 Lazy image detection completed: ${lazyImages.length} lazy images found`);\n  } catch (error) {\n    console.error('\u274C Lazy image detection failed:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n/**\n * Toggle selector mode handler\n */\nasync function handleToggleSelector(sendResponse) {\n  try {\n    // Use EnhancedSmartSelectorSystem if available\n    if (window.EnhancedSmartSelectorSystem) {\n      const smartSelector = new window.EnhancedSmartSelectorSystem();\n      await smartSelector.startSelectionMode();\n      sendResponse({ success: true, message: 'Smart selector mode activated' });\n      return;\n    }\n\n    // Fallback message\n    sendResponse({ success: false, error: 'Element picker not available' });\n  } catch (error) {\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n/**\n * Test selector handler\n */\nasync function handleTestSelector(message, sendResponse) {\n  try {\n    const { selector } = message;\n    if (!selector) {\n      sendResponse({ success: false, error: 'No selector provided' });\n      return;\n    }\n\n    const elements = document.querySelectorAll(selector);\n    \n    // Highlight elements\n    elements.forEach(el => {\n      el.style.outline = '2px solid #ff6b6b';\n      el.style.backgroundColor = 'rgba(255, 107, 107, 0.2)';\n    });\n\n    sendResponse({\n      success: true,\n      count: elements.length,\n      selector: selector\n    });\n  } catch (error) {\n    sendResponse({\n      success: false,\n      error: `Invalid selector: ${error.message}`,\n      selector: message.selector\n    });\n  }\n}\n\n/**\n * Clear highlights handler\n */\nasync function handleClearHighlights(sendResponse) {\n  try {\n    // Remove all test highlights\n    const highlightedElements = document.querySelectorAll('[style*=\"outline\"][style*=\"background-color\"]');\n    highlightedElements.forEach(el => {\n      el.style.outline = '';\n      el.style.backgroundColor = '';\n    });\n\n    sendResponse({ success: true, message: 'Highlights cleared' });\n  } catch (error) {\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n/**\n * Simple gallery detection - fallback method\n */\nfunction detectSimpleGallery() {\n  try {\n    const images = document.querySelectorAll('img');\n    const imageContainers = document.querySelectorAll('div img, article img, section img');\n    \n    // Simple heuristics\n    if (images.length > 10) return true;\n    if (imageContainers.length > 5) return true;\n    \n    // Check for common gallery patterns\n    const galleryIndicators = [\n      'gallery', 'photo', 'image', 'picture', 'thumb',\n      'grid', 'masonry', 'lightbox', 'carousel'\n    ];\n    \n    const bodyClass = document.body.className.toLowerCase();\n    const bodyId = document.body.id.toLowerCase();\n    \n    return galleryIndicators.some(indicator => \n      bodyClass.includes(indicator) || bodyId.includes(indicator)\n    );\n  } catch (error) {\n    console.error('Gallery detection error:', error);\n    return false;\n  }\n}\n\n// ============================================================================= \n// SUPPORT FUNCTIONS FOR ORCHESTRATOR INITIALIZATION\n// =============================================================================\n\n/**\n * Initialize enterprise error boundary system\n */\nasync function initializeErrorBoundary() {\n  try {\n    // Use existing StepTwoErrorHandler if available\n    if (window.StepTwoErrorHandler) {\n      errorBoundary = window.StepTwoErrorHandler;\n      console.log('\u2705 Using existing error handler for orchestrator');\n      return;\n    }\n\n    console.log('\u26A0\uFE0F Error boundary not available, using basic error handling');\n  } catch (error) {\n    console.error('\u274C Failed to initialize error boundary:', error);\n  }\n}\n\n/**\n * Initialize performance monitoring\n */\nasync function initializePerformanceMonitoring() {\n  try {\n    // Check for existing performance monitor\n    if (window.globalProductionMonitor) {\n      performanceMonitor = window.globalProductionMonitor;\n      performanceMonitor.info('Orchestrator initialization started', {\n        url: window.location.href,\n        timestamp: startupTime\n      });\n      console.log('\u2705 Performance monitoring initialized for orchestrator');\n    } else {\n      console.log('\u26A0\uFE0F Performance monitor not available');\n    }\n  } catch (error) {\n    console.error('\u274C Failed to initialize performance monitoring:', error);\n  }\n}\n\n/**\n * Wait for DOM ready with timeout and retry\n */\nasync function waitForDOMReady() {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      reject(new Error('DOM ready timeout'));\n    }, 10000); // 10 second timeout\n\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        clearTimeout(timeout);\n        resolve();\n      });\n    } else {\n      clearTimeout(timeout);\n      resolve();\n    }\n  });\n}\n\n/**\n * Perform pre-initialization checks\n */\nasync function performPreInitChecks() {\n  // Check if we're in a valid environment\n  if (!window || !document) {\n    throw new Error('Invalid browser environment');\n  }\n\n  // Check Chrome extension context\n  if (typeof chrome === 'undefined' || !chrome.runtime) {\n    throw new Error('Chrome extension context not available');\n  }\n\n  // Check DOM size for performance\n  const domElementCount = document.querySelectorAll('*').length;\n  if (domElementCount > 5000) {\n    console.warn(`\u26A0\uFE0F Large DOM detected: ${domElementCount} elements`);\n    \n    if (performanceMonitor) {\n      performanceMonitor.warn('Large DOM detected during orchestrator initialization', {\n        elementCount: domElementCount,\n        url: window.location.href\n      });\n    }\n  }\n\n  console.log('\u2705 Pre-initialization checks completed');\n}\n\n/**\n * Enhanced module availability check with fallbacks\n */\nasync function checkModuleAvailability() {\n  const requiredModules = [\n    { \n      name: 'DEBUG', \n      property: 'DEBUG',\n      critical: false,\n      fallback: () => ({ isEnabled: () => true, log: console.log })\n    },\n    { \n      name: 'ErrorHandler', \n      property: 'StepTwoErrorHandler',\n      critical: false,\n      fallback: () => ({ handleError: console.error })\n    },\n    { \n      name: 'AdvancedCollectorSystem', \n      property: 'AdvancedCollectorSystem',\n      critical: false,\n      fallback: null\n    }\n  ];\n\n  const optionalModules = [\n    { name: 'SelectorUtils', property: 'StepTwoSelectorUtils', critical: false },\n    { name: 'RobustHelpers', property: 'RobustHelpers', critical: false },\n    { name: 'EnhancedSmartSelector', property: 'EnhancedSmartSelectorSystem', critical: false }\n  ];\n\n  const allModules = [...requiredModules, ...optionalModules];\n  const missing = [];\n  const criticalMissing = [];\n\n  for (const module of allModules) {\n    const available = typeof window[module.property] !== 'undefined';\n    \n    if (!available) {\n      missing.push(module.name);\n      \n      if (module.critical) {\n        criticalMissing.push(module.name);\n      } else if (module.fallback) {\n        // Set up fallback\n        try {\n          window[module.property] = module.fallback();\n          console.log(`\u2705 Fallback initialized for ${module.name}`);\n        } catch (error) {\n          console.warn(`\u26A0\uFE0F Failed to initialize fallback for ${module.name}:`, error);\n        }\n      }\n    }\n  }\n\n  if (missing.length > 0) {\n    console.warn('\u26A0\uFE0F Some orchestrator modules not loaded:', missing);\n  }\n\n  return {\n    success: criticalMissing.length === 0,\n    critical: criticalMissing.length > 0,\n    missing,\n    criticalMissing,\n    totalChecked: allModules.length\n  };\n}\n\n/**\n * Initialize core systems with error boundaries\n */\nasync function initializeCoreSystems() {\n  const systems = [\n    {\n      name: 'Smart Selector System',\n      init: () => {\n        return typeof window.EnhancedSmartSelectorSystem !== 'undefined';\n      }\n    },\n    {\n      name: 'Advanced Collector System',\n      init: () => {\n        return typeof window.AdvancedCollectorSystem !== 'undefined';\n      }\n    },\n    {\n      name: 'DOM Observers',\n      init: () => {\n        if (window.DynamicContentObserver) {\n          // Don't auto-start observer, just verify it's available\n          return true;\n        }\n        return false;\n      }\n    }\n  ];\n\n  for (const system of systems) {\n    try {\n      const success = system.init();\n      if (success) {\n        console.log(`\u2705 ${system.name} available`);\n      } else {\n        console.warn(`\u26A0\uFE0F ${system.name} not available`);\n      }\n    } catch (error) {\n      console.error(`\u274C Failed to initialize ${system.name}:`, error);\n    }\n  }\n}\n\n/**\n * Perform post-initialization validation\n */\nasync function performPostInitValidation() {\n  // Validate message listener is working\n  try {\n    if (!chrome.runtime.onMessage.hasListeners()) {\n      console.warn('\u26A0\uFE0F No message listeners detected after setup');\n    } else {\n      console.log('\u2705 Message listeners validated');\n    }\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Could not validate message listeners:', error);\n  }\n\n  // Test basic DOM operations\n  try {\n    const testElement = document.querySelector('body');\n    if (!testElement) {\n      throw new Error('Cannot access document body');\n    }\n    console.log('\u2705 DOM access validated');\n  } catch (error) {\n    console.error('\u274C DOM access validation failed:', error);\n  }\n}\n\n/**\n * Report successful initialization\n */\nfunction reportInitializationSuccess(initTime) {\n  const report = {\n    success: true,\n    initializationTime: initTime,\n    extensionReady: extensionReady,\n    initialized: initialized,\n    url: window.location.href,\n    timestamp: Date.now()\n  };\n\n  if (performanceMonitor) {\n    performanceMonitor.info('Orchestrator initialization completed', report);\n  }\n\n  // Optionally notify background script of successful initialization\n  try {\n    chrome.runtime.sendMessage({\n      action: 'orchestrator_ready',\n      report\n    }).catch(error => {\n      // Don't fail initialization if background communication fails\n      console.warn('\u26A0\uFE0F Could not notify background script:', error);\n    });\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Background communication not available:', error);\n  }\n}\n\n/**\n * Handle initialization errors\n */\nasync function handleInitializationError(error) {\n  console.error(`\u274C Orchestrator initialization failed (attempt ${initializationAttempts}):`, error);\n\n  if (errorBoundary) {\n    errorBoundary.handleError(error, 'Orchestrator Initialization', {\n      attempt: initializationAttempts,\n      url: window.location.href\n    }, 'high');\n  }\n\n  // Try to set up basic message handling even if full initialization failed\n  if (initializationAttempts >= MAX_INITIALIZATION_ATTEMPTS) {\n    console.log('\uD83D\uDD04 Attempting emergency message handler setup...');\n    \n    // CRITICAL: Check if a listener is already registered before setting up emergency handler\n    if (window.__STEPTWO_MESSAGE_LISTENER_REGISTERED) {\n      console.log('\u26A0\uFE0F Message listener already registered, skipping emergency handler');\n      return;\n    }\n    \n    try {\n      chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        console.log('\uD83D\uDCE8 Emergency message handler:', message);\n        \n        if (message.action === 'check_orchestrator_status' || message.type === 'check_orchestrator_status') {\n          sendResponse({\n            success: false,\n            error: 'Orchestrator initialization failed',\n            status: {\n              available: false,\n              ready: false,\n              error: error.message\n            }\n          });\n        } else {\n          sendResponse({\n            success: false,\n            error: 'Content script not properly initialized'\n          });\n        }\n        return true;\n      });\n      \n      // Mark listener as registered\n      window.__STEPTWO_MESSAGE_LISTENER_REGISTERED = true;\n      console.log('\u2705 Emergency message handler set up');\n    } catch (emergencyError) {\n      console.error('\u274C Emergency handler setup failed:', emergencyError);\n    }\n  }\n}\n\nconsole.log('\u2705 Content Script Orchestrator functionality loaded');\n\n// =============================================================================\n// END OF CONTENT BUNDLE\n// =============================================================================\n\nconsole.log('\uD83C\uDF86 STEPTWO Gallery Scraper Content Bundle v2.0 Ready!');\nconsole.log('\uD83D\uDCCA Bundle includes:', [\n  'Debug Config',\n  'Error Handling', \n  'Input Validation',\n  'Library Utilities',\n  'ServiceWorker Fetch',\n  'Content Core',\n  'DOM Observers',\n  'Scraper Core',\n  'Advanced Extractor',\n  'Smart Selection',\n  'Element Picker',\n  'Initialization'\n].join(', '));\n\n// simple-injector.js - Enhanced content script initialization with enterprise reliability\n// Enterprise-grade error handling, performance safeguards, and comprehensive monitoring\n\nconsole.log('\uD83D\uDE80 STEPTWO Enhanced Content Script loading...');\n\n// Use coordinator state instead of creating duplicate variables\n// Access through coordinator object to prevent conflicts\nconst coordinatorState = window.__STEPTWO_MESSAGE_COORDINATOR;\n\n// CRITICAL: Wait for centralized coordinator instead of creating own listeners\n// This prevents race conditions and duplicate responses by using centralized system\nlet coordinatorCheckAttempts = 0;\nconst MAX_COORDINATOR_WAIT_ATTEMPTS = 10;\n\n// Check if we're in a Chrome extension context\nif (typeof chrome === 'undefined' || !chrome.runtime || !chrome.runtime.getURL) {\n  console.log('\uD83C\uDF10 Not in Chrome extension context, exiting');\n} else {\n  initializeContentScript();\n}\n\n// Enhanced initialization with enterprise error handling and performance monitoring\nasync function initializeContentScript() {\n  coordinatorState.initializationAttempts++;\n  \n  if (coordinatorState.initializationAttempts > coordinatorState.MAX_ATTEMPTS) {\n    console.error('\u274C Max initialization attempts exceeded');\n    return;\n  }\n\n  try {\n    console.log(`\uD83D\uDD04 Initializing STEPTWO content script (attempt ${coordinatorState.initializationAttempts})...`);\n\n    // Initialize enterprise error boundary first\n    await initializeErrorBoundary();\n    \n    // Initialize performance monitoring\n    await initializePerformanceMonitoring();\n    \n    // Wait for DOM to be ready with timeout\n    await waitForDOMReady();\n    \n    // Perform pre-initialization checks\n    await performPreInitChecks();\n\n    // Enhanced module availability check with fallbacks\n    const moduleCheckResult = await checkModuleAvailability();\n    \n    if (!moduleCheckResult.success && moduleCheckResult.critical) {\n      throw new Error(`Critical modules missing: ${moduleCheckResult.missing.join(', ')}`);\n    }\n\n    // Register with centralized message coordinator instead of setting up own listener\n    await registerWithMessageCoordinator();\n\n    // Initialize core systems with error boundaries\n    await initializeCoreSystems();\n    \n    // Perform post-initialization validation\n    await performPostInitValidation();\n\n    // Update coordinator state instead of local variables\n    coordinatorState.initialized = true;\n    coordinatorState.ready = true;\n    \n    const initTime = Date.now() - coordinatorState.startupTime;\n    console.log(`\u2705 STEPTWO content script initialized successfully in ${initTime}ms`);\n    \n    // Report successful initialization\n    reportInitializationSuccess(initTime);\n\n  } catch (error) {\n    await handleInitializationError(error);\n  }\n}\n\n/**\n * Register content script specific fallback strategies\n */\nfunction registerContentScriptFallbacks() {\n  if (!errorBoundary) return;\n\n  // Element selection fallback\n  errorBoundary.registerFallback('element_selection', async (error, config) => {\n    console.log('\uD83D\uDD04 Using basic element selection fallback');\n    return document.querySelectorAll('img, a, div');\n  });\n\n  // Message handling fallback\n  errorBoundary.registerFallback('message_handling', async (error, config) => {\n    console.log('\uD83D\uDD04 Using basic message handling fallback');\n    return { success: false, error: error.message, fallback: true };\n  });\n\n  // Scraping operation fallback\n  errorBoundary.registerFallback('scraping_operation', async (error, config) => {\n    console.log('\uD83D\uDD04 Using basic scraping fallback');\n    const images = document.querySelectorAll('img[src]');\n    return {\n      items: Array.from(images).map(img => ({\n        src: img.src,\n        alt: img.alt || '',\n        fallback: true\n      })),\n      fallback: true\n    };\n  });\n\n  console.log('\u2705 Content script fallback strategies registered');\n}\n\n/**\n * Enhanced message handler with error boundaries\n */\nasync function handleMessageSafely(message, sender, sendResponse) {\n  const startTime = Date.now();\n  \n  try {\n    console.log('\uD83D\uDCE8 Enhanced content script received message:', {\n      action: message.action || message.type,\n      sender: sender.tab ? 'tab' : 'extension',\n      url: window.location.href\n    });\n\n    if (performanceMonitor) {\n      performanceMonitor.debug('Message received', {\n        action: message.action || message.type,\n        timestamp: startTime\n      });\n    }\n\n    // Use existing message handler but with enhanced error reporting\n    const result = await handleMessage(message, sender, sendResponse);\n    \n    const duration = Date.now() - startTime;\n    if (performanceMonitor && duration > 1000) {\n      performanceMonitor.warn('Slow message handling', {\n        action: message.action || message.type,\n        duration\n      });\n    }\n\n    return result;\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    if (performanceMonitor) {\n      performanceMonitor.error('Message handling error', {\n        action: message.action || message.type,\n        error: error.message,\n        duration\n      });\n    }\n    \n    throw error;\n  }\n}\n\nconsole.log('\u2705 STEPTWO Enhanced Content Script loaded with enterprise reliability');// enhanced-image-manager.js - Comprehensive Image Manager for STEPTWO\n// Ports efficient imageManager system from reference extension with enhanced capabilities\n// Integrates with existing SmartPatternRecognition and AdvancedCollectorSystem\n\nconsole.log('\uD83D\uDE80 Loading Enhanced Image Manager...');\n\n/**\n * Enhanced Image Manager - Ported from reference \"Image Downloaderb\" extension\n * Implements comprehensive image detection with modern enhancements\n */\nclass EnhancedImageManager {\n  constructor(options = {}) {\n    this.options = {\n      // Performance settings\n      maxNodesPerMethod: options.maxNodesPerMethod || 2000,\n      timeBudgetPerMethod: options.timeBudgetPerMethod || 8000,\n      enablePerformanceMonitoring: options.enablePerformanceMonitoring !== false,\n      \n      // Detection method toggles\n      enableShadowDOM: options.enableShadowDOM !== false,\n      enableSrcsetDetection: options.enableSrcsetDetection !== false,\n      enableBackgroundImages: options.enableBackgroundImages !== false,\n      enableUrlExtraction: options.enableUrlExtraction !== false,\n      enableInputImages: options.enableInputImages !== false,\n      enableLinkDetection: options.enableLinkDetection !== false,\n      \n      // Quality filtering - More lenient for gallery images\n      minImageWidth: options.minImageWidth || 20, // Reduced from 50 to allow smaller thumbnails\n      minImageHeight: options.minImageHeight || 20, // Reduced from 50 to allow smaller thumbnails\n      allowSmallGalleryImages: options.allowSmallGalleryImages !== false, // New option for gallery context\n      supportedExtensions: options.supportedExtensions || [\n        'jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'ico', \n        'tif', 'apng', 'jfif', 'pjpeg', 'pjp'\n      ],\n      \n      ...options\n    };\n\n    // Image type classification from reference extension\n    this.imageType = {\n      IMG: \"IMG\",\n      TEXT: \"TEXT\", \n      LINK: \"LINK\",\n      INPUT_IMG: \"INPUT_IMG\",\n      BACKGROUND: \"BACKGROUND\"\n    };\n\n    // State management\n    this.imgList = [];\n    this.processedUrls = new Set();\n    this.backgroundUrls = new Set();\n    \n    // Performance metrics\n    this.metrics = {\n      totalFound: 0,\n      duplicatesSkipped: 0,\n      processingTime: 0,\n      methodStats: {\n        standardImages: 0,\n        documentImages: 0,\n        shadowDOMImages: 0,\n        srcsetImages: 0,\n        backgroundImages: 0,\n        urlExtraction: 0,\n        inputImages: 0,\n        linkImages: 0\n      },\n      errors: []\n    };\n\n    // Initialize integration with STEPTWO systems\n    this.smartPatternRecognition = null;\n    this.initializeIntegrations();\n  }\n\n  /**\n   * Initialize integrations with existing STEPTWO systems\n   */\n  async initializeIntegrations() {\n    try {\n      // BUGFIX: Check for shared SmartPatternRecognition to prevent race conditions\n      if (window.__ST?.getSharedDetectionSystem) {\n        this.smartPatternRecognition = window.__ST.getSharedDetectionSystem('smartPatternRecognition');\n        if (this.smartPatternRecognition) {\n          console.log('\u2705 [COORD] Using shared SmartPatternRecognition instance');\n          return;\n        }\n      }\n      \n      // Fallback: Create individual instance if shared system not available\n      if (typeof SmartPatternRecognition !== 'undefined' && !window.__ST?.isSystemInitialized('smart-pattern-recognition-image-manager')) {\n        window.__ST?.markSystemInitialized('smart-pattern-recognition-image-manager');\n        this.smartPatternRecognition = new SmartPatternRecognition({\n          enableAdvancedPatterns: true,\n          enableUrlValidation: true\n        });\n        console.log('\u2705 [COORD] SmartPatternRecognition integration enabled (individual instance)');\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to initialize SmartPatternRecognition integration:', error);\n    }\n  }\n\n  /**\n   * Main entry point - Enhanced image collection with comprehensive detection\n   */\n  async getImages() {\n    console.log('\uD83D\uDD0D Starting comprehensive image detection...');\n    const startTime = performance.now();\n    \n    try {\n      // Reset state\n      this.imgList = [];\n      this.processedUrls.clear();\n      this.backgroundUrls.clear();\n\n      // Execute all detection methods in sequence for optimal performance\n      await this.detectStandardImages();\n      await this.detectDocumentImages(); \n      await this.detectShadowDOMImages();\n      await this.detectSrcsetImages();\n      await this.detectInputImages();\n      await this.detectLinkImages();\n      await this.detectBackgroundImages();\n      await this.extractUrlsFromHTML();\n\n      // Post-processing and deduplication\n      this.deduplicateImages();\n      this.metrics.totalFound = this.imgList.length;\n      this.metrics.processingTime = performance.now() - startTime;\n\n      console.log(`\u2705 Image detection completed: ${this.imgList.length} images found in ${this.metrics.processingTime.toFixed(2)}ms`);\n      console.log('\uD83D\uDCCA Method stats:', this.metrics.methodStats);\n\n      return this.imgList;\n\n    } catch (error) {\n      console.error('\u274C Image detection failed:', error);\n      this.metrics.errors.push(error.message);\n      return this.imgList;\n    }\n  }\n\n  /**\n   * Enhanced image size validation with gallery-aware logic\n   * More lenient for common gallery patterns\n   */\n  isValidImageSize(width, height, src, element) {\n    // Basic size check - very permissive for gallery images\n    const basicMinWidth = this.options.minImageWidth;\n    const basicMinHeight = this.options.minImageHeight;\n    \n    // If meets basic requirements, always allow\n    if (width >= basicMinWidth && height >= basicMinHeight) {\n      return true;\n    }\n    \n    // If gallery context is disabled, use strict validation\n    if (!this.options.allowSmallGalleryImages) {\n      return false;\n    }\n    \n    // Gallery-aware validation - allow smaller images in certain contexts\n    const isInGalleryContext = this.detectGalleryContext(element, src);\n    \n    if (isInGalleryContext) {\n      // More lenient thresholds for gallery images\n      const galleryMinWidth = Math.max(10, basicMinWidth * 0.4); // 40% of basic requirement\n      const galleryMinHeight = Math.max(10, basicMinHeight * 0.4);\n      \n      if (width >= galleryMinWidth && height >= galleryMinHeight) {\n        console.debug(`\uD83D\uDDBC\uFE0F Allowing small gallery image: ${width}x${height} from ${src.substring(0, 50)}...`);\n        return true;\n      }\n    }\n    \n    // Check for common icon/avatar patterns that should be excluded\n    if (this.isLikelyIconOrAvatar(src, width, height)) {\n      return false;\n    }\n    \n    // Final check - allow reasonable aspect ratios even if small\n    const aspectRatio = width / height;\n    if (aspectRatio >= 0.5 && aspectRatio <= 2.0 && width >= 15 && height >= 15) {\n      console.debug(`\uD83D\uDDBC\uFE0F Allowing small image with good aspect ratio: ${width}x${height}`);\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Detect if an image is in a gallery context\n   */\n  detectGalleryContext(element, src) {\n    if (!element || !src) return false;\n    \n    try {\n      // Check element classes and IDs for gallery indicators\n      const classNames = element.className || '';\n      const parentClasses = element.parentElement?.className || '';\n      const grandparentClasses = element.parentElement?.parentElement?.className || '';\n      \n      const galleryIndicators = [\n        'gallery', 'grid', 'photo', 'image', 'thumb', 'tile',\n        'carousel', 'slider', 'lightbox', 'masonry', 'portfolio'\n      ];\n      \n      for (const indicator of galleryIndicators) {\n        if (classNames.toLowerCase().includes(indicator) ||\n            parentClasses.toLowerCase().includes(indicator) ||\n            grandparentClasses.toLowerCase().includes(indicator)) {\n          return true;\n        }\n      }\n      \n      // Check URL patterns that suggest gallery images\n      const urlLower = src.toLowerCase();\n      if (urlLower.includes('gallery') || \n          urlLower.includes('photos') || \n          urlLower.includes('album') ||\n          urlLower.includes('thumb') ||\n          urlLower.includes('preview')) {\n        return true;\n      }\n      \n      // Check for common gallery attributes\n      if (element.dataset?.gallery || \n          element.dataset?.lightbox ||\n          element.getAttribute?.('data-gallery') ||\n          element.getAttribute?.('data-fancybox')) {\n        return true;\n      }\n      \n      // Check for multiple similar images (suggests gallery)\n      const siblings = element.parentElement?.children || [];\n      const similarImages = Array.from(siblings).filter(child => \n        child.tagName === 'IMG' && child !== element\n      );\n      \n      if (similarImages.length >= 3) {\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.debug('Error detecting gallery context:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if image is likely an icon or avatar that should be excluded\n   */\n  isLikelyIconOrAvatar(src, width, height) {\n    if (!src) return false;\n    \n    try {\n      const urlLower = src.toLowerCase();\n      \n      // Common icon/avatar patterns in URLs\n      const iconPatterns = [\n        'icon', 'favicon', 'logo', 'avatar', 'profile',\n        'button', 'sprite', 'ui/', '/icons/', 'assets/img/ui'\n      ];\n      \n      for (const pattern of iconPatterns) {\n        if (urlLower.includes(pattern)) {\n          return true;\n        }\n      }\n      \n      // Very small images are likely icons\n      if (width <= 16 && height <= 16) {\n        return true;\n      }\n      \n      // Perfect squares under 32px are often icons\n      if (width === height && width <= 32) {\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.debug('Error checking icon/avatar pattern:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Method 1: Standard IMG tag detection (enhanced from reference)\n   */\n  async detectStandardImages() {\n    try {\n      console.log('\uD83D\uDD0D Detecting standard IMG tags...');\n      \n      const imgs = document.getElementsByTagName(\"img\");\n      \n      for (let i = 0; i < imgs.length; i++) {\n        const img = imgs[i];\n        \n        try {\n          // Get image source (prefer currentSrc for responsive images)\n          const src = img.currentSrc || img.src;\n          if (!src || this.processedUrls.has(src)) continue;\n\n          // Calculate dimensions (enhanced approach from reference)\n          let width = 0, height = 0;\n          \n          // Try natural dimensions first\n          if (img.naturalWidth && img.naturalHeight) {\n            width = img.naturalWidth;\n            height = img.naturalHeight;\n          } else {\n            // Fallback to computed dimensions\n            const rect = img.getBoundingClientRect();\n            width = rect.width || 0;\n            height = rect.height || 0;\n          }\n\n          // Apply size filtering with gallery-aware logic\n          if (!this.isValidImageSize(width, height, src, img)) {\n            continue;\n          }\n\n          this.addImg(this.imageType.IMG, src, width, height, {\n            element: img,\n            alt: img.alt,\n            className: img.className,\n            dataset: img.dataset\n          });\n          \n          this.metrics.methodStats.standardImages++;\n\n        } catch (error) {\n          console.debug('Error processing standard image:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Standard image detection failed:', error);\n      this.metrics.errors.push('Standard images: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 2: Document.images collection (from reference extension)\n   */\n  async detectDocumentImages() {\n    try {\n      console.log('\uD83D\uDD0D Detecting document.images collection...');\n      \n      const imgs = document.images;\n      if (!imgs || imgs.length === 0) return;\n\n      for (let i = 0; i < imgs.length; i++) {\n        try {\n          const img = imgs[i];\n          const src = img.currentSrc || img.src;\n          \n          if (!src || this.processedUrls.has(src)) continue;\n\n          // Enhanced dimension calculation\n          let width = parseInt(img.naturalWidth) || 0;\n          let height = parseInt(img.naturalHeight) || 0;\n          \n          // Fallback dimension calculation\n          if (width === 0 || height === 0) {\n            const newImg = new Image();\n            newImg.src = src;\n            const nwidth = parseInt(newImg.width) || 0;\n            const nheight = parseInt(newImg.height) || 0;\n            width = Math.max(width, nwidth);\n            height = Math.max(height, nheight);\n          }\n\n          this.addImg(this.imageType.IMG, src, width, height, {\n            element: img,\n            fromDocumentCollection: true\n          });\n          \n          this.metrics.methodStats.documentImages++;\n\n        } catch (error) {\n          console.debug('Error processing document image:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Document images detection failed:', error);\n      this.metrics.errors.push('Document images: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 3: Shadow DOM detection (ported from reference extension)\n   */\n  async detectShadowDOMImages() {\n    if (!this.options.enableShadowDOM) return;\n\n    try {\n      console.log('\uD83D\uDD0D Detecting Shadow DOM images...');\n      \n      const shadowImages = this.querySelectorAllShadows(\"img\");\n      \n      for (const img of shadowImages) {\n        try {\n          const src = img.currentSrc || img.src;\n          if (!src || this.processedUrls.has(src)) continue;\n\n          let width = parseInt(img.naturalWidth) || 0;\n          let height = parseInt(img.naturalHeight) || 0;\n\n          this.addImg(this.imageType.IMG, src, width, height, {\n            element: img,\n            fromShadowDOM: true,\n            shadowHost: img.getRootNode()?.host?.tagName || 'unknown'\n          });\n          \n          this.metrics.methodStats.shadowDOMImages++;\n\n        } catch (error) {\n          console.debug('Error processing shadow DOM image:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Shadow DOM detection failed:', error);\n      this.metrics.errors.push('Shadow DOM: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 4: Enhanced srcset detection (ported and improved)\n   */\n  async detectSrcsetImages() {\n    if (!this.options.enableSrcsetDetection) return;\n\n    try {\n      console.log('\uD83D\uDD0D Detecting srcset images...');\n      \n      // Process source elements\n      const sources = document.getElementsByTagName(\"source\");\n      for (const source of sources) {\n        if (!source.srcset) continue;\n        \n        const urls = this.parseSrcset(source.srcset);\n        for (const url of urls) {\n          if (this.processedUrls.has(url)) continue;\n          \n          this.addImg(this.imageType.IMG, url, 0, 0, {\n            fromSrcset: true,\n            sourceElement: true\n          });\n          this.metrics.methodStats.srcsetImages++;\n        }\n      }\n\n      // Process img elements with srcset\n      const srcsetImages = document.querySelectorAll(\"img[srcset]\");\n      for (const img of srcsetImages) {\n        if (!img.srcset) continue;\n        \n        const urls = this.parseSrcset(img.srcset);\n        for (const url of urls) {\n          if (this.processedUrls.has(url)) continue;\n          \n          this.addImg(this.imageType.IMG, url, 0, 0, {\n            element: img,\n            fromSrcset: true\n          });\n          this.metrics.methodStats.srcsetImages++;\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Srcset detection failed:', error);\n      this.metrics.errors.push('Srcset: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 5: Input image detection (from reference extension)\n   */\n  async detectInputImages() {\n    if (!this.options.enableInputImages) return;\n\n    try {\n      console.log('\uD83D\uDD0D Detecting input[type=image] elements...');\n      \n      const inputs = document.getElementsByTagName(\"input\");\n      \n      for (const input of inputs) {\n        try {\n          if (input.type && input.type.toUpperCase() === \"IMAGE\" && input.src) {\n            if (this.processedUrls.has(input.src)) continue;\n            \n            this.addImg(this.imageType.INPUT_IMG, input.src, 0, 0, {\n              element: input,\n              inputType: input.type\n            });\n            \n            this.metrics.methodStats.inputImages++;\n          }\n        } catch (error) {\n          console.debug('Error processing input image:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Input image detection failed:', error);\n      this.metrics.errors.push('Input images: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 6: Link detection for image URLs (from reference extension)\n   */\n  async detectLinkImages() {\n    if (!this.options.enableLinkDetection) return;\n\n    try {\n      console.log('\uD83D\uDD0D Detecting image links...');\n      \n      const links = document.getElementsByTagName(\"a\");\n      \n      for (const link of links) {\n        try {\n          const href = link.href;\n          if (!href || this.processedUrls.has(href)) continue;\n          \n          // Check if link points to an image file\n          if (this.isImageUrl(href)) {\n            this.addImg(this.imageType.LINK, href, 0, 0, {\n              element: link,\n              linkText: link.textContent?.trim() || '',\n              title: link.title || ''\n            });\n            \n            this.metrics.methodStats.linkImages++;\n          }\n        } catch (error) {\n          console.debug('Error processing link:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Link detection failed:', error);\n      this.metrics.errors.push('Link images: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 7: CSS background image detection (enhanced from reference)\n   */\n  async detectBackgroundImages() {\n    if (!this.options.enableBackgroundImages) return;\n\n    try {\n      console.log('\uD83D\uDD0D Detecting CSS background images...');\n      \n      const elements = document.getElementsByTagName('*');\n      const maxElements = Math.min(elements.length, this.options.maxNodesPerMethod);\n      \n      for (let i = 0; i < maxElements; i++) {\n        try {\n          const element = elements[i];\n          \n          // Check background-image property\n          const backgroundImage = this.deepCss(element, 'background-image');\n          this.extractBackgroundUrls(backgroundImage, element);\n          \n          // Check general background property\n          const background = this.deepCss(element, 'background');\n          this.extractBackgroundUrls(background, element);\n          \n        } catch (error) {\n          console.debug('Error processing background image:', error);\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Background image detection failed:', error);\n      this.metrics.errors.push('Background images: ' + error.message);\n    }\n  }\n\n  /**\n   * Method 8: HTML content URL extraction (from reference extension)\n   */\n  async extractUrlsFromHTML() {\n    if (!this.options.enableUrlExtraction) return;\n\n    try {\n      console.log('\uD83D\uDD0D Extracting URLs from HTML content...');\n      \n      const htmlContent = document.body.innerHTML;\n      const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?//=]*)/gi;\n      \n      const urls = htmlContent.match(urlRegex);\n      if (!urls) return;\n      \n      // Remove duplicates\n      const uniqueUrls = [...new Set(urls)];\n      \n      for (const url of uniqueUrls) {\n        if (this.processedUrls.has(url)) continue;\n        \n        // Check if URL is an image\n        if (this.isImageUrl(url)) {\n          this.addImg(this.imageType.TEXT, url, 0, 0, {\n            fromTextContent: true,\n            extractionMethod: 'html-content'\n          });\n          \n          this.metrics.methodStats.urlExtraction++;\n        }\n      }\n\n    } catch (error) {\n      console.warn('\u26A0\uFE0F URL extraction failed:', error);\n      this.metrics.errors.push('URL extraction: ' + error.message);\n    }\n  }\n\n  /**\n   * Shadow DOM traversal (ported from reference extension)\n   */\n  querySelectorAllShadows(selector, el = document.body) {\n    try {\n      // Find child shadow roots\n      const childShadows = Array.from(el.querySelectorAll('*'))\n        .map(el => el.shadowRoot)\n        .filter(Boolean);\n\n      // Recursively search child shadow roots\n      const childResults = childShadows.map(child => \n        this.querySelectorAllShadows(selector, child)\n      );\n\n      // Get results from current context\n      const result = Array.from(el.querySelectorAll(selector));\n      \n      // Combine all results\n      return result.concat(childResults).flat();\n      \n    } catch (error) {\n      console.debug('Error in shadow DOM traversal:', error);\n      return [];\n    }\n  }\n\n  /**\n   * CSS property extraction (ported from reference extension)\n   */\n  deepCss(element, css) {\n    if (!element || !element.style) return '';\n    \n    try {\n      // Convert kebab-case to camelCase\n      const camelCaseCss = css.replace(/\\-([a-z])/g, (a, b) => b.toUpperCase());\n      \n      // Try different methods to get computed style\n      if (element.currentStyle) {\n        return element.style[camelCaseCss] || element.currentStyle[camelCaseCss] || '';\n      }\n      \n      const computedStyle = window.getComputedStyle ? \n        window.getComputedStyle(element, \"\") : \n        (document.defaultView || window).getComputedStyle(element, \"\");\n        \n      return element.style[camelCaseCss] || \n             computedStyle.getPropertyValue(css) || '';\n             \n    } catch (error) {\n      console.debug('Error getting CSS property:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Extract background image URLs from CSS properties\n   */\n  extractBackgroundUrls(styleValue, element) {\n    if (!styleValue || styleValue === \"none\") return;\n    \n    try {\n      const urlRegex = /url\\(['\"]?([^\")]+)['\"]?\\)/g;\n      let match;\n      \n      while ((match = urlRegex.exec(styleValue)) !== null) {\n        const src = match[1];\n        if (src && !this.backgroundUrls.has(src)) {\n          this.backgroundUrls.add(src);\n          \n          // Resolve relative URLs\n          const resolvedUrl = new URL(src, window.location.href).href;\n          \n          if (!this.processedUrls.has(resolvedUrl)) {\n            this.addImg(this.imageType.BACKGROUND, resolvedUrl, 0, 0, {\n              element: element,\n              cssProperty: 'background-image',\n              elementTag: element.tagName,\n              className: element.className\n            });\n            \n            this.metrics.methodStats.backgroundImages++;\n          }\n        }\n      }\n    } catch (error) {\n      console.debug('Error extracting background URLs:', error);\n    }\n  }\n\n  /**\n   * Parse srcset attribute to extract individual URLs\n   */\n  parseSrcset(srcset) {\n    try {\n      const urls = [];\n      const srcsetEntries = srcset.split(',');\n      \n      for (const entry of srcsetEntries) {\n        const trimmed = entry.trim();\n        const spaceIndex = trimmed.indexOf(' ');\n        const url = spaceIndex !== -1 ? trimmed.substring(0, spaceIndex) : trimmed;\n        \n        if (url) {\n          // Resolve relative URLs\n          try {\n            const resolvedUrl = new URL(url, window.location.href).href;\n            urls.push(resolvedUrl);\n          } catch (e) {\n            urls.push(url); // Use as-is if URL resolution fails\n          }\n        }\n      }\n      \n      return urls;\n    } catch (error) {\n      console.debug('Error parsing srcset:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if URL points to an image resource\n   */\n  isImageUrl(url) {\n    try {\n      const urlLower = url.toLowerCase();\n      return this.options.supportedExtensions.some(ext => \n        urlLower.includes(`.${ext}`)\n      );\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Add image to collection with enhanced metadata\n   */\n  addImg(type, src, width, height, metadata = {}) {\n    if (!src || this.processedUrls.has(src)) {\n      this.metrics.duplicatesSkipped++;\n      return;\n    }\n    \n    try {\n      // Resolve relative URLs\n      const resolvedSrc = new URL(src, window.location.href).href;\n      \n      const imageObj = {\n        type: type,\n        src: resolvedSrc,\n        width: width || 0,\n        height: height || 0,\n        metadata: {\n          ...metadata,\n          timestamp: Date.now(),\n          domain: new URL(resolvedSrc).hostname,\n          position: this.imgList.length\n        }\n      };\n\n      // Enhanced categorization with SmartPatternRecognition if available\n      if (this.smartPatternRecognition) {\n        try {\n          const enhancedData = this.smartPatternRecognition.categorizeImageEnhanced(imageObj);\n          Object.assign(imageObj, enhancedData);\n        } catch (error) {\n          console.debug('Smart categorization failed:', error);\n        }\n      }\n\n      this.imgList.push(imageObj);\n      this.processedUrls.add(src);\n      this.processedUrls.add(resolvedSrc);\n      \n    } catch (error) {\n      console.debug('Error adding image:', error);\n    }\n  }\n\n  /**\n   * Remove duplicate images and optimize collection\n   */\n  deduplicateImages() {\n    const seen = new Set();\n    const unique = [];\n    \n    for (const img of this.imgList) {\n      const key = img.src;\n      if (!seen.has(key)) {\n        seen.add(key);\n        unique.push(img);\n      } else {\n        this.metrics.duplicatesSkipped++;\n      }\n    }\n    \n    this.imgList = unique;\n  }\n\n  /**\n   * Get unique image sources (compatibility with reference extension)\n   */\n  getUniqueImagesSrcs() {\n    const images = this.imgList;\n    const srcs = images.map(img => img.src);\n    \n    // Remove duplicates while preserving order\n    return [...new Set(srcs)];\n  }\n\n  /**\n   * Get processing metrics and statistics\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      efficiency: {\n        imagesPerSecond: this.metrics.processingTime > 0 ? \n          (this.metrics.totalFound / this.metrics.processingTime * 1000).toFixed(2) : 0,\n        duplicateRate: this.metrics.totalFound > 0 ? \n          (this.metrics.duplicatesSkipped / (this.metrics.totalFound + this.metrics.duplicatesSkipped) * 100).toFixed(2) : 0\n      }\n    };\n  }\n\n  /**\n   * Reset manager state\n   */\n  reset() {\n    this.imgList = [];\n    this.processedUrls.clear();\n    this.backgroundUrls.clear();\n    this.metrics = {\n      totalFound: 0,\n      duplicatesSkipped: 0,\n      processingTime: 0,\n      methodStats: {\n        standardImages: 0,\n        documentImages: 0,\n        shadowDOMImages: 0,\n        srcsetImages: 0,\n        backgroundImages: 0,\n        urlExtraction: 0,\n        inputImages: 0,\n        linkImages: 0\n      },\n      errors: []\n    };\n  }\n}\n\n// Make globally available\nif (typeof window !== 'undefined') {\n  window.EnhancedImageManager = EnhancedImageManager;\n}\n\nconsole.log('\u2705 Enhanced Image Manager loaded successfully');// enhanced-selector-wrapper.js - Safe Query Selector Wrapper for STEPTWO\n// Integrates Enhanced CSS Selector with fallback to basic methods\n\nconsole.log('\uD83D\uDE80 Loading Enhanced Selector Wrapper...');\n\n/**\n * Enhanced Selector Wrapper Methods\n * These methods provide the interface between AdvancedCollectorSystem and Enhanced CSS Selector\n */\n\n// Add to AdvancedCollectorSystem prototype\n// Note: Check window.AdvancedCollectorSystem to avoid temporal dead zone error\nif (typeof window.AdvancedCollectorSystem !== 'undefined') {\n  \n  /**\n   * Safe wrapper for querySelectorAll with Enhanced CSS Selector integration\n   * @param {string} selector - CSS selector string\n   * @param {Object} options - Query options\n   * @returns {Promise<NodeList|Array|number>}\n   */\n  window.AdvancedCollectorSystem.prototype.safeQuerySelectorAll = async function(selector, options = {}) {\n    try {\n      const root = options.root || document;\n      const countOnly = options.countOnly || false;\n      const maxResults = options.maxResults || this.options.maxNodesPerDetector || 1000;\n      \n      // For count-only queries, optimize performance\n      if (countOnly) {\n        if (selector === '*') {\n          return root.getElementsByTagName('*').length;\n        }\n        const elements = root.querySelectorAll(selector);\n        return elements.length;\n      }\n      \n      // Use basic querySelectorAll with safety limits\n      const elements = root.querySelectorAll(selector);\n      \n      // Apply limits to prevent performance issues\n      if (elements.length > maxResults) {\n        console.warn(`\u26A0\uFE0F Query result truncated: ${elements.length} -> ${maxResults} elements`);\n        return Array.from(elements).slice(0, maxResults);\n      }\n      \n      return Array.from(elements);\n      \n    } catch (error) {\n      console.warn(`\u26A0\uFE0F Safe query selector failed for \"${selector}\":`, error);\n      return [];\n    }\n  };\n\n  /**\n   * Safe wrapper for querySelector with Enhanced CSS Selector integration\n   * @param {string} selector - CSS selector string\n   * @param {Object} options - Query options\n   * @returns {Promise<Element|null>}\n   */\n  window.AdvancedCollectorSystem.prototype.safeQuerySelector = async function(selector, options = {}) {\n    try {\n      const root = options.root || document;\n      return root.querySelector(selector);\n    } catch (error) {\n      console.warn(`\u26A0\uFE0F Safe query selector failed for \"${selector}\":`, error);\n      return null;\n    }\n  };\n\n  /**\n   * Generate enhanced selector for an element using the Enhanced CSS Selector system\n   * @param {Element} element - Target element\n   * @param {Object} options - Generation options\n   * @returns {Promise<string>}\n   */\n  window.AdvancedCollectorSystem.prototype.generateEnhancedSelector = async function(element, options = {}) {\n    try {\n      if (this.enhancedCSSSelector && this.enhancedSelectorInitialized) {\n        return await this.enhancedCSSSelector.generateSelector(element, options);\n      } else {\n        // Fallback to basic selector generation\n        return this.generateBasicSelector(element);\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Enhanced selector generation failed:', error);\n      return this.generateBasicSelector(element);\n    }\n  };\n\n  /**\n   * Generate multiple selector candidates for robust detection\n   * @param {Element} element - Target element\n   * @param {Object} options - Generation options\n   * @returns {Promise<Array>}\n   */\n  AdvancedCollectorSystem.prototype.generateSelectorCandidates = async function(element, options = {}) {\n    try {\n      if (this.enhancedCSSSelector && this.enhancedSelectorInitialized) {\n        return await this.enhancedCSSSelector.generateSelectorCandidates(element, options);\n      } else {\n        // Fallback to basic selector\n        const basicSelector = this.generateBasicSelector(element);\n        return [{ selector: basicSelector, type: 'basic', penalty: 10 }];\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Selector candidates generation failed:', error);\n      const fallbackSelector = this.generateBasicSelector(element);\n      return [{ selector: fallbackSelector, type: 'fallback', penalty: 100 }];\n    }\n  };\n\n  /**\n   * Basic selector generation fallback\n   * @param {Element} element - Target element\n   * @returns {string}\n   */\n  AdvancedCollectorSystem.prototype.generateBasicSelector = function(element) {\n    try {\n      // Try ID first\n      if (element.id) {\n        const idSelector = `#${CSS.escape(element.id)}`;\n        if (document.querySelectorAll(idSelector).length === 1) {\n          return idSelector;\n        }\n      }\n      \n      // Try class names\n      if (element.className && typeof element.className === 'string') {\n        const classes = element.className.split(' ').filter(c => c.trim());\n        if (classes.length > 0) {\n          const classSelector = `.${CSS.escape(classes[0])}`;\n          const matches = document.querySelectorAll(classSelector);\n          if (matches.length <= 5) { // Reasonable specificity\n            return classSelector;\n          }\n        }\n      }\n      \n      // Try tag + nth-child\n      const tagName = element.tagName.toLowerCase();\n      const parent = element.parentElement;\n      if (parent) {\n        const siblings = Array.from(parent.children).filter(child => \n          child.tagName.toLowerCase() === tagName\n        );\n        const index = siblings.indexOf(element);\n        if (index >= 0) {\n          return `${tagName}:nth-of-type(${index + 1})`;\n        }\n      }\n      \n      // Final fallback\n      return tagName;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Basic selector generation failed:', error);\n      return element.tagName.toLowerCase();\n    }\n  };\n\n  /**\n   * Enhanced pattern detection for gallery containers\n   * Integrates with Smart Pattern Recognition system\n   * @param {Object} options - Detection options\n   * @returns {Promise<Array>}\n   */\n  AdvancedCollectorSystem.prototype.detectGalleryPatternsEnhanced = async function(options = {}) {\n    try {\n      if (this.smartPatternRecognition && this.smartPatternInitialized) {\n        const patterns = await this.smartPatternRecognition.detectPatterns(options);\n        return patterns.patterns || [];\n      } else {\n        // Fallback to basic gallery detection\n        return await this.detectBasicGalleryPatterns(options);\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Enhanced gallery pattern detection failed:', error);\n      return await this.detectBasicGalleryPatterns(options);\n    }\n  };\n\n  /**\n   * Basic gallery pattern detection fallback\n   * @param {Object} options - Detection options\n   * @returns {Promise<Array>}\n   */\n  AdvancedCollectorSystem.prototype.detectBasicGalleryPatterns = async function(options = {}) {\n    const patterns = [];\n    \n    try {\n      // Look for common gallery class patterns\n      const gallerySelectors = [\n        '.gallery', '.images', '.photos', '.carousel', '.slider',\n        '[class*=\"gallery\"]', '[class*=\"image\"]', '[class*=\"photo\"]',\n        '[id*=\"gallery\"]', '[id*=\"image\"]', '[id*=\"photo\"]'\n      ];\n      \n      for (const selector of gallerySelectors) {\n        try {\n          const containers = await this.safeQuerySelectorAll(selector);\n          for (const container of containers) {\n            const images = container.querySelectorAll('img');\n            if (images.length >= (options.minPatternItems || 3)) {\n              patterns.push({\n                type: 'basic-gallery',\n                container: container,\n                images: Array.from(images),\n                selector: selector,\n                confidence: 0.6,\n                layout: { type: 'unknown' }\n              });\n            }\n          }\n        } catch (error) {\n          // Skip invalid selectors\n        }\n      }\n      \n      return patterns;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Basic gallery pattern detection failed:', error);\n      return [];\n    }\n  };\n\n  /**\n   * Enhanced image element analysis with Smart Pattern Recognition\n   * @param {Element} element - Image element to analyze\n   * @param {Object} context - Analysis context\n   * @returns {Promise<Object>}\n   */\n  AdvancedCollectorSystem.prototype.analyzeImageElementEnhanced = async function(element, context = {}) {\n    try {\n      const analysis = {\n        element: element,\n        selector: await this.generateEnhancedSelector(element),\n        confidence: 0.5,\n        patterns: [],\n        metadata: {}\n      };\n      \n      // Enhanced selector generation\n      if (this.enhancedCSSSelector && this.enhancedSelectorInitialized) {\n        const selectorCandidates = await this.generateSelectorCandidates(element);\n        analysis.selectorCandidates = selectorCandidates;\n        analysis.confidence += 0.2; // Bonus for enhanced analysis\n      }\n      \n      // Pattern recognition\n      if (this.smartPatternRecognition && this.smartPatternInitialized) {\n        // Check if element is part of a gallery pattern\n        const container = element.closest('[class*=\"gallery\"], [class*=\"image\"], [class*=\"photo\"]');\n        if (container) {\n          analysis.patterns.push('gallery-container');\n          analysis.confidence += 0.15;\n        }\n        \n        // Check for repeating pattern\n        const siblings = Array.from(element.parentElement?.children || [])\n          .filter(child => child.tagName === element.tagName);\n        if (siblings.length >= 3) {\n          analysis.patterns.push('repeating-pattern');\n          analysis.confidence += 0.1;\n        }\n      }\n      \n      return analysis;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Enhanced image element analysis failed:', error);\n      return {\n        element: element,\n        selector: this.generateBasicSelector(element),\n        confidence: 0.3,\n        patterns: [],\n        metadata: { error: error.message }\n      };\n    }\n  };\n\n  console.log('\u2705 Enhanced Selector Wrapper methods added to AdvancedCollectorSystem');\n  \n} else {\n  console.warn('\u26A0\uFE0F AdvancedCollectorSystem not available for wrapper methods');\n}\n\nconsole.log('\u2705 Enhanced Selector Wrapper loaded successfully');// table-detection-system.js - Table Detection Algorithm Ported from Instant Data Scraper\n// Implements smart DOM pattern analysis, class recognition, and scoring system\n\nconsole.log('\uD83D\uDD0D Loading Table Detection System...');\n\n/**\n * Table Detection System - Ported from Instant Data Scraper's onload.js\n * Analyzes DOM patterns, class names, and element repetition for structured data detection\n * Implements scoring system: area \u00D7 (children count)\u00B2 with pattern strength analysis\n */\nclass TableDetectionSystem {\n  constructor(options = {}) {\n    this.options = {\n      maxTables: options.maxTables || 5,\n      minChildren: options.minChildren || 3,\n      minAreaThreshold: options.minAreaThreshold || 0.02, // 2% of body area\n      enableVisualHighlighting: options.enableVisualHighlighting !== false,\n      enableInfiniteScroll: options.enableInfiniteScroll !== false,\n      confidenceThreshold: options.confidenceThreshold || 0.5,\n      ...options\n    };\n\n    // State management\n    this.detectedTables = [];\n    this.currentTableIndex = 0;\n    this.isActive = false;\n    this.infiniteScrollDetected = false;\n    \n    // Visual highlighting state\n    this.highlightingStylesInjected = false;\n    \n    // Pattern analysis cache\n    this.patternCache = new Map();\n    \n    console.log('\u2705 Table Detection System initialized');\n  }\n\n  /**\n   * Main entry point - detect all tables on the page\n   * Ported from reference function a(e) with performance hardening\n   */\n  async detectTables(options = {}) {\n    try {\n      console.log('\uD83D\uDD0D Starting table detection with performance optimizations...');\n      this.detectedTables = [];\n      this.currentTableIndex = 0;\n      \n      // Performance hardening: Set up time budget and element limits\n      const startTime = performance.now();\n      const timeBudget = options.timeBudget || 8000; // 8 seconds max\n      const maxElements = options.maxElementsToScan || 5000;\n      \n      // Calculate body area for threshold\n      const bodyWidth = document.body.offsetWidth || window.innerWidth;\n      const bodyHeight = document.body.offsetHeight || window.innerHeight;\n      const totalBodyArea = bodyWidth * bodyHeight;\n      \n      console.log(`\uD83D\uDCCF Body area: ${totalBodyArea.toLocaleString()}px\u00B2`);\n      \n      // Performance optimization: Cap scanning to likely container candidates\n      const containerCandidates = this.getContainerCandidates();\n      console.log(`\uD83C\uDFAF Focusing on ${containerCandidates.length} container candidates for performance`);\n      \n      // Check if this is a large page requiring batch processing\n      const isLargePage = containerCandidates.length > 1000 || totalBodyArea > 10000000; // 10M px\u00B2\n      \n      if (isLargePage) {\n        console.log('\u26A1 Large page detected - using batch processing to prevent jank');\n        return await this.detectTablesWithBatchProcessing(containerCandidates, totalBodyArea, timeBudget);\n      } else {\n        return await this.detectTablesStandard(containerCandidates, totalBodyArea, timeBudget, maxElements);\n      }\n      \n    } catch (error) {\n      console.error('\u274C Table detection failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Performance optimization: Get likely container candidates\n   * Focuses on main content areas instead of scanning entire DOM\n   */\n  getContainerCandidates() {\n    const candidates = new Set();\n    \n    // Priority 1: Semantic HTML5 containers (most likely to contain structured data)\n    const semanticContainers = [\n      'main', 'section', 'article', 'div[role=\"main\"]', \n      'div[role=\"region\"]', 'div[role=\"article\"]', '.content', \n      '.main', '.article', '.section', '#content', '#main'\n    ];\n    \n    semanticContainers.forEach(selector => {\n      try {\n        document.querySelectorAll(selector).forEach(el => {\n          if (el.children.length >= this.options.minChildren) {\n            candidates.add(el);\n            // Also add direct children of containers\n            Array.from(el.children).forEach(child => {\n              if (child.children.length >= this.options.minChildren) {\n                candidates.add(child);\n              }\n            });\n          }\n        });\n      } catch (e) {\n        // Skip invalid selectors\n      }\n    });\n    \n    // Priority 2: Table-like class names\n    const tableClasses = [\n      '.table', '.data', '.list', '.grid', '.items', '.entries', \n      '.results', '.content-list', '[class*=\"table\"]', '[class*=\"data\"]',\n      '[class*=\"list\"]', '[class*=\"grid\"]', '[class*=\"item\"]'\n    ];\n    \n    tableClasses.forEach(selector => {\n      try {\n        document.querySelectorAll(selector).forEach(el => {\n          if (el.children.length >= this.options.minChildren) {\n            candidates.add(el);\n          }\n        });\n      } catch (e) {\n        // Skip invalid selectors\n      }\n    });\n    \n    // Priority 3: High-level containers with many children\n    const allDivs = document.querySelectorAll('div, ul, ol');\n    for (const div of allDivs) {\n      if (div.children.length >= Math.max(this.options.minChildren * 2, 6)) {\n        candidates.add(div);\n      }\n    }\n    \n    // Convert Set to Array and apply area filtering\n    const candidateArray = Array.from(candidates).filter(el => {\n      const area = el.offsetWidth * el.offsetHeight;\n      return area > 0 && !isNaN(area);\n    });\n    \n    // Sort by likelihood (more children + larger area = higher priority)\n    return candidateArray.sort((a, b) => {\n      const scoreA = a.children.length * (a.offsetWidth * a.offsetHeight);\n      const scoreB = b.children.length * (b.offsetWidth * b.offsetHeight);\n      return scoreB - scoreA;\n    });\n  }\n\n  /**\n   * Batch processing for large pages to prevent jank\n   * Uses requestIdleCallback and setTimeout for non-blocking execution\n   */\n  async detectTablesWithBatchProcessing(candidates, totalBodyArea, timeBudget) {\n    console.log('\uD83D\uDD04 Starting batch processing for large page...');\n    const batchSize = 50; // Process 50 elements at a time\n    const batches = [];\n    \n    // Split candidates into batches\n    for (let i = 0; i < candidates.length; i += batchSize) {\n      batches.push(candidates.slice(i, i + batchSize));\n    }\n    \n    const analysisResults = [];\n    const startTime = performance.now();\n    \n    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n      // Check time budget\n      if (performance.now() - startTime > timeBudget) {\n        console.warn(`\u23F0 Time budget exceeded, processed ${batchIndex}/${batches.length} batches`);\n        break;\n      }\n      \n      const batch = batches[batchIndex];\n      console.log(`\uD83D\uDD04 Processing batch ${batchIndex + 1}/${batches.length} (${batch.length} elements)`);\n      \n      // Use requestIdleCallback if available, otherwise setTimeout\n      const batchResults = await this.processBatchAsync(batch, totalBodyArea);\n      analysisResults.push(...batchResults);\n      \n      // Yield control to prevent blocking\n      if (batchIndex % 3 === 0) { // Every 3 batches\n        await this.yieldControl();\n      }\n    }\n    \n    return this.finalizeTables(analysisResults);\n  }\n\n  /**\n   * Standard detection for smaller pages\n   */\n  async detectTablesStandard(candidates, totalBodyArea, timeBudget, maxElements) {\n    const startTime = performance.now();\n    const elementsToProcess = candidates.slice(0, maxElements);\n    \n    console.log(`\uD83C\uDFAF Processing ${elementsToProcess.length} container candidates`);\n    \n    const analysisPromises = [];\n    \n    for (const element of elementsToProcess) {\n      // Check time budget periodically\n      if (performance.now() - startTime > timeBudget) {\n        console.warn(`\u23F0 Time budget exceeded during standard processing`);\n        break;\n      }\n      \n      // Calculate element area\n      const area = element.offsetWidth * element.offsetHeight;\n      \n      // Skip elements that are too small or invalid\n      if (isNaN(area) || area < (totalBodyArea * this.options.minAreaThreshold)) {\n        continue;\n      }\n\n      // Analyze element for table patterns (async for better performance)\n      analysisPromises.push(this.analyzeElementAsync(element, area, totalBodyArea));\n    }\n\n    // Process all analyses\n    const analyses = await Promise.allSettled(analysisPromises);\n    \n    // Filter successful analyses\n    const results = analyses\n      .filter(result => result.status === 'fulfilled' && result.value)\n      .map(result => result.value);\n    \n    return this.finalizeTables(results);\n  }\n\n  /**\n   * Process a batch of elements asynchronously\n   */\n  async processBatchAsync(batch, totalBodyArea) {\n    return new Promise((resolve) => {\n      const processFunc = () => {\n        const results = [];\n        \n        for (const element of batch) {\n          try {\n            const area = element.offsetWidth * element.offsetHeight;\n            \n            if (isNaN(area) || area < (totalBodyArea * this.options.minAreaThreshold)) {\n              continue;\n            }\n            \n            // Synchronous analysis for batch processing\n            const analysis = this.analyzeElementForTablePattern(element);\n            \n            if (analysis && analysis.children.length >= this.options.minChildren) {\n              const score = area * analysis.children.length * analysis.children.length;\n              \n              const tableData = {\n                table: element,\n                goodClasses: analysis.goodClasses,\n                area: area,\n                children: analysis.children,\n                childrenCount: analysis.children.length,\n                text: this.extractText(analysis.children),\n                score: score,\n                selector: this.generateSelector(element),\n                type: 'table_pattern',\n                confidence: this.calculateConfidence(analysis, area, totalBodyArea),\n                timestamp: Date.now()\n              };\n              \n              results.push(tableData);\n            }\n          } catch (error) {\n            console.warn('\u26A0\uFE0F Batch element analysis failed:', error);\n          }\n        }\n        \n        resolve(results);\n      };\n      \n      // Use requestIdleCallback if available, otherwise setTimeout\n      if (typeof requestIdleCallback !== 'undefined') {\n        requestIdleCallback(processFunc, { timeout: 100 });\n      } else {\n        setTimeout(processFunc, 0);\n      }\n    });\n  }\n\n  /**\n   * Yield control to prevent blocking the main thread\n   */\n  async yieldControl() {\n    return new Promise(resolve => {\n      if (typeof requestIdleCallback !== 'undefined') {\n        requestIdleCallback(resolve, { timeout: 16 }); // ~1 frame\n      } else {\n        setTimeout(resolve, 0);\n      }\n    });\n  }\n\n  /**\n   * Finalize table detection results\n   */\n  finalizeTables(results) {\n    // Add to detected tables\n    this.detectedTables = results;\n    \n    // Sort by score (highest first) and limit results\n    this.detectedTables.sort((a, b) => b.score - a.score);\n    this.detectedTables = this.detectedTables.slice(0, this.options.maxTables);\n    \n    console.log(`\u2705 Table detection completed: ${this.detectedTables.length} tables found`);\n    console.log('\uD83D\uDCCA Top tables by score:', this.detectedTables.slice(0, 3));\n    \n    // Detect infinite scroll if enabled (with protection against performance issues)\n    if (this.options.enableInfiniteScroll) {\n      setTimeout(() => this.detectInfiniteScrollWithProtection(), 100);\n    }\n    \n    return this.detectedTables;\n  }\n\n  /**\n   * Async analysis of individual elements for better performance\n   */\n  async analyzeElementAsync(element, area, totalBodyArea) {\n    return new Promise(resolve => {\n      try {\n        // Analyze element for table patterns\n        const analysis = this.analyzeElementForTablePattern(element);\n        \n        if (analysis && analysis.children.length >= this.options.minChildren) {\n          // Calculate score using reference algorithm: area \u00D7 children\u00B2 \n          const score = area * analysis.children.length * analysis.children.length;\n          \n          const tableData = {\n            table: element,\n            goodClasses: analysis.goodClasses,\n            area: area,\n            children: analysis.children,\n            childrenCount: analysis.children.length,\n            text: this.extractText(analysis.children),\n            score: score,\n            selector: this.generateSelector(element),\n            type: 'table_pattern',\n            confidence: this.calculateConfidence(analysis, area, totalBodyArea),\n            timestamp: Date.now()\n          };\n          \n          resolve(tableData);\n        } else {\n          resolve(null);\n        }\n      } catch (error) {\n        console.warn('\u26A0\uFE0F Element analysis failed:', error);\n        resolve(null);\n      }\n    });\n  }\n\n  /**\n   * Core pattern analysis algorithm - ported from reference function n(e)\n   * Analyzes child elements for repeating class patterns and structure\n   */\n  analyzeElementForTablePattern(element) {\n    try {\n      const children = Array.from(element.children);\n      const classPatterns = {};\n      const individualClasses = {};\n      \n      // Filter valid children (skip script, img, meta, style)\n      const validChildren = children.filter(child => {\n        const nodeName = child.nodeName.toLowerCase();\n        \n        // Skip non-content elements\n        if (['script', 'img', 'meta', 'style', 'link', 'noscript'].includes(nodeName)) {\n          return false;\n        }\n        \n        // Skip elements with no meaningful text content\n        const text = child.textContent || '';\n        if (!text.trim().length) {\n          return false;\n        }\n        \n        return true;\n      });\n\n      // Must have minimum children for table detection\n      if (validChildren.length < this.options.minChildren) {\n        return null;\n      }\n\n      // Analyze class patterns in children\n      validChildren.forEach(child => {\n        const classList = this.getClassList(child);\n        const classString = classList.sort().join(' ');\n        \n        // Count complete class pattern combinations\n        if (classString) {\n          classPatterns[classString] = (classPatterns[classString] || 0) + 1;\n        }\n        \n        // Count individual class occurrences\n        classList.forEach(className => {\n          if (className) {\n            individualClasses[className] = (individualClasses[className] || 0) + 1;\n          }\n        });\n      });\n\n      // Find \"good classes\" - patterns that appear frequently\n      // Reference algorithm: at least half the children minus 2\n      const threshold = Math.max(1, Math.floor(validChildren.length / 2) - 2);\n      \n      let goodClasses = Object.keys(classPatterns).filter(pattern => \n        classPatterns[pattern] >= threshold\n      );\n\n      // Fallback to individual classes if no complete patterns found\n      if (!goodClasses.length) {\n        goodClasses = Object.keys(individualClasses).filter(className => \n          individualClasses[className] >= threshold\n        );\n      }\n\n      // If no patterns found, return all valid children with empty good classes\n      if (!goodClasses.length || (goodClasses.length === 1 && goodClasses[0] === '')) {\n        return {\n          children: validChildren,\n          goodClasses: [],\n          patternStrength: 0\n        };\n      }\n\n      // Filter children that match the good class patterns\n      const matchingChildren = validChildren.filter(child => {\n        const classList = this.getClassList(child);\n        return goodClasses.some(pattern => {\n          if (pattern.includes(' ')) {\n            // Multi-class pattern matching\n            const patternClasses = pattern.split(' ');\n            return patternClasses.every(cls => classList.includes(cls));\n          } else {\n            // Single class pattern matching\n            return classList.includes(pattern);\n          }\n        });\n      });\n\n      // Calculate pattern strength (0-1)\n      const patternStrength = Math.min(1, \n        (matchingChildren.length / validChildren.length) * \n        (goodClasses.length / 5) // Normalize by expected max classes\n      );\n\n      return {\n        children: matchingChildren.length > 0 ? matchingChildren : validChildren,\n        goodClasses: goodClasses,\n        patternStrength: patternStrength,\n        totalChildren: validChildren.length,\n        matchingChildren: matchingChildren.length\n      };\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Pattern analysis failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Extract class list from element\n   */\n  getClassList(element) {\n    const className = element.className || '';\n    return className.trim().split(/\\s+/).filter(cls => cls.length > 0);\n  }\n\n  /**\n   * Extract text content from children array\n   */\n  extractText(children) {\n    return children.map(child => (child.textContent || '').trim()).join(' ').trim();\n  }\n\n  /**\n   * Generate CSS selector for element\n   */\n  generateSelector(element) {\n    try {\n      // Prefer ID selector\n      if (element.id) {\n        return `#${CSS.escape(element.id)}`;\n      }\n      \n      // Use class selector if available\n      const classes = this.getClassList(element);\n      if (classes.length > 0) {\n        const escapedClasses = classes.map(cls => CSS.escape(cls)).join('.');\n        return `.${escapedClasses}`;\n      }\n      \n      // Fallback to tag name\n      return element.tagName.toLowerCase();\n      \n    } catch (error) {\n      return 'unknown';\n    }\n  }\n\n  /**\n   * Calculate confidence score for detected table\n   */\n  calculateConfidence(analysis, area, totalBodyArea) {\n    let confidence = 0.4; // Base confidence\n    \n    // Increase confidence based on number of children\n    confidence += Math.min(0.25, analysis.children.length * 0.015);\n    \n    // Increase confidence based on pattern strength\n    confidence += analysis.patternStrength * 0.2;\n    \n    // Increase confidence for good class patterns\n    confidence += Math.min(0.15, analysis.goodClasses.length * 0.03);\n    \n    // Moderate boost for reasonable area coverage\n    const areaRatio = area / totalBodyArea;\n    if (areaRatio > 0.05 && areaRatio < 0.7) {\n      confidence += 0.1;\n    }\n    \n    return Math.min(1.0, Math.max(0.1, confidence));\n  }\n\n  /**\n   * \"Try another table\" functionality - cycle through detected patterns\n   * Ported from reference function i() with enhancements\n   */\n  tryAnotherTable() {\n    if (this.detectedTables.length === 0) {\n      console.log('\u26A0\uFE0F No tables detected to cycle through');\n      return null;\n    }\n\n    // Clear previous highlighting\n    this.clearTableHighlighting();\n    \n    // Move to next table (cycle through)\n    this.currentTableIndex = (this.currentTableIndex + 1) % this.detectedTables.length;\n    \n    const currentTable = this.detectedTables[this.currentTableIndex];\n    \n    // Highlight new table if visual highlighting is enabled\n    if (this.options.enableVisualHighlighting) {\n      this.highlightTable(currentTable);\n    }\n    \n    console.log(`\uD83D\uDD04 Switched to table ${this.currentTableIndex + 1}/${this.detectedTables.length}`);\n    console.log('\uD83D\uDCCB Current table info:', {\n      selector: currentTable.selector,\n      childrenCount: currentTable.childrenCount,\n      confidence: currentTable.confidence.toFixed(2),\n      score: currentTable.score.toLocaleString()\n    });\n    \n    return currentTable;\n  }\n\n  /**\n   * Highlight selected table with visual indicators\n   * Enhanced with color-coded element classification system\n   */\n  highlightTable(tableData) {\n    if (!tableData || !this.options.enableVisualHighlighting) return;\n\n    try {\n      // Ensure highlighting styles are available\n      this.ensureHighlightingStyles();\n      \n      // Clear any existing highlighting first\n      this.clearTableHighlighting();\n      \n      // Highlight main table container\n      if (tableData.table) {\n        // Classify the main table element\n        const tableType = this.classifyElementType(tableData.table);\n        const tableClass = `steptwo-${tableType}`;\n        \n        // Apply color-coded class\n        tableData.table.classList.add(tableClass);\n        \n        // Add visual label for better UX\n        this.createElementLabel(tableData.table, tableType);\n        \n        // Also maintain legacy class for backward compatibility\n        tableData.table.classList.add('steptwo-selected-table');\n        \n        console.log(`\uD83C\uDFA8 Main table classified as: ${tableType}`);\n      }\n      \n      // Highlight child elements with individual classification\n      if (tableData.children && tableData.children.length > 0) {\n        console.log(`\uD83C\uDFA8 Highlighting ${tableData.children.length} child elements...`);\n        \n        tableData.children.forEach((child, index) => {\n          try {\n            // Classify each child element\n            const childType = this.classifyElementType(child);\n            const childClass = `steptwo-${childType}`;\n            \n            // Apply color-coded class\n            child.classList.add(childClass);\n            \n            // Add visual label (but limit to prevent UI clutter)\n            if (index < 10) { // Only label first 10 elements to avoid clutter\n              this.createElementLabel(child, childType);\n            }\n            \n            // Also maintain legacy class for backward compatibility\n            child.classList.add('steptwo-selected-row');\n            \n          } catch (childError) {\n            console.warn(`\u26A0\uFE0F Failed to highlight child element ${index}:`, childError);\n          }\n        });\n        \n        // Log classification summary\n        const classificationSummary = this.getClassificationSummary(tableData.children);\n        console.log('\uD83D\uDCCA Element classification summary:', classificationSummary);\n      }\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to highlight table:', error);\n    }\n  }\n\n  /**\n   * Get classification summary for debugging and analytics\n   */\n  getClassificationSummary(elements) {\n    const summary = {\n      form: 0,\n      row: 0,\n      col: 0,\n      advanced: 0,\n      total: elements.length\n    };\n\n    elements.forEach(element => {\n      const type = this.classifyElementType(element);\n      summary[type] = (summary[type] || 0) + 1;\n    });\n\n    return summary;\n  }\n\n  /**\n   * Enhanced hover highlighting for real-time feedback\n   * Call this method on mouseover events for interactive highlighting\n   */\n  highlightElementOnHover(element) {\n    if (!element || !this.options.enableVisualHighlighting) return;\n\n    try {\n      // Ensure styles are available\n      this.ensureHighlightingStyles();\n      \n      // Remove existing hover class from all elements\n      document.querySelectorAll('.steptwo-hover').forEach(el => {\n        el.classList.remove('steptwo-hover');\n      });\n      \n      // Add hover class to current element\n      element.classList.add('steptwo-hover');\n      \n      // Classify element and show temporary label\n      const elementType = this.classifyElementType(element);\n      const tempLabel = this.createElementLabel(element, elementType);\n      \n      // Remove label after short delay to avoid clutter\n      setTimeout(() => {\n        if (tempLabel && tempLabel.parentNode) {\n          tempLabel.remove();\n        }\n      }, 2000);\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to highlight element on hover:', error);\n    }\n  }\n\n  /**\n   * Remove hover highlighting\n   * Call this method on mouseout events\n   */\n  removeHoverHighlight(element) {\n    if (!element) return;\n\n    try {\n      element.classList.remove('steptwo-hover');\n      \n      // Remove temporary labels\n      const labels = element.querySelectorAll('.steptwo-element-label');\n      labels.forEach(label => {\n        if (label.parentNode) {\n          label.remove();\n        }\n      });\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to remove hover highlight:', error);\n    }\n  }\n\n  /**\n   * Clear all table highlighting\n   * Ported from reference function c() with enhancements\n   */\n  clearTableHighlighting() {\n    try {\n      // Remove legacy highlighting classes\n      document.querySelectorAll('.steptwo-selected-table').forEach(el => {\n        el.classList.remove('steptwo-selected-table');\n      });\n      \n      document.querySelectorAll('.steptwo-selected-row').forEach(el => {\n        el.classList.remove('steptwo-selected-row');\n      });\n\n      // Remove new color-coded highlighting classes\n      const classesToRemove = [\n        'steptwo-hover', 'steptwo-row', 'steptwo-col', \n        'steptwo-form', 'steptwo-advanced'\n      ];\n      \n      classesToRemove.forEach(className => {\n        document.querySelectorAll(`.${className}`).forEach(el => {\n          el.classList.remove(className);\n        });\n      });\n\n      // Remove element labels\n      document.querySelectorAll('.steptwo-element-label').forEach(label => {\n        if (label.parentNode) {\n          label.parentNode.removeChild(label);\n        }\n      });\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to clear table highlighting:', error);\n    }\n  }\n\n  /**\n   * Classify element type for color-coded visual selection\n   * Ported from Data Scraper's element analysis patterns\n   */\n  classifyElementType(element) {\n    if (!element || !element.tagName) {\n      return 'advanced';\n    }\n\n    const tagName = element.tagName.toLowerCase();\n    const className = (element.className || '').toLowerCase();\n    const id = (element.id || '').toLowerCase();\n    const role = (element.getAttribute('role') || '').toLowerCase();\n    const textContent = (element.textContent || '').trim();\n    const childCount = element.children.length;\n\n    // Form elements - highest priority\n    if (this.isFormElement(element, tagName, className, role)) {\n      return 'form';\n    }\n\n    // Table row elements - data rows\n    if (this.isRowElement(element, tagName, className, role, childCount)) {\n      return 'row';\n    }\n\n    // Table column/cell elements\n    if (this.isColumnElement(element, tagName, className, role)) {\n      return 'col';\n    }\n\n    // Navigation elements\n    if (this.isNavigationElement(element, tagName, className, role, id)) {\n      return 'advanced';\n    }\n\n    // Default to advanced for complex/unknown elements\n    return 'advanced';\n  }\n\n  /**\n   * Check if element is a form-related element\n   */\n  isFormElement(element, tagName, className, role) {\n    // Direct form elements\n    const formTags = ['form', 'input', 'textarea', 'select', 'button', 'fieldset', 'legend', 'label'];\n    if (formTags.includes(tagName)) {\n      return true;\n    }\n\n    // Form-related roles\n    const formRoles = ['form', 'search', 'button', 'textbox', 'combobox', 'checkbox', 'radio'];\n    if (formRoles.includes(role)) {\n      return true;\n    }\n\n    // Form-related class patterns\n    const formClassPatterns = [\n      'form', 'input', 'button', 'submit', 'search', 'login', 'register',\n      'contact', 'subscribe', 'newsletter', 'field', 'control'\n    ];\n    \n    if (formClassPatterns.some(pattern => className.includes(pattern))) {\n      return true;\n    }\n\n    // Check if element contains form elements\n    const hasFormChild = element.querySelector('form, input, textarea, select, button');\n    if (hasFormChild) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if element is a table row element\n   */\n  isRowElement(element, tagName, className, role, childCount) {\n    // Direct row elements\n    if (tagName === 'tr') {\n      return true;\n    }\n\n    // Row-related roles\n    if (role === 'row') {\n      return true;\n    }\n\n    // Row-related class patterns\n    const rowClassPatterns = [\n      'row', 'item', 'entry', 'record', 'line', 'listing',\n      'product', 'result', 'post', 'article'\n    ];\n    \n    if (rowClassPatterns.some(pattern => className.includes(pattern))) {\n      // Additional check: should have reasonable number of children for a row\n      if (childCount >= 2 && childCount <= 20) {\n        return true;\n      }\n    }\n\n    // Check parent context - if parent is a table-like structure\n    const parent = element.parentElement;\n    if (parent) {\n      const parentClass = (parent.className || '').toLowerCase();\n      const parentTag = parent.tagName.toLowerCase();\n      \n      if (parentTag === 'tbody' || parentTag === 'table' || \n          parentClass.includes('table') || parentClass.includes('list') ||\n          parentClass.includes('grid') || parentClass.includes('rows')) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if element is a table column/cell element\n   */\n  isColumnElement(element, tagName, className, role) {\n    // Direct column/cell elements\n    const cellTags = ['td', 'th', 'col', 'colgroup'];\n    if (cellTags.includes(tagName)) {\n      return true;\n    }\n\n    // Cell-related roles\n    const cellRoles = ['cell', 'columnheader', 'rowheader', 'gridcell'];\n    if (cellRoles.includes(role)) {\n      return true;\n    }\n\n    // Column-related class patterns\n    const colClassPatterns = [\n      'cell', 'column', 'col', 'field', 'data', 'value',\n      'price', 'name', 'title', 'description', 'date'\n    ];\n    \n    if (colClassPatterns.some(pattern => className.includes(pattern))) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if element is a navigation element\n   */\n  isNavigationElement(element, tagName, className, role, id) {\n    // Direct navigation elements\n    const navTags = ['nav', 'menu', 'menuitem'];\n    if (navTags.includes(tagName)) {\n      return true;\n    }\n\n    // Navigation-related roles\n    const navRoles = ['navigation', 'menu', 'menubar', 'menuitem', 'tab', 'tablist'];\n    if (navRoles.includes(role)) {\n      return true;\n    }\n\n    // Navigation-related class and ID patterns\n    const navPatterns = [\n      'nav', 'menu', 'breadcrumb', 'pagination', 'tab', 'sidebar',\n      'header', 'footer', 'toolbar', 'controls'\n    ];\n    \n    if (navPatterns.some(pattern => \n        className.includes(pattern) || id.includes(pattern))) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Create element label for visual feedback\n   */\n  createElementLabel(element, elementType) {\n    // Remove existing label if present\n    const existingLabel = element.querySelector('.steptwo-element-label');\n    if (existingLabel) {\n      existingLabel.remove();\n    }\n\n    // Create new label\n    const label = document.createElement('div');\n    label.className = 'steptwo-element-label';\n    \n    // Set label text based on element type\n    const labelTexts = {\n      'form': 'FORM',\n      'row': 'ROW',\n      'col': 'COLUMN',\n      'advanced': 'ELEMENT'\n    };\n    \n    label.textContent = labelTexts[elementType] || 'ELEMENT';\n\n    // Position label relative to element\n    element.style.position = element.style.position || 'relative';\n    element.appendChild(label);\n\n    return label;\n  }\n\n  /**\n   * Ensure highlighting CSS styles are injected\n   */\n  ensureHighlightingStyles() {\n    if (this.highlightingStylesInjected) return;\n\n    const styleId = 'steptwo-table-highlighting';\n    if (document.getElementById(styleId)) {\n      this.highlightingStylesInjected = true;\n      return;\n    }\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      /* Legacy table selection styles - maintained for compatibility */\n      .steptwo-selected-table {\n        border: 3px solid #ff6b35 !important;\n        box-shadow: 0 0 15px rgba(255, 107, 53, 0.4) !important;\n        position: relative !important;\n        z-index: 1000 !important;\n      }\n      \n      .steptwo-selected-row {\n        background-color: rgba(255, 193, 7, 0.2) !important;\n        outline: 1px solid rgba(255, 193, 7, 0.5) !important;\n        position: relative !important;\n      }\n      \n      .steptwo-selected-row:hover {\n        background-color: rgba(255, 193, 7, 0.3) !important;\n      }\n\n      /* Color-coded visual selection system - ported from Data Scraper */\n      .steptwo-hover {\n        background-color: #ffe8d3 !important;\n        outline: 2px solid #ffa726 !important;\n        outline-offset: 1px !important;\n        position: relative !important;\n        z-index: 999995 !important;\n        transition: all 0.2s ease !important;\n      }\n\n      .steptwo-row {\n        border: 2px solid #bd0000 !important;\n        box-shadow: 0 0 8px rgba(189, 0, 0, 0.4) !important;\n        position: relative !important;\n        z-index: 999996 !important;\n        background-color: rgba(189, 0, 0, 0.05) !important;\n      }\n\n      .steptwo-col {\n        border: 2px solid #6565fe !important;\n        box-shadow: 0 0 8px rgba(101, 101, 254, 0.4) !important;\n        position: relative !important;\n        z-index: 999997 !important;\n        background-color: rgba(101, 101, 254, 0.05) !important;\n      }\n\n      .steptwo-form {\n        border: 2px solid #a693fa !important;\n        box-shadow: 0 0 8px rgba(166, 147, 250, 0.4) !important;\n        position: relative !important;\n        z-index: 999998 !important;\n        background-color: rgba(166, 147, 250, 0.05) !important;\n      }\n\n      .steptwo-advanced {\n        border: 2px solid #34e802 !important;\n        box-shadow: 0 0 8px rgba(52, 232, 2, 0.4) !important;\n        position: relative !important;\n        z-index: 999999 !important;\n        background-color: rgba(52, 232, 2, 0.05) !important;\n      }\n\n      .steptwo-element-label {\n        position: absolute !important;\n        top: -20px !important;\n        left: 0 !important;\n        background: #000000 !important;\n        color: #ffffff !important;\n        padding: 2px 6px !important;\n        font-size: 11px !important;\n        font-weight: 500 !important;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n        border-radius: 3px !important;\n        z-index: 1000000 !important;\n        pointer-events: none !important;\n        white-space: nowrap !important;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;\n      }\n\n      /* Ensure labels don't interfere with page layout */\n      .steptwo-element-label::before {\n        content: '' !important;\n        position: absolute !important;\n        top: 100% !important;\n        left: 8px !important;\n        width: 0 !important;\n        height: 0 !important;\n        border-left: 4px solid transparent !important;\n        border-right: 4px solid transparent !important;\n        border-top: 4px solid #000000 !important;\n      }\n\n      /* Hover enhancements for better UX */\n      .steptwo-hover:hover {\n        background-color: #ffd7a3 !important;\n        outline-color: #ff9800 !important;\n      }\n\n      .steptwo-row:hover {\n        border-color: #e60000 !important;\n        box-shadow: 0 0 12px rgba(189, 0, 0, 0.6) !important;\n      }\n\n      .steptwo-col:hover {\n        border-color: #4040ff !important;\n        box-shadow: 0 0 12px rgba(101, 101, 254, 0.6) !important;\n      }\n\n      .steptwo-form:hover {\n        border-color: #8a6ff7 !important;\n        box-shadow: 0 0 12px rgba(166, 147, 250, 0.6) !important;\n      }\n\n      .steptwo-advanced:hover {\n        border-color: #2bd100 !important;\n        box-shadow: 0 0 12px rgba(52, 232, 2, 0.6) !important;\n      }\n\n      /* Ensure proper stacking context */\n      .steptwo-hover,\n      .steptwo-row,\n      .steptwo-col,\n      .steptwo-form,\n      .steptwo-advanced {\n        box-sizing: border-box !important;\n      }\n    `;\n    document.head.appendChild(style);\n    this.highlightingStylesInjected = true;\n  }\n\n  /**\n   * Detect infinite scroll on the current page\n   */\n  detectInfiniteScroll() {\n    try {\n      const indicators = [\n        // Common infinite scroll indicators\n        'infinite-scroll',\n        'endless-scroll', \n        'auto-load',\n        'load-more',\n        'pagination-infinite',\n        // Data attributes\n        '[data-infinite]',\n        '[data-scroll=\"infinite\"]',\n        '[data-auto-load]',\n        // JavaScript libraries\n        '.masonry',\n        '.isotope',\n        '[data-isotope]'\n      ];\n\n      const hasInfiniteScroll = indicators.some(selector => {\n        try {\n          return document.querySelector(selector) !== null;\n        } catch (e) {\n          return false;\n        }\n      });\n\n      // Check for scroll event listeners (heuristic)\n      const hasScrollListeners = window.onscroll !== null || \n        document.addEventListener.toString().includes('scroll');\n\n      this.infiniteScrollDetected = hasInfiniteScroll || hasScrollListeners;\n\n      if (this.infiniteScrollDetected) {\n        console.log('\uD83D\uDD04 Infinite scroll detected on this page');\n      }\n\n      return this.infiniteScrollDetected;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Infinite scroll detection failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Performance-protected infinite scroll detection\n   * Prevents performance issues on large pages with infinite scroll\n   */\n  detectInfiniteScrollWithProtection() {\n    try {\n      // Throttle detection to prevent performance issues\n      if (this.infiniteScrollDetectionTime && \n          Date.now() - this.infiniteScrollDetectionTime < 5000) {\n        return this.infiniteScrollDetected;\n      }\n      \n      this.infiniteScrollDetectionTime = Date.now();\n      \n      // Use a timeout to prevent blocking\n      setTimeout(() => {\n        try {\n          const result = this.detectInfiniteScroll();\n          \n          // If infinite scroll is detected on a large page, warn about potential performance impact\n          const pageSize = document.querySelectorAll('*').length;\n          if (result && pageSize > 3000) {\n            console.warn('\u26A0\uFE0F Infinite scroll detected on large page - table detection may be affected by dynamic content');\n          }\n          \n        } catch (error) {\n          console.warn('\u26A0\uFE0F Protected infinite scroll detection failed:', error);\n        }\n      }, 50); // Small delay to prevent blocking\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Infinite scroll protection failed:', error);\n    }\n  }\n\n  /**\n   * Get current selected table\n   */\n  getCurrentTable() {\n    if (this.detectedTables.length === 0 || this.currentTableIndex < 0) {\n      return null;\n    }\n    return this.detectedTables[this.currentTableIndex];\n  }\n\n  /**\n   * Get all detected tables\n   */\n  getAllTables() {\n    return this.detectedTables;\n  }\n\n  /**\n   * Extract structured data from detected table for export\n   */\n  extractTableData(tableData = null) {\n    const table = tableData || this.getCurrentTable();\n    if (!table) return null;\n\n    try {\n      const rows = [];\n      const children = table.children || [];\n      \n      // Extract data from each child element\n      children.forEach((child, index) => {\n        const cells = Array.from(child.children || [child]);\n        const rowData = cells.map(cell => ({\n          text: (cell.textContent || '').trim(),\n          html: cell.innerHTML || '',\n          tag: cell.tagName.toLowerCase(),\n          classes: this.getClassList(cell),\n          element: cell\n        }));\n        \n        if (rowData.length > 0 && rowData.some(cell => cell.text.length > 0)) {\n          rows.push({\n            index: index,\n            cells: rowData,\n            element: child\n          });\n        }\n      });\n\n      // Determine headers (usually first row or rows with th tags)\n      let headers = [];\n      let dataRows = rows;\n      \n      if (rows.length > 0) {\n        const firstRow = rows[0];\n        const hasThElements = firstRow.cells.some(cell => cell.tag === 'th');\n        \n        if (hasThElements || firstRow.cells.every(cell => cell.text.length > 0)) {\n          headers = firstRow.cells.map(cell => cell.text);\n          dataRows = rows.slice(1);\n        }\n      }\n\n      return {\n        tableElement: table.table,\n        selector: table.selector,\n        rows: rows,\n        headers: headers,\n        dataRows: dataRows,\n        metadata: {\n          selector: table.selector,\n          area: table.area,\n          confidence: table.confidence,\n          goodClasses: table.goodClasses,\n          childrenCount: table.childrenCount,\n          score: table.score,\n          patternStrength: table.patternStrength || 0,\n          infiniteScrollDetected: this.infiniteScrollDetected,\n          timestamp: table.timestamp\n        }\n      };\n\n    } catch (error) {\n      console.error('\u274C Failed to extract table data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Enable/disable visual highlighting\n   */\n  setVisualHighlighting(enabled) {\n    this.options.enableVisualHighlighting = enabled;\n    if (!enabled) {\n      this.clearTableHighlighting();\n    }\n  }\n\n  /**\n   * Reset detection state\n   */\n  reset() {\n    this.clearTableHighlighting();\n    this.detectedTables = [];\n    this.currentTableIndex = 0;\n    this.isActive = false;\n    this.patternCache.clear();\n    console.log('\uD83D\uDD04 Table detection system reset');\n  }\n\n  /**\n   * Get detection statistics\n   */\n  getStats() {\n    return {\n      tablesDetected: this.detectedTables.length,\n      currentTableIndex: this.currentTableIndex,\n      infiniteScrollDetected: this.infiniteScrollDetected,\n      isActive: this.isActive,\n      averageConfidence: this.detectedTables.length > 0 ? \n        this.detectedTables.reduce((sum, table) => sum + table.confidence, 0) / this.detectedTables.length : 0,\n      topScore: this.detectedTables.length > 0 ? this.detectedTables[0].score : 0\n    };\n  }\n}\n\n// Make available globally\nif (typeof window !== 'undefined') {\n  window.TableDetectionSystem = TableDetectionSystem;\n}\n\nconsole.log('\u2705 Table Detection System loaded successfully');// content-error-enhancement.js - Comprehensive error handling enhancement for content scripts\n// Integrates with existing content bundle to provide enterprise-grade error handling and monitoring\n\nconsole.log('\uD83D\uDEE1\uFE0F Loading Content Script Error Enhancement...');\n\n/**\n * Content Script Error Enhancement System\n * Provides comprehensive error handling, performance monitoring, and reliability for content scripts\n */\nclass ContentScriptErrorEnhancement {\n  constructor(options = {}) {\n    this.options = {\n      // Error handling settings\n      enableErrorRecovery: options.enableErrorRecovery !== false,\n      enablePerformanceMonitoring: options.enablePerformanceMonitoring !== false,\n      enableMemoryMonitoring: options.enableMemoryMonitoring !== false,\n      enableDomSafeguards: options.enableDomSafeguards !== false,\n      \n      // Performance thresholds\n      maxMemoryUsage: options.maxMemoryUsage || 100 * 1024 * 1024, // 100MB\n      maxDomOperationTime: options.maxDomOperationTime || 2000, // 2 seconds\n      maxElementsToProcess: options.maxElementsToProcess || 1000,\n      batchSize: options.batchSize || 50,\n      batchDelay: options.batchDelay || 10,\n      \n      // Circuit breaker settings\n      circuitBreakerThreshold: options.circuitBreakerThreshold || 5,\n      circuitBreakerTimeout: options.circuitBreakerTimeout || 60000, // 1 minute\n      \n      // Retry settings\n      maxRetryAttempts: options.maxRetryAttempts || 3,\n      retryDelayBase: options.retryDelayBase || 500,\n      retryDelayMax: options.retryDelayMax || 5000,\n      \n      ...options\n    };\n\n    // State management\n    this.errorHandler = null;\n    this.performanceMonitor = null;\n    this.isInitialized = false;\n    this.activeOperations = new Map();\n    this.circuitBreakers = new Map();\n    this.cleanupTasks = [];\n    this.memoryChecks = [];\n\n    // DOM operation safeguards\n    this.domOperationQueue = [];\n    this.isDomOperationActive = false;\n    this.lastDomCheck = Date.now();\n\n    // Error statistics\n    this.errorStats = {\n      totalErrors: 0,\n      domErrors: 0,\n      memoryErrors: 0,\n      networkErrors: 0,\n      recoveredErrors: 0,\n      circuitBreakerTrips: 0\n    };\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the error enhancement system\n   */\n  async initialize() {\n    try {\n      console.log('\uD83D\uDD04 Initializing Content Script Error Enhancement...');\n\n      // Initialize error handler if available\n      if (typeof ErrorHandlingSystem !== 'undefined') {\n        this.errorHandler = new ErrorHandlingSystem({\n          enableConsoleLogging: true,\n          enableUserNotifications: false, // Content scripts shouldn't show notifications\n          enableErrorReporting: true,\n          maxRetryAttempts: this.options.maxRetryAttempts,\n          circuitBreakerThreshold: this.options.circuitBreakerThreshold,\n          enableRecoveryMechanisms: this.options.enableErrorRecovery\n        });\n        console.log('\u2705 Content script error handler initialized');\n      } else {\n        this.errorHandler = this.createFallbackErrorHandler();\n        console.warn('\u26A0\uFE0F Using fallback error handler');\n      }\n\n      // Initialize performance monitor if available\n      if (typeof PerformanceMonitoringSystem !== 'undefined') {\n        this.performanceMonitor = new PerformanceMonitoringSystem({\n          enableMemoryMonitoring: this.options.enableMemoryMonitoring,\n          enablePerformanceTracking: this.options.enablePerformanceMonitoring,\n          enableHealthChecks: false, // Simplified for content scripts\n          memoryWarningThreshold: this.options.maxMemoryUsage * 0.8,\n          memoryCriticalThreshold: this.options.maxMemoryUsage,\n          slowOperationThreshold: this.options.maxDomOperationTime,\n          enableConsoleReporting: true,\n          reportingInterval: 60000 // 1 minute\n        });\n\n        await this.performanceMonitor.initialize();\n        console.log('\u2705 Content script performance monitor initialized');\n      } else {\n        console.warn('\u26A0\uFE0F PerformanceMonitoringSystem not available');\n      }\n\n      // Set up enhanced global error handling\n      this.setupGlobalErrorHandling();\n\n      // Set up DOM safeguards\n      if (this.options.enableDomSafeguards) {\n        this.setupDomSafeguards();\n      }\n\n      // Set up memory monitoring\n      if (this.options.enableMemoryMonitoring) {\n        this.setupMemoryMonitoring();\n      }\n\n      // Set up resource cleanup\n      this.setupResourceCleanup();\n\n      this.isInitialized = true;\n      console.log('\u2705 Content Script Error Enhancement initialized successfully');\n\n    } catch (error) {\n      console.error('\u274C Failed to initialize Content Script Error Enhancement:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enhanced DOM operation wrapper with comprehensive error handling\n   */\n  async safeDomOperation(operation, description = 'DOM operation', options = {}) {\n    if (!this.isInitialized) {\n      throw new Error('Error enhancement system not initialized');\n    }\n\n    const operationId = this.generateOperationId();\n    const startTime = Date.now();\n    const timeout = options.timeout || this.options.maxDomOperationTime;\n    const maxRetries = options.maxRetries || this.options.maxRetryAttempts;\n    \n    // Check circuit breaker\n    if (this.isCircuitBreakerOpen(description)) {\n      throw new Error(`Circuit breaker open for ${description}`);\n    }\n\n    // Track operation\n    const tracker = this.performanceMonitor?.startOperation(description, 'dom') || { end: () => {} };\n    this.activeOperations.set(operationId, {\n      description,\n      startTime,\n      timeout,\n      tracker\n    });\n\n    let attempt = 0;\n    let lastError = null;\n\n    while (attempt < maxRetries) {\n      try {\n        // Check DOM availability\n        if (!document || !document.body) {\n          throw new Error('DOM not available');\n        }\n\n        // Check memory before operation\n        await this.checkMemoryUsage();\n\n        // Execute operation with timeout\n        const result = await Promise.race([\n          Promise.resolve(operation()),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(`Operation timeout: ${description}`)), timeout)\n          )\n        ]);\n\n        // Success - update circuit breaker and cleanup\n        this.updateCircuitBreaker(description, true);\n        this.activeOperations.delete(operationId);\n        tracker.end({ success: true, attempts: attempt + 1 });\n\n        return result;\n\n      } catch (error) {\n        lastError = error;\n        attempt++;\n        \n        console.warn(`\u26A0\uFE0F DOM operation failed (attempt ${attempt}/${maxRetries}): ${description}`, error);\n\n        // Classify and handle error\n        const errorType = this.classifyDomError(error);\n        \n        if (this.errorHandler) {\n          this.errorHandler.handleError(error, `DOM Operation: ${description}`, {\n            operationId,\n            attempt,\n            maxRetries,\n            timeout,\n            errorType,\n            url: window.location.href\n          }, this.getErrorSeverity(errorType, attempt, maxRetries));\n        }\n\n        // Update error statistics\n        this.errorStats.totalErrors++;\n        this.errorStats.domErrors++;\n\n        // Check if error is retryable\n        if (!this.isRetryableError(errorType) || attempt >= maxRetries) {\n          break;\n        }\n\n        // Wait before retry with exponential backoff\n        const delay = Math.min(\n          this.options.retryDelayBase * Math.pow(2, attempt - 1),\n          this.options.retryDelayMax\n        );\n        await this.delay(delay);\n      }\n    }\n\n    // All attempts failed\n    this.updateCircuitBreaker(description, false);\n    this.activeOperations.delete(operationId);\n    tracker.end({ success: false, attempts: attempt, error: lastError.message });\n\n    throw new Error(`DOM operation failed after ${attempt} attempts: ${lastError.message}`);\n  }\n\n  /**\n   * Safe DOM element batch processing with memory and performance safeguards\n   */\n  async safeBatchProcess(elements, processor, options = {}) {\n    if (!Array.isArray(elements)) {\n      throw new Error('Elements must be an array');\n    }\n\n    const batchSize = options.batchSize || this.options.batchSize;\n    const batchDelay = options.batchDelay || this.options.batchDelay;\n    const maxElements = options.maxElements || this.options.maxElementsToProcess;\n    const description = options.description || 'Batch processing';\n\n    // Limit elements to prevent memory issues\n    const processElements = elements.slice(0, maxElements);\n    const results = [];\n    let processedCount = 0;\n\n    console.log(`\uD83D\uDD04 Starting safe batch processing: ${processElements.length} elements in batches of ${batchSize}`);\n\n    for (let i = 0; i < processElements.length; i += batchSize) {\n      const batch = processElements.slice(i, i + batchSize);\n      \n      try {\n        // Check memory before each batch\n        await this.checkMemoryUsage();\n\n        // Process batch with timeout\n        const batchResults = await this.safeDomOperation(async () => {\n          const batchPromises = batch.map(async (element, index) => {\n            try {\n              return await processor(element, i + index);\n            } catch (error) {\n              console.warn(`\u26A0\uFE0F Batch item failed:`, error);\n              return { error: error.message, element, index: i + index };\n            }\n          });\n\n          return await Promise.all(batchPromises);\n        }, `${description} - batch ${Math.floor(i / batchSize) + 1}`, {\n          timeout: this.options.maxDomOperationTime * 2 // Longer timeout for batches\n        });\n\n        results.push(...batchResults);\n        processedCount += batch.length;\n\n        // Progress logging\n        const progress = Math.round((processedCount / processElements.length) * 100);\n        console.log(`\uD83D\uDCCA Batch progress: ${processedCount}/${processElements.length} (${progress}%)`);\n\n        // Delay between batches to prevent blocking\n        if (i + batchSize < processElements.length && batchDelay > 0) {\n          await this.delay(batchDelay);\n        }\n\n      } catch (error) {\n        console.error(`\u274C Batch processing failed at batch ${Math.floor(i / batchSize) + 1}:`, error);\n        \n        if (this.errorHandler) {\n          this.errorHandler.handleError(error, `Batch Processing: ${description}`, {\n            batchIndex: Math.floor(i / batchSize),\n            batchSize,\n            processedCount,\n            totalElements: processElements.length\n          }, 'medium');\n        }\n\n        // Continue with next batch unless it's a critical error\n        if (error.message.includes('memory') || error.message.includes('timeout')) {\n          throw error; // Stop processing for critical errors\n        }\n      }\n    }\n\n    console.log(`\u2705 Batch processing completed: ${processedCount}/${processElements.length} elements processed`);\n    return results;\n  }\n\n  /**\n   * Safe network request wrapper with retry and circuit breaker\n   */\n  async safeNetworkRequest(requestFunction, description = 'Network request', options = {}) {\n    const maxRetries = options.maxRetries || this.options.maxRetryAttempts;\n    const timeout = options.timeout || 10000; // 10 seconds for network\n    \n    // Check circuit breaker\n    if (this.isCircuitBreakerOpen(description)) {\n      throw new Error(`Circuit breaker open for ${description}`);\n    }\n\n    const tracker = this.performanceMonitor?.startOperation(description, 'network') || { end: () => {} };\n\n    let attempt = 0;\n    let lastError = null;\n\n    while (attempt < maxRetries) {\n      try {\n        // Execute request with timeout\n        const result = await Promise.race([\n          Promise.resolve(requestFunction()),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(`Network timeout: ${description}`)), timeout)\n          )\n        ]);\n\n        // Success\n        this.updateCircuitBreaker(description, true);\n        tracker.end({ success: true, attempts: attempt + 1 });\n        \n        return result;\n\n      } catch (error) {\n        lastError = error;\n        attempt++;\n\n        console.warn(`\u26A0\uFE0F Network request failed (attempt ${attempt}/${maxRetries}): ${description}`, error);\n\n        // Classify network error\n        const errorType = this.classifyNetworkError(error);\n        \n        if (this.errorHandler) {\n          this.errorHandler.handleError(error, `Network Request: ${description}`, {\n            attempt,\n            maxRetries,\n            timeout,\n            errorType\n          }, this.getErrorSeverity(errorType, attempt, maxRetries));\n        }\n\n        this.errorStats.totalErrors++;\n        this.errorStats.networkErrors++;\n\n        // Check if error is retryable\n        if (!this.isRetryableNetworkError(errorType) || attempt >= maxRetries) {\n          break;\n        }\n\n        // Wait before retry\n        const delay = Math.min(\n          this.options.retryDelayBase * Math.pow(2, attempt - 1),\n          this.options.retryDelayMax\n        );\n        await this.delay(delay);\n      }\n    }\n\n    // All attempts failed\n    this.updateCircuitBreaker(description, false);\n    tracker.end({ success: false, attempts: attempt, error: lastError.message });\n\n    throw new Error(`Network request failed after ${attempt} attempts: ${lastError.message}`);\n  }\n\n  /**\n   * Setup global error handling for content scripts\n   */\n  setupGlobalErrorHandling() {\n    // Enhanced window error handler\n    const originalErrorHandler = window.onerror;\n    window.onerror = (message, source, lineno, colno, error) => {\n      console.error('\uD83D\uDEA8 Global content script error:', { message, source, lineno, colno, error });\n      \n      if (this.errorHandler) {\n        this.errorHandler.handleError(error || message, 'Global Content Script Error', {\n          source,\n          lineno,\n          colno,\n          url: window.location.href\n        }, 'high');\n      }\n\n      this.errorStats.totalErrors++;\n\n      // Call original handler if it exists\n      if (originalErrorHandler) {\n        return originalErrorHandler(message, source, lineno, colno, error);\n      }\n      \n      return false; // Let browser handle the error\n    };\n\n    // Enhanced unhandled promise rejection handler\n    const originalRejectionHandler = window.onunhandledrejection;\n    window.onunhandledrejection = (event) => {\n      console.error('\uD83D\uDEA8 Unhandled promise rejection in content script:', event.reason);\n      \n      if (this.errorHandler) {\n        this.errorHandler.handleError(event.reason, 'Unhandled Promise Rejection', {\n          promise: event.promise.toString(),\n          url: window.location.href\n        }, 'high');\n      }\n\n      this.errorStats.totalErrors++;\n\n      // Call original handler if it exists\n      if (originalRejectionHandler) {\n        return originalRejectionHandler(event);\n      }\n    };\n  }\n\n  /**\n   * Setup DOM safeguards\n   */\n  setupDomSafeguards() {\n    // Monitor for DOM mutations that might affect performance\n    if (typeof MutationObserver !== 'undefined') {\n      const observer = new MutationObserver((mutations) => {\n        try {\n          // Check for excessive mutations\n          if (mutations.length > 100) {\n            console.warn('\u26A0\uFE0F High DOM mutation activity detected:', mutations.length);\n            \n            if (this.errorHandler) {\n              this.errorHandler.handleError(\n                new Error(`High DOM mutation activity: ${mutations.length} mutations`),\n                'DOM Mutation Monitor',\n                { mutationCount: mutations.length, url: window.location.href },\n                'medium'\n              );\n            }\n          }\n        } catch (error) {\n          console.error('\u274C DOM mutation observer error:', error);\n        }\n      });\n\n      observer.observe(document.body || document.documentElement, {\n        childList: true,\n        subtree: true,\n        attributes: false // Don't monitor attribute changes to reduce overhead\n      });\n\n      this.cleanupTasks.push(() => observer.disconnect());\n    }\n  }\n\n  /**\n   * Setup memory monitoring\n   */\n  setupMemoryMonitoring() {\n    const checkMemory = () => {\n      try {\n        this.checkMemoryUsage();\n      } catch (error) {\n        console.error('\u274C Memory check failed:', error);\n      }\n    };\n\n    // Check memory every 30 seconds\n    const memoryInterval = setInterval(checkMemory, PERFORMANCE_CONFIG.MEMORY_SAMPLE_INTERVAL_MS);\n    this.cleanupTasks.push(() => clearInterval(memoryInterval));\n\n    // Initial memory check\n    setTimeout(checkMemory, 1000);\n  }\n\n  /**\n   * Check memory usage and take action if needed\n   */\n  async checkMemoryUsage() {\n    if (!this.options.enableMemoryMonitoring) {\n      return;\n    }\n\n    try {\n      const memoryInfo = performance.memory;\n      if (!memoryInfo) {\n        return; // Memory API not available\n      }\n\n      const currentUsage = memoryInfo.usedJSHeapSize;\n      const threshold = this.options.maxMemoryUsage;\n\n      if (currentUsage > threshold) {\n        console.warn(`\u26A0\uFE0F High memory usage detected: ${this.formatBytes(currentUsage)}`);\n        \n        this.errorStats.memoryErrors++;\n\n        if (this.errorHandler) {\n          this.errorHandler.handleError(\n            new Error(`High memory usage: ${this.formatBytes(currentUsage)}`),\n            'Memory Monitor',\n            {\n              currentUsage,\n              threshold,\n              activeOperations: this.activeOperations.size,\n              url: window.location.href\n            },\n            currentUsage > threshold * 1.2 ? 'high' : 'medium'\n          );\n        }\n\n        // Trigger cleanup\n        await this.performCleanup();\n\n        // Force garbage collection if available\n        if (typeof window !== 'undefined' && window.gc) {\n          console.log('\uD83D\uDDD1\uFE0F Triggering garbage collection...');\n          window.gc();\n        }\n      }\n    } catch (error) {\n      console.error('\u274C Memory usage check failed:', error);\n    }\n  }\n\n  /**\n   * Setup resource cleanup\n   */\n  setupResourceCleanup() {\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.performCleanup();\n    });\n\n    // Periodic cleanup\n    const cleanupInterval = setInterval(() => {\n      this.performCleanup();\n    }, 300000); // Every 5 minutes\n\n    this.cleanupTasks.push(() => clearInterval(cleanupInterval));\n  }\n\n  /**\n   * Perform resource cleanup\n   */\n  async performCleanup() {\n    try {\n      console.log('\uD83E\uDDF9 Performing content script cleanup...');\n\n      // Cancel active operations that are taking too long\n      const now = Date.now();\n      for (const [operationId, operation] of this.activeOperations) {\n        if (now - operation.startTime > operation.timeout * 2) {\n          console.warn(`\u26A0\uFE0F Canceling stuck operation: ${operation.description}`);\n          operation.tracker.end({ success: false, reason: 'Cleanup timeout' });\n          this.activeOperations.delete(operationId);\n        }\n      }\n\n      // Run all cleanup tasks\n      this.cleanupTasks.forEach((task, index) => {\n        try {\n          task();\n        } catch (error) {\n          console.warn(`\u26A0\uFE0F Cleanup task ${index} failed:`, error);\n        }\n      });\n\n      console.log('\u2705 Content script cleanup completed');\n    } catch (error) {\n      console.error('\u274C Cleanup failed:', error);\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  createFallbackErrorHandler() {\n    return {\n      handleError: (error, context, metadata, severity) => {\n        console.error(`[${severity}] Content Script ${context}:`, error, metadata);\n      }\n    };\n  }\n\n  classifyDomError(error) {\n    const message = error.message.toLowerCase();\n    \n    if (message.includes('timeout')) return 'timeout';\n    if (message.includes('memory')) return 'memory';\n    if (message.includes('permission')) return 'permission';\n    if (message.includes('not found') || message.includes('null')) return 'element-not-found';\n    if (message.includes('blocked')) return 'blocked';\n    \n    return 'unknown';\n  }\n\n  classifyNetworkError(error) {\n    const message = error.message.toLowerCase();\n    \n    if (message.includes('timeout')) return 'timeout';\n    if (message.includes('network')) return 'network';\n    if (message.includes('cors')) return 'cors';\n    if (message.includes('404')) return 'not-found';\n    if (message.includes('403') || message.includes('401')) return 'permission';\n    if (message.includes('429')) return 'rate-limit';\n    if (message.includes('500') || message.includes('502') || message.includes('503')) return 'server';\n    \n    return 'unknown';\n  }\n\n  isRetryableError(errorType) {\n    return ['timeout', 'network', 'server', 'rate-limit'].includes(errorType);\n  }\n\n  isRetryableNetworkError(errorType) {\n    return ['timeout', 'network', 'server', 'rate-limit'].includes(errorType);\n  }\n\n  getErrorSeverity(errorType, attempt, maxAttempts) {\n    if (errorType === 'memory' || errorType === 'permission') return 'high';\n    if (attempt >= maxAttempts) return 'medium';\n    return 'low';\n  }\n\n  isCircuitBreakerOpen(operation) {\n    const breaker = this.circuitBreakers.get(operation);\n    if (!breaker) return false;\n\n    if (breaker.state === 'open') {\n      // Check if timeout has passed\n      if (Date.now() - breaker.lastFailure > this.options.circuitBreakerTimeout) {\n        breaker.state = 'half-open';\n        breaker.failures = 0;\n        return false;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  updateCircuitBreaker(operation, success) {\n    let breaker = this.circuitBreakers.get(operation);\n    if (!breaker) {\n      breaker = { state: 'closed', failures: 0, lastFailure: 0 };\n      this.circuitBreakers.set(operation, breaker);\n    }\n\n    if (success) {\n      breaker.failures = 0;\n      breaker.state = 'closed';\n    } else {\n      breaker.failures++;\n      breaker.lastFailure = Date.now();\n      \n      if (breaker.failures >= this.options.circuitBreakerThreshold) {\n        breaker.state = 'open';\n        this.errorStats.circuitBreakerTrips++;\n        console.warn(`\uD83D\uDD0C Circuit breaker opened for: ${operation}`);\n      }\n    }\n  }\n\n  generateOperationId() {\n    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get error statistics\n   */\n  getStats() {\n    return {\n      ...this.errorStats,\n      activeOperations: this.activeOperations.size,\n      circuitBreakers: Array.from(this.circuitBreakers.entries()),\n      memoryUsage: performance.memory ? this.formatBytes(performance.memory.usedJSHeapSize) : 'N/A',\n      isInitialized: this.isInitialized\n    };\n  }\n\n  /**\n   * Shutdown the enhancement system\n   */\n  shutdown() {\n    console.log('\u23F9\uFE0F Shutting down Content Script Error Enhancement...');\n    \n    this.performCleanup();\n    \n    if (this.performanceMonitor && this.performanceMonitor.shutdown) {\n      this.performanceMonitor.shutdown();\n    }\n\n    this.isInitialized = false;\n    console.log('\u2705 Content Script Error Enhancement shutdown complete');\n  }\n}\n\n// Global instance for content scripts\nlet contentErrorEnhancement = null;\n\n// Initialize enhancement system when DOM is ready\nif (document.readyState === 'complete' || document.readyState === 'interactive') {\n  initializeEnhancement();\n} else {\n  document.addEventListener('DOMContentLoaded', initializeEnhancement);\n}\n\nasync function initializeEnhancement() {\n  try {\n    if (!contentErrorEnhancement) {\n      contentErrorEnhancement = new ContentScriptErrorEnhancement({\n        enableErrorRecovery: true,\n        enablePerformanceMonitoring: true,\n        enableMemoryMonitoring: true,\n        enableDomSafeguards: true\n      });\n      \n      // Make globally available\n      window.contentErrorEnhancement = contentErrorEnhancement;\n      \n      console.log('\u2705 Content Script Error Enhancement ready');\n    }\n  } catch (error) {\n    console.error('\u274C Failed to initialize Content Script Error Enhancement:', error);\n  }\n}\n\n// Export for use in other content scripts\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ContentScriptErrorEnhancement;\n} else if (typeof window !== 'undefined') {\n  window.ContentScriptErrorEnhancement = ContentScriptErrorEnhancement;\n}\n\nconsole.log('\u2705 Content Script Error Enhancement loaded successfully');// advanced-collector-system.js - Comprehensive Image Collector System for STEPTWO\n// Implements 8 advanced detection methods with 3-tier feeds categorization and validation pipeline\n// Based on reference extension analysis for dramatic improvement in gallery scraping capabilities\n\nconsole.log('\uD83D\uDE80 Loading Advanced Collector System...');\n\n/**\n * Advanced Collector System - Enterprise-grade image detection and collection\n * Implements the 8 advanced detection methods from the reference extension\n * Enhanced with Smart Pattern Recognition for intelligent gallery detection\n */\nclass AdvancedCollectorSystem {\n  constructor(options = {}) {\n    this.options = {\n      // Performance settings\n      concurrency: options.concurrency || 5,\n      timeout: options.timeout || 30000,\n      maxDocuments: options.maxDocuments || 10,\n      maxDepth: options.maxDepth || 2,\n      \n      // Performance safeguards - CRITICAL FIXES REQUIRED\n      maxNodesPerDetector: options.maxNodesPerDetector || 1000,\n      timeBudgetPerPass: options.timeBudgetPerPass || 5000, // 5 seconds max per detection method\n      largePageThreshold: options.largePageThreshold || 3000, // DOM element count threshold\n      \n      // Quality filtering\n      minImageSize: options.minImageSize || 100,\n      minImageDimensions: options.minImageDimensions || { width: 100, height: 100 },\n      supportedFormats: options.supportedFormats || ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp'],\n      customExtensions: options.customExtensions || ['pdf', 'zip', 'rar'],\n      \n      // Detection methods configuration\n      enablePerformanceAPI: options.enablePerformanceAPI !== false,\n      enableShadowDOM: options.enableShadowDOM !== false,\n      enableAdvancedBackground: options.enableAdvancedBackground !== false,\n      enableSVGProcessing: options.enableSVGProcessing !== false,\n      enableLazyLoading: options.enableLazyLoading !== false,\n      enableUrlExtraction: options.enableUrlExtraction !== false,\n      enableCustomExtensions: options.enableCustomExtensions !== false,\n      enableMultiDocument: options.enableMultiDocument === true,\n      \n      ...options\n    };\n\n    // 3-tier feeds categorization system\n    this.feeds = {\n      high_confidence: [],    // Images with size data or known patterns\n      same_origin: [],        // Same domain resources\n      external: [],           // Cross-domain resources\n      pending: []             // Awaiting validation\n    };\n    \n    // State management\n    this.processed = [];\n    this.cache = new Set();\n    this.urlCache = new Set();\n    this.documentQueue = [];\n    this.scannedUrls = new Set();\n    this.validationQueue = [];\n    this.positionTracker = new Map();\n    this.positionCounter = 0;\n    \n    // Performance tracking\n    this.metrics = {\n      totalFound: 0,\n      categorized: 0,\n      validated: 0,\n      duplicates: 0,\n      errors: 0,\n      processingTime: 0,\n      methodStats: {\n        performanceAPI: 0,\n        shadowDOM: 0,\n        advancedBackground: 0,\n        svgProcessing: 0,\n        lazyLoading: 0,\n        urlExtraction: 0,\n        customExtensions: 0,\n        multiDocument: 0\n      }\n    };\n    \n    // Active jobs tracking\n    this.activeJobs = 0;\n    this.isActive = false;\n    \n    // Rate limiting for heavy detectors\n    this.rateLimiters = {\n      performanceAPI: { lastCall: 0, minInterval: 100 },\n      shadowDOM: { lastCall: 0, minInterval: 200 },\n      advancedBackground: { lastCall: 0, minInterval: 150 },\n      multiDocument: { lastCall: 0, minInterval: 300 }\n    };\n    \n    // Initialize Enhanced CSS Selector system (async)\n    this.enhancedCSSSelector = null;\n    this.enhancedSelectorInitialized = false;\n    \n    // Initialize Smart Pattern Recognition system (async)\n    this.smartPatternRecognition = null;\n    this.smartPatternInitialized = false;\n    \n    // Initialize Enhanced CSS Selector async without blocking constructor\n    this.initializeEnhancedCSSSelector()\n      .then(() => {\n        this.enhancedSelectorInitialized = true;\n        console.log('\uD83C\uDFAF Enhanced CSS Selector initialization completed');\n      })\n      .catch(error => {\n        console.warn('\u26A0\uFE0F Enhanced CSS Selector initialization failed:', error);\n        this.enhancedSelectorInitialized = true; // Mark as complete even on failure\n      });\n    \n    // Initialize Smart Pattern Recognition async without blocking constructor\n    this.initializeSmartPatternRecognition()\n      .then(() => {\n        this.smartPatternInitialized = true;\n        console.log('\uD83C\uDFAF Smart Pattern Recognition initialization completed');\n      })\n      .catch(error => {\n        console.warn('\u26A0\uFE0F Smart Pattern Recognition initialization failed:', error);\n        this.smartPatternInitialized = true; // Mark as complete even on failure\n      });\n\n    // Initialize Table Detection System\n    this.tableDetectionSystem = null;\n    this.tableDetectionInitialized = false;\n    this.initializeTableDetection()\n      .then(() => {\n        this.tableDetectionInitialized = true;\n        console.log('\uD83D\uDD0D Table Detection System initialization completed');\n      })\n      .catch(error => {\n        console.warn('\u26A0\uFE0F Table Detection System initialization failed:', error);\n        this.tableDetectionInitialized = true;\n      });\n  }\n\n  /**\n   * Main collection entry point - orchestrates enhanced detection with EnhancedImageManager\n   */\n  async collectImages(options = {}) {\n    console.log('\uD83D\uDD0D Starting comprehensive image collection with enhanced methods...');\n    const startTime = performance.now();\n    this.isActive = true;\n    \n    try {\n      // Reset state\n      this.resetCollectionState();\n      \n      // Initialize Enhanced Image Manager for primary detection\n      let enhancedImageManager = null;\n      if (typeof EnhancedImageManager !== 'undefined') {\n        enhancedImageManager = new EnhancedImageManager({\n          enableShadowDOM: this.options.enableShadowDOM,\n          enableSrcsetDetection: this.options.enableSrcsetDetection !== false,\n          enableBackgroundImages: this.options.enableAdvancedBackground,\n          enableUrlExtraction: this.options.enableUrlExtraction,\n          enableInputImages: this.options.enableInputImages !== false,\n          enableLinkDetection: this.options.enableLinkDetection !== false,\n          maxNodesPerMethod: this.options.maxNodesPerDetector,\n          minImageWidth: this.options.minImageDimensions?.width || 50,\n          minImageHeight: this.options.minImageDimensions?.height || 50\n        });\n        console.log('\u2705 Enhanced Image Manager initialized');\n      }\n\n      // Check for large page and apply performance safeguards\n      const domElementCount = await this.safeQuerySelectorAll('*', { countOnly: true });\n      if (domElementCount > this.options.largePageThreshold) {\n        console.warn(`\u26A0\uFE0F Large page detected (${domElementCount} elements), applying performance safeguards`);\n        this.options.maxNodesPerDetector = Math.min(this.options.maxNodesPerDetector, 500);\n        this.options.timeBudgetPerPass = Math.min(this.options.timeBudgetPerPass, 3000);\n      }\n      \n      // Phase 1: Enhanced detection using Enhanced Image Manager\n      let enhancedImages = [];\n      if (enhancedImageManager) {\n        try {\n          enhancedImages = await enhancedImageManager.getImages();\n          console.log(`\uD83C\uDFAF Enhanced detection found ${enhancedImages.length} images`);\n          \n          // Process enhanced images through our categorization system\n          for (const img of enhancedImages) {\n            const imageObj = {\n              src: img.src,\n              type: img.type || 'IMG',\n              width: img.width || 0,\n              height: img.height || 0,\n              discoveryMethod: 'enhanced-manager',\n              confidence: 0.85,\n              metadata: {\n                ...img.metadata,\n                fromEnhancedManager: true,\n                originalType: img.type\n              }\n            };\n            \n            await this.categorizeImageEnhanced(imageObj, { method: 'enhanced-manager' });\n            this.addToFeed(imageObj, this.determineCategory(imageObj));\n          }\n          \n          // Update metrics\n          this.metrics.totalFound += enhancedImages.length;\n          Object.assign(this.metrics.methodStats, enhancedImageManager.getMetrics().methodStats);\n          \n        } catch (error) {\n          console.warn('\u26A0\uFE0F Enhanced Image Manager failed:', error);\n          this.metrics.errors++;\n        }\n      }\n      \n      // Phase 2: Table Detection for structured data analysis\n      await this.detectTabularStructures(options);\n      \n      // Phase 3: Supplementary detection methods for additional coverage\n      const supplementaryPromises = [\n        this.detectPerformanceAPIImages(),\n        this.detectSVGElements(),\n        this.detectLazyLoadingImages(),\n        this.detectCustomExtensions(),\n        this.scanMultipleDocuments()\n      ];\n      \n      // Wait for supplementary detection methods to complete\n      const detectionResults = await Promise.allSettled(supplementaryPromises);\n      \n      // Process results from supplementary detection methods\n      detectionResults.forEach((result, index) => {\n        if (result.status === 'fulfilled') {\n          console.log(`\u2705 Supplementary method ${index + 1} completed: ${result.value.length} items found`);\n        } else {\n          console.warn(`\u274C Supplementary method ${index + 1} failed:`, result.reason);\n          this.metrics.errors++;\n        }\n      });\n      \n      // Process feeds through validation pipeline\n      await this.processFeeds();\n      \n      // Generate final results\n      const results = this.generateResults();\n      \n      this.metrics.processingTime = performance.now() - startTime;\n      console.log(`\u2705 Collection completed in ${this.metrics.processingTime.toFixed(2)}ms`);\n      console.log(`\uD83D\uDCCA Results: ${results.length} validated images from ${this.metrics.totalFound} discovered`);\n      console.log(`\uD83C\uDFAF Enhanced Manager contributed: ${enhancedImages.length} images`);\n      \n      return {\n        success: true,\n        images: results,\n        metadata: this.generateMetadata(),\n        feeds: this.feeds,\n        metrics: this.metrics,\n        enhancedManagerMetrics: enhancedImageManager ? enhancedImageManager.getMetrics() : null,\n        smartPatternMetrics: this.smartPatternRecognition ? this.smartPatternRecognition.getMetrics() : null\n      };\n      \n    } catch (error) {\n      console.error('\u274C Collection failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        images: [],\n        metadata: this.generateMetadata(),\n        feeds: this.feeds,\n        metrics: this.metrics\n      };\n    } finally {\n      this.isActive = false;\n    }\n  }\n\n  // =============================================================================\n  // SMART PATTERN RECOGNITION INTEGRATION\n  // =============================================================================\n  \n  /**\n   * Initialize Table Detection System for structured data analysis\n   * Ported from Instant Data Scraper's table detection algorithm\n   */\n  async initializeTableDetection() {\n    try {\n      console.log('\uD83D\uDD0D Initializing Table Detection System...');\n      \n      // Wait for TableDetectionSystem class to be available\n      const tableDetectionClass = await this.waitForClass('TableDetectionSystem', 5000);\n      \n      if (tableDetectionClass) {\n        this.tableDetectionSystem = new tableDetectionClass({\n          maxTables: this.options.maxTables || 5,\n          minChildren: this.options.minChildren || 3,\n          minAreaThreshold: this.options.minAreaThreshold || 0.02,\n          enableVisualHighlighting: this.options.enableVisualHighlighting !== false,\n          enableInfiniteScroll: this.options.enableInfiniteScroll !== false,\n          confidenceThreshold: this.options.confidenceThreshold || 0.5\n        });\n        console.log('\u2705 Table Detection System initialized successfully');\n      } else {\n        console.warn('\u26A0\uFE0F TableDetectionSystem class not available after timeout');\n        this.tableDetectionSystem = null;\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Table Detection System initialization failed:', error);\n      this.tableDetectionSystem = null;\n    }\n  }\n\n  /**\n   * Initialize Enhanced CSS Selector system with async loading\n   * Implements Simplescraper's sophisticated antonmedv/finder integration\n   */\n  async initializeEnhancedCSSSelector() {\n    try {\n      console.log('\uD83C\uDFAF Initializing Enhanced CSS Selector System...');\n      \n      // Wait for EnhancedCSSSelector class to be available\n      const enhancedSelectorClass = await this.waitForClass('EnhancedCSSSelector', 5000);\n      \n      if (enhancedSelectorClass) {\n        this.enhancedCSSSelector = new enhancedSelectorClass({\n          timeoutMs: this.options.timeout || 1000,\n          seedMinLength: this.options.seedMinLength || 3,\n          optimizedMinLength: this.options.optimizedMinLength || 2,\n          enableImageOptimization: this.options.enableAdvancedBackground !== false,\n          enableGalleryPattern: this.options.enableSmartPatterns !== false,\n          enableCrossSiteOptimization: this.options.enableCrossSiteOptimization !== false,\n          enablePerformanceSafeguards: this.options.enablePerformanceAPI !== false,\n          maxSelectorLength: this.options.maxSelectorLength || 1000\n        });\n        console.log('\u2705 Enhanced CSS Selector system initialized successfully');\n      } else {\n        console.warn('\u26A0\uFE0F EnhancedCSSSelector class not available after timeout, falling back to basic selectors');\n        this.enhancedCSSSelector = null;\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to initialize Enhanced CSS Selector:', error);\n      this.enhancedCSSSelector = null;\n    }\n  }\n\n  /**\n   * Initialize Smart Pattern Recognition system with async loading\n   * Implements polling mechanism to wait for class availability\n   */\n  async initializeSmartPatternRecognition() {\n    try {\n      // BUGFIX: Use shared instance to prevent race conditions\n      if (window.__ST?.getSharedDetectionSystem) {\n        this.smartPatternRecognition = window.__ST.getSharedDetectionSystem('smartPatternRecognition');\n        if (this.smartPatternRecognition) {\n          console.log('\u2705 [COORD] Using shared SmartPatternRecognition instance');\n          return;\n        }\n      }\n      \n      // Fallback: Wait for SmartPatternRecognition class to be available\n      if (!window.__ST?.isSystemInitialized('smart-pattern-recognition-collector')) {\n        const smartPatternClass = await this.waitForClass('SmartPatternRecognition', 5000);\n        \n        if (smartPatternClass) {\n          window.__ST?.markSystemInitialized('smart-pattern-recognition-collector');\n          this.smartPatternRecognition = new smartPatternClass({\n          minConfidenceScore: this.options.minConfidenceScore || 0.3,\n          highConfidenceThreshold: this.options.highConfidenceThreshold || 0.75,\n          minImageWidth: this.options.minImageDimensions?.width || 30, // More lenient\n          minImageHeight: this.options.minImageDimensions?.height || 30, // More lenient\n          enableAdvancedPatterns: this.options.enableSmartPatterns !== false,\n          enableUrlValidation: this.options.enableUrlValidation !== false,\n          enableContentValidation: this.options.enableContentValidation !== false\n        });\n        console.log('\u2705 Smart Pattern Recognition system initialized successfully');\n      } else {\n        console.warn('\u26A0\uFE0F SmartPatternRecognition class not available after timeout, falling back to basic categorization');\n        this.smartPatternRecognition = null;\n      }\n      } // Close the if (!window.__ST?.isSystemInitialized('smart-pattern-recognition-collector')) block\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to initialize Smart Pattern Recognition:', error);\n      this.smartPatternRecognition = null;\n    }\n  }\n\n  /**\n   * Wait for a class to become available with polling mechanism\n   * @param {string} className - Name of the class to wait for\n   * @param {number} timeout - Timeout in milliseconds (default 5000)\n   * @param {number} pollInterval - Polling interval in milliseconds (default 100)\n   * @returns {Promise<Function|null>} The class constructor or null if timeout\n   */\n  async waitForClass(className, timeout = 5000, pollInterval = 100) {\n    return new Promise((resolve) => {\n      const startTime = Date.now();\n      \n      const checkClass = () => {\n        // Check if class is available globally\n        if (typeof window !== 'undefined' && window[className]) {\n          resolve(window[className]);\n          return;\n        }\n        \n        // Check if class is available in global scope\n        if (typeof globalThis !== 'undefined' && globalThis[className]) {\n          resolve(globalThis[className]);\n          return;\n        }\n        \n        // Try to access the class name safely (MV3 compliant - no eval)\n        try {\n          // Try to access from various scopes without eval()\n          const scopes = [window, globalThis, self];\n          for (const scope of scopes) {\n            if (scope && typeof scope === 'object' && scope[className]) {\n              const ClassConstructor = scope[className];\n              if (typeof ClassConstructor === 'function') {\n                resolve(ClassConstructor);\n                return;\n              }\n            }\n          }\n        } catch (e) {\n          // Class not available yet, continue polling\n        }\n        \n        // Check timeout\n        if (Date.now() - startTime >= timeout) {\n          console.warn(`\u26A0\uFE0F Timeout waiting for ${className} class to be available`);\n          resolve(null);\n          return;\n        }\n        \n        // Continue polling\n        setTimeout(checkClass, pollInterval);\n      };\n      \n      checkClass();\n    });\n  }\n  \n  /**\n   * Enhanced image categorization using Smart Pattern Recognition\n   */\n  async categorizeImageEnhanced(imageObj, context = {}) {\n    if (!this.smartPatternRecognition) {\n      return this.categorizeImage(imageObj);\n    }\n    \n    try {\n      // Calculate confidence score using Smart Pattern Recognition\n      const confidenceData = await this.smartPatternRecognition.calculateConfidenceScore(imageObj, context);\n      \n      // Update image object with enhanced data\n      imageObj.confidence = confidenceData.confidence;\n      imageObj.patternAnalysis = confidenceData.breakdown;\n      imageObj.processingTime = confidenceData.processingTime;\n      \n      // Use Smart Pattern Recognition for categorization\n      const categorizedImage = this.smartPatternRecognition.categorizeImageEnhanced(imageObj, confidenceData);\n      \n      // Update the imageObj with categorization results\n      imageObj.category = categorizedImage.category;\n      imageObj.categoryReason = categorizedImage.categoryReason;\n      imageObj.confidenceTier = categorizedImage.confidenceTier;\n      \n      // Add to appropriate feed based on smart categorization\n      const feedCategory = this.determineCategory(imageObj);\n      this.addToFeed(imageObj, feedCategory);\n      \n      // Return the enhanced categorized image directly - DO NOT call categorizeImage()\n      return imageObj;\n      \n    } catch (error) {\n      console.warn('Smart categorization failed, falling back to basic method:', error);\n      return this.categorizeImage(imageObj);\n    }\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 1: PERFORMANCE API INTEGRATION\n  // =============================================================================\n  \n  /**\n   * Rate limiting utility for heavy detectors\n   */\n  async enforceRateLimit(methodName) {\n    const limiter = this.rateLimiters[methodName];\n    if (!limiter) return;\n    \n    const now = Date.now();\n    const timeSinceLastCall = now - limiter.lastCall;\n    \n    if (timeSinceLastCall < limiter.minInterval) {\n      const waitTime = limiter.minInterval - timeSinceLastCall;\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n    }\n    \n    limiter.lastCall = Date.now();\n  }\n\n  /**\n   * Time budget enforcement for individual detector methods\n   */\n  createTimeBudgetController(methodName) {\n    const startTime = performance.now();\n    const timeBudget = this.options.timeBudgetPerPass;\n    \n    return {\n      checkBudget: () => {\n        const elapsed = performance.now() - startTime;\n        if (elapsed > timeBudget) {\n          console.warn(`\u23F0 Time budget exceeded for ${methodName} (${elapsed.toFixed(2)}ms > ${timeBudget}ms)`);\n          return false;\n        }\n        return true;\n      },\n      getElapsed: () => performance.now() - startTime\n    };\n  }\n\n  /**\n   * Detect images from browser performance entries\n   * Captures CSS background images and IMG elements loaded via JS\n   */\n  async detectPerformanceAPIImages() {\n    if (!this.options.enablePerformanceAPI) return [];\n    \n    // Enforce rate limiting\n    await this.enforceRateLimit('performanceAPI');\n    \n    const images = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Scanning Performance API entries...');\n      \n      // Get all resource entries from Performance API\n      const entries = performance.getEntriesByType('resource');\n      \n      for (const entry of entries) {\n        // Check for image resources\n        if (entry.initiatorType === 'img' || \n            (entry.initiatorType === 'css' && this.isImageResource(entry.name))) {\n          \n          const imageObj = {\n            src: entry.name,\n            type: this.detectMimeType(entry.name),\n            verified: true,\n            discoveryMethod: 'performance-api',\n            confidence: 0.85,\n            metadata: {\n              initiatorType: entry.initiatorType,\n              transferSize: entry.transferSize,\n              duration: entry.duration,\n              timestamp: entry.startTime\n            }\n          };\n          \n          await this.categorizeImageEnhanced(imageObj, { method: 'performance-api' });\n          images.push(imageObj);\n          this.metrics.methodStats.performanceAPI++;\n        }\n      }\n      \n      console.log(`\u2705 Performance API: Found ${images.length} images`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Performance API detection failed:', error);\n      return [];\n    }\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 2: SHADOW DOM SUPPORT\n  // =============================================================================\n  \n  /**\n   * Complete DOM traversal including closed shadow roots\n   */\n  async detectShadowDOMImages() {\n    if (!this.options.enableShadowDOM) return [];\n    \n    // Enforce rate limiting for heavy DOM traversal\n    await this.enforceRateLimit('shadowDOM');\n    \n    const images = [];\n    const shadowRoots = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Scanning Shadow DOM...');\n      \n      // Find all shadow roots (including closed ones)\n      await this.findShadowRoots(document, shadowRoots);\n      \n      for (const shadowRoot of shadowRoots) {\n        try {\n          // Scan images within shadow root\n          const shadowImages = this.extractImagesFromDocument(shadowRoot);\n          \n          for (const img of shadowImages) {\n            img.discoveryMethod = 'shadow-dom';\n            img.confidence = 0.80;\n            img.metadata = {\n              ...img.metadata,\n              shadowHost: shadowRoot.host ? shadowRoot.host.tagName : 'unknown'\n            };\n            \n            await this.categorizeImageEnhanced(img, { method: 'shadow-dom', element: img.element });\n            images.push(img);\n          }\n          \n          this.metrics.methodStats.shadowDOM += shadowImages.length;\n          \n        } catch (error) {\n          console.warn('\u26A0\uFE0F Failed to scan shadow root:', error);\n        }\n      }\n      \n      console.log(`\u2705 Shadow DOM: Found ${images.length} images in ${shadowRoots.length} shadow roots`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Shadow DOM detection failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Recursively find all shadow roots in the document\n   */\n  async findShadowRoots(doc, roots = []) {\n    try {\n      for (const element of await this.safeQuerySelectorAll('*', { root: doc })) {\n        if (element.shadowRoot) {\n          try {\n            // Try to access shadow root (works for open shadow roots)\n            await this.findShadowRoots(element.shadowRoot, roots);\n            roots.push(element.shadowRoot);\n          } catch (e) {\n            // Handle closed shadow roots gracefully\n            console.debug('Closed shadow root detected:', element.tagName);\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Error traversing shadow roots:', error);\n    }\n    \n    return roots;\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 3: ADVANCED BACKGROUND DETECTION\n  // =============================================================================\n  \n  /**\n   * Extract images from computed styles including :before and :after pseudo-elements\n   */\n  async detectAdvancedBackgroundImages() {\n    if (!this.options.enableAdvancedBackground) return [];\n    \n    // Enforce rate limiting for heavy style computation\n    await this.enforceRateLimit('advancedBackground');\n    \n    const images = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Scanning computed styles and pseudo-elements...');\n      \n      const elements = await this.safeQuerySelectorAll('*');\n      \n      // Limit to prevent excessive processing and potential page jank\n      const maxElements = Math.min(elements.length, this.options.maxNodesPerDetector);\n      const limitedElements = Array.from(elements).slice(0, maxElements);\n      \n      for (const element of limitedElements) {\n        try {\n          // Get computed styles for element and pseudo-elements\n          const styles = [\n            { style: getComputedStyle(element), pseudo: null },\n            { style: getComputedStyle(element, ':before'), pseudo: ':before' },\n            { style: getComputedStyle(element, ':after'), pseudo: ':after' }\n          ];\n          \n          for (const { style, pseudo } of styles) {\n            const backgroundImage = style.backgroundImage;\n            \n            if (backgroundImage && backgroundImage !== 'none' && backgroundImage.includes('url(')) {\n              const urls = this.extractUrlsFromStyle(backgroundImage);\n              \n              for (const url of urls) {\n                const imageObj = {\n                  src: url,\n                  element: element,\n                  discoveryMethod: 'advanced-background',\n                  confidence: 0.75,\n                  metadata: {\n                    pseudoElement: pseudo,\n                    elementTag: element.tagName,\n                    className: element.className,\n                    backgroundSize: style.backgroundSize,\n                    backgroundPosition: style.backgroundPosition,\n                    backgroundRepeat: style.backgroundRepeat\n                  }\n                };\n                \n                await this.categorizeImageEnhanced(imageObj, { method: 'background-images', element });\n                images.push(imageObj);\n                this.metrics.methodStats.advancedBackground++;\n              }\n            }\n          }\n          \n        } catch (error) {\n          // Skip elements that cause errors (e.g., cross-origin iframes)\n          console.debug('Skipping element due to style access error:', element.tagName);\n        }\n      }\n      \n      console.log(`\u2705 Advanced Background: Found ${images.length} background images`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Advanced background detection failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Extract URLs from CSS background-image style values\n   */\n  extractUrlsFromStyle(backgroundImage) {\n    const urls = [];\n    const urlRegex = /url\\(['\"]?([^'\"]+)['\"]?\\)/g;\n    let match;\n    \n    while ((match = urlRegex.exec(backgroundImage)) !== null) {\n      urls.push(match[1]);\n    }\n    \n    return urls;\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 4: SVG ELEMENT PROCESSING\n  // =============================================================================\n  \n  /**\n   * Convert SVG elements to data URLs\n   */\n  async detectSVGElements() {\n    if (!this.options.enableSVGProcessing) return [];\n    \n    const images = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Processing SVG elements...');\n      \n      const svgElements = await this.safeQuerySelectorAll('svg');\n      \n      for (const svg of svgElements) {\n        try {\n          // Clone SVG to avoid modifying original\n          const clonedSvg = svg.cloneNode(true);\n          \n          // Ensure proper namespace\n          clonedSvg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n          \n          // Create data URL\n          const svgString = new XMLSerializer().serializeToString(clonedSvg);\n          const dataUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgString);\n          \n          const imageObj = {\n            src: dataUrl,\n            element: svg,\n            type: 'image/svg+xml',\n            discoveryMethod: 'svg-processing',\n            confidence: 0.90,\n            metadata: {\n              elementTag: 'svg',\n              viewBox: svg.getAttribute('viewBox'),\n              width: svg.getAttribute('width') || svg.getBoundingClientRect().width,\n              height: svg.getAttribute('height') || svg.getBoundingClientRect().height,\n              originalSvg: true\n            }\n          };\n          \n          await this.categorizeImageEnhanced(imageObj, { method: 'svg-processing', element: svg });\n          images.push(imageObj);\n          this.metrics.methodStats.svgProcessing++;\n          \n        } catch (error) {\n          console.warn('Failed to process SVG element:', error);\n        }\n      }\n      \n      console.log(`\u2705 SVG Processing: Converted ${images.length} SVG elements`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F SVG processing failed:', error);\n      return [];\n    }\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 5: LAZY LOADING SUPPORT\n  // =============================================================================\n  \n  /**\n   * Detect data-src, data-lazy, data-original attributes and other lazy loading patterns\n   */\n  async detectLazyLoadingImages() {\n    if (!this.options.enableLazyLoading) return [];\n    \n    const images = [];\n    const cachedQuery = window.__ST?.cachedQuery || ((sel) => Array.from(document.querySelectorAll(sel)));\n    \n    try {\n      console.log('\uD83D\uDD0D Detecting lazy loading images...');\n      \n      // Common lazy loading attributes\n      const lazySelectors = [\n        'img[data-src]',\n        'img[data-lazy]', \n        'img[data-original]',\n        'img[data-lazy-src]',\n        'img[data-echo]',\n        'img[data-srcset]',\n        '[data-bg]',\n        '[data-background]',\n        '[data-background-image]',\n        '.lazy[data-src]',\n        '.lazyload[data-src]'\n      ];\n      \n      for (const selector of lazySelectors) {\n        try {\n          const elements = cachedQuery(selector);\n          \n          for (const element of elements) {\n            const lazySrc = this.extractLazySrc(element);\n            \n            if (lazySrc) {\n              const imageObj = {\n                src: lazySrc,\n                element: element,\n                discoveryMethod: 'lazy-loading',\n                confidence: 0.85,\n                metadata: {\n                  elementTag: element.tagName,\n                  lazyAttribute: this.identifyLazyAttribute(element),\n                  loading: element.getAttribute('loading'),\n                  className: element.className,\n                  originalSrc: element.src\n                }\n              };\n              \n              await this.categorizeImageEnhanced(imageObj, { method: 'lazy-loading', element });\n              images.push(imageObj);\n              this.metrics.methodStats.lazyLoading++;\n            }\n          }\n          \n        } catch (error) {\n          console.warn(`Failed to process lazy selector ${selector}:`, error);\n        }\n      }\n      \n      console.log(`\u2705 Lazy Loading: Found ${images.length} lazy-loaded images`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Lazy loading detection failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Extract lazy loading source from element\n   */\n  extractLazySrc(element) {\n    const lazyAttributes = [\n      'data-src', 'data-lazy', 'data-original', 'data-lazy-src',\n      'data-echo', 'data-bg', 'data-background', 'data-background-image'\n    ];\n    \n    for (const attr of lazyAttributes) {\n      const value = element.getAttribute(attr);\n      if (value && this.isValidImageUrl(value)) {\n        return value;\n      }\n    }\n    \n    // Check data-srcset for responsive images\n    const srcset = element.getAttribute('data-srcset');\n    if (srcset) {\n      const firstSrc = srcset.split(',')[0].trim().split(' ')[0];\n      if (this.isValidImageUrl(firstSrc)) {\n        return firstSrc;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Identify which lazy loading attribute was used\n   */\n  identifyLazyAttribute(element) {\n    const lazyAttributes = [\n      'data-src', 'data-lazy', 'data-original', 'data-lazy-src',\n      'data-echo', 'data-bg', 'data-background', 'data-background-image', 'data-srcset'\n    ];\n    \n    for (const attr of lazyAttributes) {\n      if (element.hasAttribute(attr)) {\n        return attr;\n      }\n    }\n    \n    return 'unknown';\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 6: HARD-CODED URL EXTRACTION\n  // =============================================================================\n  \n  /**\n   * Regex-based URL discovery from page content\n   */\n  async extractHardcodedURLs() {\n    if (!this.options.enableUrlExtraction) return [];\n    \n    const images = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Extracting hard-coded URLs...');\n      \n      // Get page content\n      const pageContent = document.documentElement.outerHTML;\n      \n      // Enhanced URL regex pattern for images\n      const imageUrlRegex = /(?:https?:\\/\\/[^\\s<>\"']+\\.(?:jpg|jpeg|png|gif|webp|svg|bmp)(?:\\?[^\\s<>\"']*)?)/gi;\n      const matches = pageContent.match(imageUrlRegex) || [];\n      \n      // Also check for data URLs\n      const dataUrlRegex = /data:image\\/[^;]+;base64,[A-Za-z0-9+/=]+/g;\n      const dataMatches = pageContent.match(dataUrlRegex) || [];\n      \n      const allUrls = [...matches, ...dataMatches];\n      \n      for (const url of allUrls) {\n        if (!this.urlCache.has(url)) {\n          this.urlCache.add(url);\n          \n          const imageObj = {\n            src: url,\n            discoveryMethod: 'url-extraction',\n            confidence: 0.70,\n            metadata: {\n              source: 'hardcoded-html',\n              extractedFromContent: true\n            }\n          };\n          \n          await this.categorizeImageEnhanced(imageObj, { method: 'url-extraction' });\n          images.push(imageObj);\n          this.metrics.methodStats.urlExtraction++;\n        }\n      }\n      \n      // Also extract from script tags and JSON content\n      const scriptImages = await this.extractFromScripts();\n      images.push(...scriptImages);\n      \n      console.log(`\u2705 URL Extraction: Found ${images.length} hard-coded URLs`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F URL extraction failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Extract image URLs from script tags and JSON content\n   */\n  async extractFromScripts() {\n    const images = [];\n    \n    try {\n      const scripts = await this.safeQuerySelectorAll('script');\n      \n      for (const script of scripts) {\n        if (script.textContent) {\n          // Look for image URLs in JSON or JavaScript\n          const imageUrlRegex = /(?:[\"'])(https?:\\/\\/[^\"']+\\.(?:jpg|jpeg|png|gif|webp|svg|bmp)(?:\\?[^\"']*)?)([\"'])/gi;\n          let match;\n          \n          while ((match = imageUrlRegex.exec(script.textContent)) !== null) {\n            const url = match[1];\n            \n            if (!this.urlCache.has(url)) {\n              this.urlCache.add(url);\n              \n              const imageObj = {\n                src: url,\n                discoveryMethod: 'script-extraction',\n                confidence: 0.65,\n                metadata: {\n                  source: 'script-tag',\n                  scriptType: script.type || 'text/javascript'\n                }\n              };\n              \n              await this.categorizeImageEnhanced(imageObj, { method: 'script-extraction' });\n              images.push(imageObj);\n              this.metrics.methodStats.urlExtraction++;\n            }\n          }\n        }\n      }\n      \n    } catch (error) {\n      console.warn('Script extraction failed:', error);\n    }\n    \n    return images;\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 7: CUSTOM EXTENSION SUPPORT\n  // =============================================================================\n  \n  /**\n   * Handle PDF and non-image file types\n   */\n  async detectCustomExtensions() {\n    if (!this.options.enableCustomExtensions) return [];\n    \n    const files = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Detecting custom file extensions...');\n      \n      // Build regex for custom extensions\n      const extensions = this.options.customExtensions.join('|');\n      const customFileRegex = new RegExp(`https?:\\\\/\\\\/[^\\\\s<>\"']+\\\\.(${extensions})(?:\\\\?[^\\\\s<>\"']*)?`, 'gi');\n      \n      // Search in page content\n      const pageContent = document.documentElement.outerHTML;\n      const matches = pageContent.match(customFileRegex) || [];\n      \n      // Also check link elements\n      const cachedQuery = window.__ST?.cachedQuery || ((sel) => Array.from(document.querySelectorAll(sel)));\n      const links = cachedQuery('a[href]');\n      \n      for (const link of links) {\n        const href = link.href;\n        if (this.options.customExtensions.some(ext => href.toLowerCase().includes(`.${ext}`))) {\n          matches.push(href);\n        }\n      }\n      \n      for (const url of [...new Set(matches)]) {\n        const fileObj = {\n          src: url,\n          type: this.detectFileType(url),\n          discoveryMethod: 'custom-extensions',\n          confidence: 0.80,\n          metadata: {\n            fileExtension: this.extractFileExtension(url),\n            isCustomType: true\n          }\n        };\n        \n        await this.categorizeImageEnhanced(fileObj, { method: 'custom-extensions' });\n        files.push(fileObj);\n        this.metrics.methodStats.customExtensions++;\n      }\n      \n      console.log(`\u2705 Custom Extensions: Found ${files.length} custom files`);\n      return files;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Custom extension detection failed:', error);\n      return [];\n    }\n  }\n\n  // =============================================================================\n  // DETECTION METHOD 8: MULTI-DOCUMENT SCANNING\n  // =============================================================================\n  \n  /**\n   * Cross-page image discovery with base URL fixing\n   */\n  async scanMultipleDocuments() {\n    if (!this.options.enableMultiDocument || this.options.maxDepth <= 1) return [];\n    \n    // Enforce rate limiting for heavy multi-document operations\n    await this.enforceRateLimit('multiDocument');\n    \n    const images = [];\n    \n    try {\n      console.log('\uD83D\uDD0D Scanning multiple documents...');\n      \n      // Find linked documents\n      await this.discoverLinkedDocuments();\n      \n      // Process document queue\n      for (const docUrl of this.documentQueue) {\n        if (this.scannedUrls.has(docUrl)) continue;\n        this.scannedUrls.add(docUrl);\n        \n        try {\n          const docImages = await this.scanLinkedDocument(docUrl);\n          images.push(...docImages);\n          this.metrics.methodStats.multiDocument += docImages.length;\n          \n          // Respect limits\n          if (images.length > 1000) break;\n          \n        } catch (error) {\n          console.warn(`Failed to scan document ${docUrl}:`, error);\n        }\n      }\n      \n      console.log(`\u2705 Multi-Document: Found ${images.length} images from ${this.documentQueue.length} documents`);\n      return images;\n      \n    } catch (error) {\n      console.warn('\u26A0\uFE0F Multi-document scanning failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Discover linked documents to scan\n   */\n  async discoverLinkedDocuments() {\n    const cachedQuery = window.__ST?.cachedQuery || ((sel) => Array.from(document.querySelectorAll(sel)));\n    const links = cachedQuery('a[href]');\n    \n    for (const link of links) {\n      if (this.documentQueue.length >= this.options.maxDocuments) break;\n      \n      try {\n        const url = new URL(link.href, window.location.href);\n        \n        // Only scan same-origin documents for security\n        if (url.origin === window.location.origin && \n            !this.scannedUrls.has(url.href) &&\n            this.isLikelyImageGalleryPage(link)) {\n          \n          this.documentQueue.push(url.href);\n        }\n        \n      } catch (error) {\n        // Skip invalid URLs\n      }\n    }\n  }\n\n  /**\n   * Check if a link likely leads to an image gallery page\n   */\n  isLikelyImageGalleryPage(link) {\n    const href = link.href.toLowerCase();\n    const text = link.textContent.toLowerCase();\n    \n    const galleryIndicators = [\n      'gallery', 'photos', 'images', 'album', 'portfolio', \n      'picture', 'media', 'slideshow', 'carousel'\n    ];\n    \n    return galleryIndicators.some(indicator => \n      href.includes(indicator) || text.includes(indicator)\n    );\n  }\n\n  /**\n   * Scan a linked document for images\n   */\n  async scanLinkedDocument(url) {\n    try {\n      const response = await fetch(url, {\n        headers: { 'Accept': 'text/html' }\n      });\n      \n      if (!response.ok) throw new Error(`HTTP ${response.status}`);\n      \n      const html = await response.text();\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, 'text/html');\n      \n      // Fix relative URLs\n      const base = doc.createElement('base');\n      base.href = url;\n      doc.head.appendChild(base);\n      \n      // Extract images from document\n      const images = this.extractImagesFromDocument(doc, url);\n      \n      for (const img of images) {\n        img.discoveryMethod = 'multi-document';\n        img.confidence = 0.75;\n        img.metadata = {\n          ...img.metadata,\n          sourceDocument: url\n        };\n        \n        await this.categorizeImageEnhanced(img, { method: 'multi-document', sourceDocument: url });\n      }\n      \n      return images;\n      \n    } catch (error) {\n      throw new Error(`Failed to scan ${url}: ${error.message}`);\n    }\n  }\n\n  // =============================================================================\n  // TABLE DETECTION AND STRUCTURED DATA ANALYSIS\n  // =============================================================================\n  \n  /**\n   * Detect tabular structures using the Table Detection System\n   * Implements \"try another\" functionality and visual highlighting\n   * Produces normalized {headers, rows} payload for export\n   */\n  async detectTabularStructures(options = {}) {\n    console.log('\uD83D\uDD0D Starting tabular structure detection...');\n    \n    try {\n      // Skip if table detection is disabled\n      if (options.enableTableDetection === false || !this.tableDetectionInitialized) {\n        console.log('\u23ED\uFE0F Table detection skipped or not initialized');\n        return [];\n      }\n\n      // Apply performance safeguards for large pages\n      const domElementCount = document.querySelectorAll('*').length;\n      const isLargePage = domElementCount > this.options.largePageThreshold;\n      \n      if (isLargePage) {\n        console.warn(`\u26A0\uFE0F Large page detected (${domElementCount} elements), applying table detection limits`);\n      }\n\n      // Wait for table detection system to be ready\n      if (!this.tableDetectionSystem) {\n        console.warn('\u26A0\uFE0F Table Detection System not available');\n        return [];\n      }\n\n      // Configure detection options with performance constraints\n      const detectionOptions = {\n        maxTables: isLargePage ? 3 : (options.maxTables || 5),\n        minChildren: options.minChildren || 3,\n        minAreaThreshold: options.minAreaThreshold || 0.02,\n        enableVisualHighlighting: options.enableVisualHighlighting !== false,\n        enableInfiniteScroll: options.enableInfiniteScroll !== false,\n        confidenceThreshold: options.confidenceThreshold || 0.5,\n        // Performance constraints for large pages\n        maxElementsToScan: isLargePage ? 1000 : 5000,\n        timeBudget: isLargePage ? 3000 : 8000 // ms\n      };\n\n      console.log(`\uD83C\uDFAF Detecting tables with options:`, detectionOptions);\n\n      // Use TableDetectionSystem to detect tables\n      const detectedTables = await this.tableDetectionSystem.detectTables(detectionOptions);\n      \n      if (!detectedTables || detectedTables.length === 0) {\n        console.log('\uD83D\uDCCA No tabular structures detected');\n        return [];\n      }\n\n      console.log(`\u2705 Detected ${detectedTables.length} tabular structures`);\n\n      // Process each detected table into normalized format\n      const processedTables = [];\n      \n      for (let i = 0; i < detectedTables.length; i++) {\n        const tableData = detectedTables[i];\n        \n        try {\n          // Extract structured data from table\n          const extractedData = this.tableDetectionSystem.extractTableData(tableData);\n          \n          if (extractedData && extractedData.rows && extractedData.rows.length > 0) {\n            // Normalize data into standard format\n            const normalizedTable = {\n              src: `table-${i}`, // Unique identifier\n              type: 'TABLE',\n              discoveryMethod: 'table-detection',\n              confidence: tableData.confidence || 0.7,\n              headers: extractedData.headers || [],\n              rows: extractedData.rows || [],\n              dataRows: extractedData.dataRows || [],\n              metadata: {\n                selector: extractedData.selector,\n                tableIndex: i,\n                area: tableData.area,\n                score: tableData.score,\n                childrenCount: tableData.childrenCount,\n                goodClasses: tableData.goodClasses,\n                patternStrength: extractedData.metadata?.patternStrength || 0,\n                infiniteScrollDetected: extractedData.metadata?.infiniteScrollDetected || false,\n                timestamp: Date.now(),\n                // Table-specific metadata\n                tableData: {\n                  headers: extractedData.headers || [],\n                  rows: extractedData.rows || [],\n                  dataRows: extractedData.dataRows || []\n                },\n                // Export-ready payload\n                exportPayload: {\n                  headers: extractedData.headers || [],\n                  rows: extractedData.dataRows || extractedData.rows || []\n                }\n              },\n              // Methods for \"try another\" functionality\n              tryAnother: () => this.tryAnotherTable(),\n              highlight: () => this.highlightTable(tableData),\n              clearHighlight: () => this.clearTableHighlighting(),\n              extractData: () => extractedData\n            };\n\n            // Add to feeds system for consistency\n            await this.categorizeImageEnhanced(normalizedTable, { method: 'table-detection' });\n            this.addToFeed(normalizedTable, 'high_confidence'); // Tables are high confidence structured data\n            \n            processedTables.push(normalizedTable);\n            \n            // Update metrics\n            this.metrics.totalFound++;\n            this.metrics.methodStats.tableDetection = (this.metrics.methodStats.tableDetection || 0) + 1;\n            \n            console.log(`\uD83D\uDCCB Processed table ${i + 1}: ${extractedData.headers?.length || 0} headers, ${extractedData.dataRows?.length || extractedData.rows?.length || 0} rows`);\n          }\n          \n        } catch (error) {\n          console.warn(`\u26A0\uFE0F Failed to process table ${i}:`, error);\n          this.metrics.errors++;\n        }\n      }\n\n      // Implement visual highlighting for first table if enabled\n      if (processedTables.length > 0 && detectionOptions.enableVisualHighlighting) {\n        try {\n          this.tableDetectionSystem.highlightTable(detectedTables[0]);\n          console.log('\uD83C\uDFA8 Visual highlighting applied to first detected table');\n        } catch (error) {\n          console.warn('\u26A0\uFE0F Failed to apply visual highlighting:', error);\n        }\n      }\n\n      console.log(`\u2705 Table detection completed: ${processedTables.length} tables processed`);\n      \n      return processedTables;\n      \n    } catch (error) {\n      console.error('\u274C Table detection failed:', error);\n      this.metrics.errors++;\n      return [];\n    }\n  }\n\n  /**\n   * \"Try another table\" functionality - cycles through detected tables\n   */\n  async tryAnotherTable() {\n    if (!this.tableDetectionSystem) {\n      console.warn('\u26A0\uFE0F Table Detection System not available for table cycling');\n      return null;\n    }\n\n    try {\n      const nextTable = this.tableDetectionSystem.tryAnotherTable();\n      \n      if (nextTable) {\n        console.log(`\uD83D\uDD04 Switched to table: ${nextTable.selector}`);\n        \n        // Extract and return normalized data for the new table\n        const extractedData = this.tableDetectionSystem.extractTableData(nextTable);\n        \n        return {\n          success: true,\n          tableData: extractedData,\n          tableInfo: {\n            selector: nextTable.selector,\n            confidence: nextTable.confidence,\n            area: nextTable.area,\n            score: nextTable.score\n          }\n        };\n      } else {\n        console.log('\u26A0\uFE0F No more tables to cycle through');\n        return { success: false, message: 'No more tables available' };\n      }\n      \n    } catch (error) {\n      console.error('\u274C Failed to switch to another table:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Highlight specified table with visual indicators\n   */\n  highlightTable(tableData) {\n    if (!this.tableDetectionSystem) {\n      console.warn('\u26A0\uFE0F Table Detection System not available for highlighting');\n      return;\n    }\n\n    try {\n      this.tableDetectionSystem.highlightTable(tableData);\n      console.log('\uD83C\uDFA8 Table highlighting applied');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to highlight table:', error);\n    }\n  }\n\n  /**\n   * Clear all table highlighting\n   */\n  clearTableHighlighting() {\n    if (!this.tableDetectionSystem) {\n      console.warn('\u26A0\uFE0F Table Detection System not available for clearing highlights');\n      return;\n    }\n\n    try {\n      this.tableDetectionSystem.clearTableHighlighting();\n      console.log('\uD83E\uDDF9 Table highlighting cleared');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to clear table highlighting:', error);\n    }\n  }\n\n  /**\n   * Get current table data in normalized format for export\n   */\n  async getCurrentTableData() {\n    if (!this.tableDetectionSystem) {\n      console.warn('\u26A0\uFE0F Table Detection System not available');\n      return null;\n    }\n\n    try {\n      const currentTable = this.tableDetectionSystem.getCurrentTable();\n      \n      if (!currentTable) {\n        console.log('\u26A0\uFE0F No current table selected');\n        return null;\n      }\n\n      const extractedData = this.tableDetectionSystem.extractTableData(currentTable);\n      \n      if (!extractedData) {\n        console.warn('\u26A0\uFE0F Failed to extract data from current table');\n        return null;\n      }\n\n      // Return normalized format suitable for export systems\n      return {\n        headers: extractedData.headers || [],\n        rows: extractedData.dataRows || extractedData.rows || [],\n        metadata: {\n          selector: extractedData.selector,\n          confidence: currentTable.confidence,\n          area: currentTable.area,\n          score: currentTable.score,\n          tableData: extractedData\n        }\n      };\n      \n    } catch (error) {\n      console.error('\u274C Failed to get current table data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all detected tables in normalized format\n   */\n  async getAllTableData() {\n    if (!this.tableDetectionSystem) {\n      console.warn('\u26A0\uFE0F Table Detection System not available');\n      return [];\n    }\n\n    try {\n      const allTables = this.tableDetectionSystem.getAllTables();\n      const normalizedTables = [];\n      \n      for (const table of allTables) {\n        const extractedData = this.tableDetectionSystem.extractTableData(table);\n        \n        if (extractedData) {\n          normalizedTables.push({\n            headers: extractedData.headers || [],\n            rows: extractedData.dataRows || extractedData.rows || [],\n            metadata: {\n              selector: extractedData.selector,\n              confidence: table.confidence,\n              area: table.area,\n              score: table.score,\n              tableData: extractedData\n            }\n          });\n        }\n      }\n      \n      return normalizedTables;\n      \n    } catch (error) {\n      console.error('\u274C Failed to get all table data:', error);\n      return [];\n    }\n  }\n\n  // =============================================================================\n  // FEED CATEGORIZATION AND PROCESSING\n  // =============================================================================\n  \n  /**\n   * Categorize image into appropriate feed based on confidence and origin\n   */\n  categorizeImage(imageObj) {\n    // Prevent duplicates\n    if (this.cache.has(imageObj.src)) {\n      this.metrics.duplicates++;\n      return false;\n    }\n    \n    this.cache.add(imageObj.src);\n    this.metrics.totalFound++;\n    \n    // Add position tracking\n    this.positionTracker.set(imageObj.src, this.positionCounter++);\n    imageObj.position = this.positionCounter - 1;\n    \n    const category = this.determineCategory(imageObj);\n    this.feeds[category].push(imageObj);\n    this.metrics.categorized++;\n    \n    return true;\n  }\n\n  /**\n   * Enhanced category determination using Smart Pattern Recognition\n   */\n  determineCategory(imageObj) {\n    // If Smart Pattern Recognition has already categorized, use that result\n    if (imageObj.category) {\n      // Map to feed names\n      const categoryMap = {\n        'high_confidence': 'high_confidence',\n        'same_origin': 'same_origin', \n        'external_resources': 'external'\n      };\n      return categoryMap[imageObj.category] || 'external';\n    }\n    \n    // Fallback to original logic with enhanced thresholds\n    if (imageObj.confidence >= 0.75 || \n        (imageObj.metadata && (imageObj.metadata.width || imageObj.metadata.height)) ||\n        this.isKnownImageExtension(imageObj.src)) {\n      return 'high_confidence';\n    }\n    \n    // Same origin check\n    try {\n      const url = new URL(imageObj.src, window.location.href);\n      if (url.origin === window.location.origin) {\n        return 'same_origin';\n      }\n    } catch (e) {\n      // Invalid URL, categorize as external\n    }\n    \n    return 'external';\n  }\n\n  /**\n   * Check if URL has a known image extension\n   */\n  isKnownImageExtension(src) {\n    const knownExtensions = this.options.supportedFormats;\n    const url = src.toLowerCase();\n    \n    return knownExtensions.some(ext => \n      url.includes(`.${ext}`) || src.startsWith(`data:image/${ext}`)\n    );\n  }\n\n  /**\n   * Process all feeds through validation pipeline\n   */\n  async processFeeds() {\n    console.log('\uD83D\uDD04 Processing feeds through validation pipeline...');\n    \n    // Process high confidence images first\n    await this.processQueue(this.feeds.high_confidence, 'high_confidence');\n    await this.processQueue(this.feeds.same_origin, 'same_origin');\n    await this.processQueue(this.feeds.external, 'external');\n  }\n\n  /**\n   * Enhanced feed queue processing with Smart Pattern Recognition\n   */\n  async processQueue(queue, queueName) {\n    console.log(`Processing ${queueName} queue: ${queue.length} items`);\n    \n    const validationPromises = queue.map(async (imageObj, index) => {\n      try {\n        if (this.activeJobs >= this.options.concurrency) {\n          await this.waitForAvailableSlot();\n        }\n        \n        this.activeJobs++;\n        \n        // Enhanced validation with Smart Pattern Recognition\n        const validatedImage = await this.validateImageEnhanced(imageObj);\n        this.activeJobs--;\n        \n        if (validatedImage.valid) {\n          this.processed.push(validatedImage);\n          this.metrics.validated++;\n        }\n        \n        return validatedImage;\n        \n      } catch (error) {\n        this.activeJobs--;\n        console.warn(`Validation failed for ${imageObj.src}:`, error);\n        return { ...imageObj, valid: false, error: error.message };\n      }\n    });\n    \n    await Promise.allSettled(validationPromises);\n  }\n\n  /**\n   * Enhanced image validation using Smart Pattern Recognition\n   */\n  async validateImageEnhanced(imageObj) {\n    try {\n      // Use Smart Pattern Recognition for enhanced validation if available\n      if (this.smartPatternRecognition) {\n        // Perform content validation using Smart Pattern Recognition\n        const contentValidation = await this.smartPatternRecognition.validateContent(imageObj);\n        \n        // Update image object with validation results\n        imageObj.contentValidation = contentValidation;\n        imageObj.valid = contentValidation.isValid;\n        \n        // Enhance confidence score based on validation\n        if (contentValidation.confidence && imageObj.confidence) {\n          imageObj.confidence = (imageObj.confidence + contentValidation.confidence) / 2;\n        } else if (contentValidation.confidence) {\n          imageObj.confidence = contentValidation.confidence;\n        }\n        \n        return imageObj;\n      } else {\n        // Fallback to basic validation\n        return await this.validateImage(imageObj);\n      }\n    } catch (error) {\n      console.warn('Enhanced validation failed, falling back to basic validation:', error);\n      return await this.validateImage(imageObj);\n    }\n  }\n\n  /**\n   * Wait for an available processing slot\n   */\n  async waitForAvailableSlot() {\n    while (this.activeJobs >= this.options.concurrency) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  // =============================================================================\n  // VALIDATION PIPELINE\n  // =============================================================================\n  \n  /**\n   * Comprehensive image validation with multiple fallback methods\n   */\n  async validateImage(imageObj) {\n    // Fast path: extension-based validation\n    const fastResult = this.fastValidation(imageObj);\n    if (fastResult.confidence > 0.8) {\n      return { ...imageObj, ...fastResult, valid: true };\n    }\n    \n    // Network validation for better accuracy\n    try {\n      const networkResult = await this.networkValidation(imageObj);\n      return { ...imageObj, ...networkResult, valid: networkResult.valid };\n    } catch (error) {\n      // Fallback to fast validation result\n      return { ...imageObj, ...fastResult, valid: fastResult.confidence > 0.6 };\n    }\n  }\n\n  /**\n   * Fast validation based on URL patterns and extensions\n   */\n  fastValidation(imageObj) {\n    const src = imageObj.src;\n    \n    // Data URLs\n    if (src.startsWith('data:image/')) {\n      return { confidence: 0.95, method: 'data-url', type: this.extractDataUrlType(src) };\n    }\n    \n    // Known extensions\n    if (this.isKnownImageExtension(src)) {\n      return { confidence: 0.85, method: 'extension', type: `image/${this.extractFileExtension(src)}` };\n    }\n    \n    // CDN patterns\n    if (this.isCDNImage(src)) {\n      return { confidence: 0.80, method: 'cdn-pattern', type: 'image/unknown' };\n    }\n    \n    return { confidence: 0.3, method: 'unknown', type: 'unknown' };\n  }\n\n  /**\n   * Network-based validation using HEAD requests\n   */\n  async networkValidation(imageObj) {\n    const controller = new AbortController();\n    setTimeout(() => controller.abort(), this.options.timeout);\n    \n    try {\n      const response = await fetch(imageObj.src, {\n        method: 'HEAD',\n        signal: controller.signal,\n        headers: { \n          'referer': imageObj.metadata?.sourceDocument || window.location.href \n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      const contentType = response.headers.get('content-type') || '';\n      const contentLength = response.headers.get('content-length');\n      \n      return {\n        valid: contentType.startsWith('image/') || this.isKnownImageExtension(imageObj.src),\n        confidence: contentType.startsWith('image/') ? 0.95 : 0.7,\n        method: 'network',\n        type: contentType,\n        size: contentLength ? parseInt(contentLength) : null\n      };\n      \n    } catch (error) {\n      throw new Error(`Network validation failed: ${error.message}`);\n    }\n  }\n\n  // =============================================================================\n  // UTILITY METHODS\n  // =============================================================================\n  \n  /**\n   * Extract images from a document (used by multiple detection methods)\n   */\n  async extractImagesFromDocument(doc, baseUrl = null) {\n    const images = [];\n    \n    try {\n      // Standard img elements\n      const imgElements = await this.safeQuerySelectorAll('img[src], img[data-src]', { root: doc });\n      \n      for (const img of imgElements) {\n        const src = img.src || img.dataset.src;\n        if (src) {\n          const absoluteUrl = baseUrl ? new URL(src, baseUrl).href : src;\n          \n          images.push({\n            src: absoluteUrl,\n            element: img,\n            metadata: {\n              alt: img.alt,\n              width: img.naturalWidth || img.offsetWidth,\n              height: img.naturalHeight || img.offsetHeight,\n              className: img.className,\n              id: img.id\n            }\n          });\n        }\n      }\n      \n    } catch (error) {\n      console.warn('Error extracting images from document:', error);\n    }\n    \n    return images;\n  }\n\n  /**\n   * Check if URL points to a CDN image\n   */\n  isCDNImage(url) {\n    const cdnPatterns = [\n      'cdn', 'cloudfront', 'imgur', 'flickr', 'instagram',\n      'facebook', 'twitter', 'pinterest', 'unsplash'\n    ];\n    \n    return cdnPatterns.some(pattern => url.toLowerCase().includes(pattern));\n  }\n\n  /**\n   * Check if URL is valid image URL\n   */\n  isValidImageUrl(url) {\n    if (!url || typeof url !== 'string') return false;\n    \n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return url.startsWith('data:image/');\n    }\n  }\n\n  /**\n   * Detect MIME type from URL\n   */\n  detectMimeType(url) {\n    const extension = this.extractFileExtension(url);\n    const mimeMap = {\n      'jpg': 'image/jpeg',\n      'jpeg': 'image/jpeg', \n      'png': 'image/png',\n      'gif': 'image/gif',\n      'webp': 'image/webp',\n      'svg': 'image/svg+xml',\n      'bmp': 'image/bmp'\n    };\n    \n    return mimeMap[extension] || 'image/unknown';\n  }\n\n  /**\n   * Extract file extension from URL\n   */\n  extractFileExtension(url) {\n    try {\n      const pathname = new URL(url).pathname;\n      return pathname.split('.').pop().toLowerCase();\n    } catch {\n      const match = url.match(/\\.([a-z0-9]+)$/i);\n      return match ? match[1].toLowerCase() : '';\n    }\n  }\n\n  /**\n   * Extract data URL type\n   */\n  extractDataUrlType(dataUrl) {\n    const match = dataUrl.match(/^data:image\\/([^;]+)/);\n    return match ? `image/${match[1]}` : 'image/unknown';\n  }\n\n  /**\n   * Detect file type from URL\n   */\n  detectFileType(url) {\n    const extension = this.extractFileExtension(url);\n    \n    if (this.options.supportedFormats.includes(extension)) {\n      return this.detectMimeType(url);\n    }\n    \n    if (this.options.customExtensions.includes(extension)) {\n      const typeMap = {\n        'pdf': 'application/pdf',\n        'zip': 'application/zip',\n        'rar': 'application/x-rar-compressed'\n      };\n      return typeMap[extension] || 'application/octet-stream';\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * Check if resource is an image from Performance API\n   */\n  isImageResource(url) {\n    return this.isKnownImageExtension(url) || this.isCDNImage(url);\n  }\n\n  /**\n   * Reset collection state for new scan\n   */\n  resetCollectionState() {\n    this.feeds = {\n      high_confidence: [],\n      same_origin: [],\n      external: [],\n      pending: []\n    };\n    \n    this.processed = [];\n    this.cache.clear();\n    this.urlCache.clear();\n    this.documentQueue = [];\n    this.scannedUrls.clear();\n    this.positionTracker.clear();\n    this.positionCounter = 0;\n    \n    this.metrics = {\n      totalFound: 0,\n      categorized: 0,\n      validated: 0,\n      duplicates: 0,\n      errors: 0,\n      processingTime: 0,\n      methodStats: {\n        performanceAPI: 0,\n        shadowDOM: 0,\n        advancedBackground: 0,\n        svgProcessing: 0,\n        lazyLoading: 0,\n        urlExtraction: 0,\n        customExtensions: 0,\n        multiDocument: 0\n      }\n    };\n  }\n\n  /**\n   * Generate final results with metadata enrichment\n   */\n  generateResults() {\n    // Sort by position to maintain discovery order\n    return this.processed\n      .sort((a, b) => (a.position || 0) - (b.position || 0))\n      .map(image => ({\n        url: image.src,\n        src: image.src, // For compatibility\n        type: image.type || this.detectMimeType(image.src),\n        size: image.size,\n        confidence: image.confidence,\n        discoveryMethod: image.discoveryMethod,\n        position: image.position,\n        metadata: {\n          ...image.metadata,\n          validated: true,\n          validationMethod: image.method\n        }\n      }));\n  }\n\n  /**\n   * Generate comprehensive metadata\n   */\n  generateMetadata() {\n    return {\n      totalFound: this.metrics.totalFound,\n      validated: this.metrics.validated,\n      duplicates: this.metrics.duplicates,\n      errors: this.metrics.errors,\n      processingTime: this.metrics.processingTime,\n      methodStats: this.metrics.methodStats,\n      feeds: {\n        high_confidence: this.feeds.high_confidence.length,\n        same_origin: this.feeds.same_origin.length,\n        external: this.feeds.external.length,\n        pending: this.feeds.pending.length\n      },\n      smartPatternStats: this.smartPatternRecognition ? this.smartPatternRecognition.getMetrics() : null,\n      performance: {\n        averageProcessingTime: this.metrics.processingTime / Math.max(this.metrics.validated, 1),\n        successRate: this.metrics.validated / Math.max(this.metrics.totalFound, 1),\n        duplicateRate: this.metrics.duplicates / Math.max(this.metrics.totalFound, 1)\n      }\n    };\n  }\n}\n\n// Export to global scope\nif (typeof window !== 'undefined') {\n  window.AdvancedCollectorSystem = AdvancedCollectorSystem;\n  console.log('\u2705 Advanced Collector System loaded successfully');\n}\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AdvancedCollectorSystem;\n}\n\n// =============================================================================\n// CONTENT ORCHESTRATOR INTEGRATION\n// =============================================================================\n\n/**\n * IMPORTANT: Heavy System Initialization (Message-Driven, Not Automatic)\n * \n * The following systems are registered but NOT automatically activated:\n * - Advanced Collector System registration\n * - Content Orchestrator integration\n * - Heavy DOM scanning operations\n * - Observer and monitoring systems\n * \n * These systems only activate when the user explicitly triggers scraping via:\n * - Extension popup action\n * - Context menu selection\n * - Keyboard shortcut\n * - Message from background service worker\n * \n * This ensures minimal performance impact during normal browsing.\n * The extension infrastructure loads, but remains dormant until needed.\n */\n\n/**\n * Register with Content Orchestrator for coordinated execution\n * This prevents duplicate scanning and implements proper throttling\n */\n(function registerWithOrchestrator() {\n  'use strict';\n  \n  // Wait for Content Orchestrator to be available\n  function waitForOrchestrator(callback, retries = 10) {\n    if (typeof window !== 'undefined' && window.__ST?.orchestrator) {\n      callback(window.__ST.orchestrator);\n    } else if (retries > 0) {\n      setTimeout(() => waitForOrchestrator(callback, retries - 1), 100);\n    } else {\n      console.warn('\u26A0\uFE0F Content Orchestrator not found - Advanced Collector System will not register');\n    }\n  }\n  \n  // Registration function\n  function registerDetector(orchestrator) {\n    try {\n      // Create detector instance\n      const collector = new AdvancedCollectorSystem({\n        // Optimized settings for orchestrated execution\n        concurrency: 3, // Reduced for coordinated mode\n        timeout: 20000, // 20 seconds \n        maxDocuments: 5, // Limit document scanning\n        maxDepth: 1, // Reduce depth to prevent excessive scanning\n        \n        // Enable key detection methods but be selective\n        enablePerformanceAPI: true,\n        enableShadowDOM: true,\n        enableAdvancedBackground: true,\n        enableSVGProcessing: true,\n        enableLazyLoading: true,\n        enableUrlExtraction: true,\n        enableCustomExtensions: false, // Disable for performance\n        enableMultiDocument: false, // Disable to prevent iframe scanning conflicts\n        \n        // Quality filtering\n        minImageSize: 50,\n        minImageDimensions: { width: 50, height: 50 },\n        supportedFormats: ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg']\n      });\n      \n      // Create adapter function for orchestrator compatibility\n      async function advancedCollectorDetector(context = {}) {\n        console.log('\uD83D\uDE80 Advanced Collector System executing...');\n        \n        try {\n          // Use the collector's main collection method\n          const result = await collector.collectImages(context);\n          \n          if (result.success) {\n            console.log(`\u2705 Advanced Collector completed: ${result.images.length} items collected`);\n            \n            return {\n              success: true,\n              items: result.images,\n              metadata: {\n                ...result.metadata,\n                feeds: result.feeds,\n                metrics: result.metrics,\n                smartPatternMetrics: result.smartPatternMetrics\n              }\n            };\n          } else {\n            console.error('\u274C Advanced Collector failed:', result.error);\n            return {\n              success: false,\n              items: [],\n              error: result.error\n            };\n          }\n          \n        } catch (error) {\n          console.error('\u274C Advanced Collector System failed:', error);\n          return {\n            success: false,\n            items: [],\n            error: error.message\n          };\n        }\n      }\n      \n      // Register with orchestrator\n      const registered = orchestrator.registerDetector('advanced-collector-system', advancedCollectorDetector, {\n        priority: 3, // Medium priority - runs after pattern recognition\n        timeout: 25000, // 25 seconds timeout\n        maxRetries: 2,\n        dependencies: ['smart-pattern-recognition'] // Run after pattern analysis\n      });\n      \n      if (registered) {\n        console.log('\u2705 Advanced Collector System registered with Content Orchestrator');\n      } else {\n        console.warn('\u26A0\uFE0F Advanced Collector System registration failed - frame not eligible for scanning');\n      }\n      \n    } catch (error) {\n      console.error('\u274C Failed to register Advanced Collector System with orchestrator:', error);\n    }\n  }\n  \n  // Wait for orchestrator and register\n  waitForOrchestrator(registerDetector);\n  \n})(); // End orchestrator integration IIFE"],
  "mappings": "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",
  "names": ["module", "self", "handleMessage", "DynamicContentObserver", "ExtensionState", "handleScrapeImages", "handleFindGallery", "handleStartElementPicker", "handleStopElementPicker", "handleStartSmartSelector", "handleStopSmartSelector", "handleSmartFindImages", "handleStartInteractiveSelection", "handleTriggerAutoExpand", "handleRemoveLastSample", "handleClearSmartSelection", "handleSmartSelectorUpdate", "handlePatternAnalysisComplete", "messageType", "el", "elements"]
}
