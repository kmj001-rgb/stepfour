{
  "version": 3,
  "sources": ["../config/constants.js", "../lib/logger.js", "../lib/input-sanitizer.js", "../background/advanced-export-system.js", "../background/consolidated-background.js", "../background/simple-service-worker.js"],
  "sourcesContent": ["// constants.js - Centralized configuration constants for StepTwo Gallery Scraper\n// CR-005: Extract magic numbers to constants for improved maintainability\n\nexport const PERFORMANCE_CONFIG = {\n  MEMORY_SAMPLE_INTERVAL_MS: 30000,\n  MEMORY_WARNING_THRESHOLD_BYTES: 100 * 1024 * 1024,\n  MEMORY_CRITICAL_THRESHOLD_BYTES: 150 * 1024 * 1024\n};\n\nexport const EXPORT_CONFIG = {\n  MAX_FILE_SIZE_BYTES: 50 * 1024 * 1024,\n  BATCH_SIZE: 100,\n  COMPRESSION_LEVEL: 6,\n  STREAMING_THRESHOLD: 500,\n  LARGE_DATASET_THRESHOLD: 1000\n};\n\nexport const QUEUE_CONFIG = {\n  MAX_SIZE: 1000,\n  MAX_AGE_MS: 30000,\n  UPDATE_THROTTLE_MS: 100,\n  MAX_PENDING_MESSAGES: 100\n};\n\nexport const TIMEOUT_CONFIG = {\n  MESSAGE_TIMEOUT_MS: 10000,\n  CONNECTION_TIMEOUT_MS: 5000,\n  KEEPALIVE_INTERVAL_MS: 25000,\n  DOWNLOAD_TIMEOUT_MS: 120000\n};\n", "// logger.js - Production-ready logging system with environment detection and sensitive data redaction\n// Features: Log levels, environment-based filtering, sensitive data scrubbing\n// CR-020: Environment detection | CR-009: Sensitive data filtering\n\nclass Logger {\n  static LOG_LEVELS = {\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3\n  };\n\n  static SENSITIVE_PATTERNS = [\n    /apikey/i,\n    /api[_-]?key/i,\n    /token/i,\n    /password/i,\n    /passwd/i,\n    /secret/i,\n    /auth/i,\n    /credential/i,\n    /bearer/i,\n    /authorization/i,\n    /access[_-]?token/i,\n    /refresh[_-]?token/i,\n    /session[_-]?id/i,\n    /private[_-]?key/i\n  ];\n\n  constructor(moduleName = 'Unknown') {\n    this.moduleName = moduleName;\n    // Default to development for safer debugging\n    this.isProduction = false;\n    this.minLogLevel = Logger.LOG_LEVELS.DEBUG;\n    this._environmentDetected = false;\n    \n    // SECURITY FIX: Synchronously detect environment to prevent race condition\n    // Environment detection is now synchronous - no async storage checks\n    this._detectEnvironmentSync();\n    \n    // NOTE: No console logging during construction for MV3 compliance\n  }\n\n  // SECURITY FIX: Made synchronous to prevent race condition in logging\n  // Previously async _detectEnvironment() could cause logs before environment detected\n  _detectEnvironmentSync() {\n    if (this._environmentDetected) {\n      return;\n    }\n    \n    try {\n      // Check if we're in a chrome extension (synchronous check only)\n      const isChromeExtension = typeof chrome !== 'undefined' && \n                                chrome.runtime && \n                                chrome.runtime.id;\n      \n      if (!isChromeExtension) {\n        // Not in extension context - always use development mode\n        this.isProduction = false;\n        this.minLogLevel = Logger.LOG_LEVELS.DEBUG;\n      } else {\n        // In extension context - default to development for safety\n        // Production mode must be explicitly set via setProductionMode() method\n        this.isProduction = false;\n        this.minLogLevel = Logger.LOG_LEVELS.DEBUG;\n      }\n      \n      this._environmentDetected = true;\n      \n    } catch (error) {\n      // If detection fails, default to development\n      this.isProduction = false;\n      this.minLogLevel = Logger.LOG_LEVELS.DEBUG;\n      this._environmentDetected = true;\n    }\n  }\n\n  /**\n   * Explicitly set production mode (must be called after construction if needed)\n   * This avoids async race conditions while still allowing production mode\n   */\n  setProductionMode(enabled = true) {\n    this.isProduction = enabled;\n    this.minLogLevel = enabled ? Logger.LOG_LEVELS.WARN : Logger.LOG_LEVELS.DEBUG;\n  }\n\n  _shouldLog(level) {\n    // Environment already detected synchronously in constructor\n    // No race condition possible\n    return level >= this.minLogLevel;\n  }\n\n  _redactSensitiveData(obj) {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    if (typeof obj === 'string') {\n      for (const pattern of Logger.SENSITIVE_PATTERNS) {\n        if (pattern.test(obj)) {\n          return '[REDACTED]';\n        }\n      }\n      return obj;\n    }\n\n    if (typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this._redactSensitiveData(item));\n    }\n\n    const redacted = {};\n    for (const [key, value] of Object.entries(obj)) {\n      const isSensitiveKey = Logger.SENSITIVE_PATTERNS.some(pattern => pattern.test(key));\n      \n      if (isSensitiveKey) {\n        redacted[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        redacted[key] = this._redactSensitiveData(value);\n      } else {\n        redacted[key] = value;\n      }\n    }\n    \n    return redacted;\n  }\n\n  _formatMessage(level, args) {\n    const timestamp = new Date().toISOString();\n    const levelStr = Object.keys(Logger.LOG_LEVELS).find(k => Logger.LOG_LEVELS[k] === level);\n    const prefix = `[${timestamp}] [${levelStr}] [${this.moduleName}]`;\n    \n    const redactedArgs = args.map(arg => this._redactSensitiveData(arg));\n    \n    return [prefix, ...redactedArgs];\n  }\n\n  debug(...args) {\n    if (this._shouldLog(Logger.LOG_LEVELS.DEBUG)) {\n      const formatted = this._formatMessage(Logger.LOG_LEVELS.DEBUG, args);\n      console.log(...formatted);\n    }\n  }\n\n  info(...args) {\n    if (this._shouldLog(Logger.LOG_LEVELS.INFO)) {\n      const formatted = this._formatMessage(Logger.LOG_LEVELS.INFO, args);\n      console.log(...formatted);\n    }\n  }\n\n  warn(...args) {\n    if (this._shouldLog(Logger.LOG_LEVELS.WARN)) {\n      const formatted = this._formatMessage(Logger.LOG_LEVELS.WARN, args);\n      console.warn(...formatted);\n    }\n  }\n\n  error(...args) {\n    if (this._shouldLog(Logger.LOG_LEVELS.ERROR)) {\n      // SECURITY FIX (M3): Sanitize error messages in production to prevent information disclosure\n      // Keep detailed errors in development mode for debugging\n      const sanitizedArgs = this.isProduction ? \n        args.map(arg => this.sanitizeErrorForUser(arg)) : args;\n      \n      const formatted = this._formatMessage(Logger.LOG_LEVELS.ERROR, sanitizedArgs);\n      console.error(...formatted);\n    }\n  }\n\n  /**\n   * SECURITY FIX (M3): Sanitize error messages for production environments\n   * Prevents information disclosure of internal architecture details\n   * \n   * @param {*} error - Error object, string, or any value to sanitize\n   * @returns {string|Object} Sanitized generic error message in production, original in development\n   */\n  sanitizeErrorForUser(error) {\n    // If not in production, return original error for debugging\n    if (!this.isProduction) {\n      return error;\n    }\n\n    // Generic error message for production to prevent information disclosure\n    const genericMessage = 'An error occurred processing your request';\n\n    // Handle different error types\n    if (error instanceof Error) {\n      // For Error objects, return generic message but preserve error type for logging\n      return {\n        message: genericMessage,\n        type: error.constructor.name\n      };\n    } else if (typeof error === 'string') {\n      // For string errors, replace with generic message\n      return genericMessage;\n    } else if (typeof error === 'object' && error !== null) {\n      // For objects with error details, return sanitized version\n      return {\n        message: genericMessage,\n        sanitized: true\n      };\n    }\n\n    // For other types, return generic message\n    return genericMessage;\n  }\n\n  critical(...args) {\n    const formatted = this._formatMessage(Logger.LOG_LEVELS.ERROR, args);\n    console.error(...formatted);\n  }\n}\n\n// ES Module export (for modern bundlers and ES6 imports)\nexport { Logger };\n\n// Global export (for browser global scope access)\nif (typeof globalThis !== 'undefined') {\n  globalThis.Logger = Logger;\n}\n", "// input-sanitizer.js - Comprehensive Input Sanitization System\n// Prevents XSS, injection attacks, and path traversal vulnerabilities\n// CR-019: Critical security hardening for user input processing\n\nconsole.log('\uD83D\uDEE1\uFE0F Loading Input Sanitizer System...');\n\n/**\n * InputSanitizer - Comprehensive input validation and sanitization\n * Provides methods to sanitize CSS selectors, URLs, filenames, and HTML content\n */\nclass InputSanitizer {\n  constructor(options = {}) {\n    this.options = {\n      // Selector sanitization options\n      maxSelectorLength: options.maxSelectorLength || 10000,\n      allowedSelectorChars: options.allowedSelectorChars || /^[a-zA-Z0-9\\s\\-_#.\\[\\]=:()>+~*,\"'|^$]+$/,\n      \n      // URL sanitization options\n      allowedProtocols: options.allowedProtocols || ['http:', 'https:'],\n      maxUrlLength: options.maxUrlLength || 2048,\n      \n      // Filename sanitization options\n      maxFilenameLength: options.maxFilenameLength || 255,\n      allowedFilenameChars: options.allowedFilenameChars || /^[a-zA-Z0-9\\-_. ()]+$/,\n      \n      // HTML sanitization options\n      escapeHtml: options.escapeHtml !== false,\n      \n      ...options\n    };\n    \n    // Dangerous patterns to block\n    this.dangerousPatterns = {\n      // CSS selector injection patterns\n      selector: [\n        /<script/i,\n        /javascript:/i,\n        /on\\w+=/i,\n        /eval\\(/i,\n        /expression\\(/i,\n        /<iframe/i,\n        /<embed/i,\n        /<object/i\n      ],\n      \n      // URL injection patterns\n      url: [\n        /javascript:/i,\n        /data:text\\/html/i,\n        /vbscript:/i,\n        /file:/i,\n        /<script/i,\n        /on\\w+=/i\n      ],\n      \n      // Path traversal patterns\n      path: [\n        /\\.\\./,\n        /\\/\\.\\./,\n        /\\.\\.[\\\\/]/,\n        /^[\\\\\\/]/,\n        /[\\\\/]$/\n      ]\n    };\n    \n    // Statistics tracking\n    this.stats = {\n      selectorsProcessed: 0,\n      urlsProcessed: 0,\n      filenamesProcessed: 0,\n      htmlProcessed: 0,\n      threatsBlocked: 0\n    };\n  }\n\n  /**\n   * Sanitize CSS selectors to prevent injection attacks\n   * @param {string} selector - CSS selector to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized selector or empty string if invalid\n   */\n  sanitizeSelector(selector, options = {}) {\n    this.stats.selectorsProcessed++;\n    \n    try {\n      // Input validation\n      if (!selector || typeof selector !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      selector = selector.trim();\n      \n      // Check length limits\n      if (selector.length === 0) {\n        return '';\n      }\n      \n      if (selector.length > this.options.maxSelectorLength) {\n        console.warn('\uD83D\uDEE1\uFE0F Selector exceeds maximum length:', selector.length);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Check for dangerous patterns\n      for (const pattern of this.dangerousPatterns.selector) {\n        if (pattern.test(selector)) {\n          console.warn('\uD83D\uDEE1\uFE0F Dangerous pattern detected in selector:', pattern);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Validate against allowed characters\n      if (!this.options.allowedSelectorChars.test(selector)) {\n        console.warn('\uD83D\uDEE1\uFE0F Invalid characters in selector:', selector);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Additional validation: Try to parse as CSS selector\n      // This catches malformed selectors that might cause errors\n      if (typeof document !== 'undefined') {\n        try {\n          // Test if selector is valid by attempting to query\n          document.querySelector(':root'); // Dummy query to ensure API is available\n          document.createDocumentFragment().querySelector(selector); // Will throw if invalid\n        } catch (e) {\n          // If we can't test the selector, be conservative but log the issue\n          console.warn('\uD83D\uDEE1\uFE0F Selector validation test failed:', e.message);\n          // Don't block here as some complex selectors might be valid but fail in fragment\n          // The character whitelist above should catch most issues\n        }\n      }\n      \n      // Additional security: Escape special characters that might cause issues\n      // But preserve valid CSS selector syntax\n      selector = selector\n        .replace(/[<>]/g, '') // Remove angle brackets entirely\n        .replace(/\\\\/g, '\\\\\\\\'); // Escape backslashes\n      \n      return selector;\n      \n    } catch (error) {\n      console.error('\u274C Selector sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Sanitize URLs to allow only safe protocols (http/https)\n   * @param {string} url - URL to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized URL or empty string if invalid\n   */\n  sanitizeURL(url, options = {}) {\n    this.stats.urlsProcessed++;\n    \n    try {\n      // Input validation\n      if (!url || typeof url !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      url = url.trim();\n      \n      // Check length limits\n      if (url.length === 0) {\n        return '';\n      }\n      \n      if (url.length > this.options.maxUrlLength) {\n        console.warn('\uD83D\uDEE1\uFE0F URL exceeds maximum length:', url.length);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Check for dangerous patterns\n      for (const pattern of this.dangerousPatterns.url) {\n        if (pattern.test(url)) {\n          console.warn('\uD83D\uDEE1\uFE0F Dangerous pattern detected in URL:', pattern);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Parse URL to validate structure\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        // Try with a base URL for relative URLs\n        try {\n          parsedUrl = new URL(url, 'https://example.com');\n        } catch (e2) {\n          console.warn('\uD83D\uDEE1\uFE0F Invalid URL format:', url);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Validate protocol\n      if (!this.options.allowedProtocols.includes(parsedUrl.protocol)) {\n        console.warn('\uD83D\uDEE1\uFE0F Disallowed protocol in URL:', parsedUrl.protocol);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Additional security checks\n      // Block URLs with embedded credentials (potential phishing)\n      if (parsedUrl.username || parsedUrl.password) {\n        console.warn('\uD83D\uDEE1\uFE0F URL contains credentials:', url);\n        this.stats.threatsBlocked++;\n        return '';\n      }\n      \n      // Block localhost and private IPs in production\n      if (options.blockPrivateIPs) {\n        const hostname = parsedUrl.hostname.toLowerCase();\n        if (\n          hostname === 'localhost' ||\n          hostname === '127.0.0.1' ||\n          hostname.startsWith('192.168.') ||\n          hostname.startsWith('10.') ||\n          hostname.startsWith('172.16.') ||\n          hostname === '[::1]'\n        ) {\n          console.warn('\uD83D\uDEE1\uFE0F Private IP/localhost blocked:', hostname);\n          this.stats.threatsBlocked++;\n          return '';\n        }\n      }\n      \n      // Return the sanitized URL\n      return parsedUrl.href;\n      \n    } catch (error) {\n      console.error('\u274C URL sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Sanitize filenames to prevent path traversal and special characters\n   * @param {string} filename - Filename to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized filename or generated safe filename\n   */\n  sanitizeFilename(filename, options = {}) {\n    this.stats.filenamesProcessed++;\n    \n    try {\n      // Input validation\n      if (!filename || typeof filename !== 'string') {\n        return this.generateSafeFilename();\n      }\n      \n      // Extract just the filename if a full path was provided\n      filename = filename.split(/[\\\\/]/).pop() || filename;\n      \n      // Trim whitespace\n      filename = filename.trim();\n      \n      // Check length limits\n      if (filename.length === 0) {\n        return this.generateSafeFilename();\n      }\n      \n      if (filename.length > this.options.maxFilenameLength) {\n        console.warn('\uD83D\uDEE1\uFE0F Filename exceeds maximum length:', filename.length);\n        filename = filename.substring(0, this.options.maxFilenameLength);\n      }\n      \n      // Check for path traversal patterns\n      for (const pattern of this.dangerousPatterns.path) {\n        if (pattern.test(filename)) {\n          console.warn('\uD83D\uDEE1\uFE0F Path traversal pattern detected:', pattern);\n          this.stats.threatsBlocked++;\n          return this.generateSafeFilename();\n        }\n      }\n      \n      // Remove dangerous characters\n      // Keep: letters, numbers, dash, underscore, dot, space, parentheses\n      filename = filename.replace(/[^a-zA-Z0-9\\-_. ()]/g, '_');\n      \n      // Prevent multiple consecutive dots (potential traversal bypass)\n      filename = filename.replace(/\\.{2,}/g, '.');\n      \n      // Prevent leading/trailing dots and spaces\n      filename = filename.replace(/^[.\\s]+|[.\\s]+$/g, '');\n      \n      // Ensure we still have a valid filename\n      if (filename.length === 0 || filename === '.') {\n        return this.generateSafeFilename();\n      }\n      \n      // Validate against allowed characters (final check)\n      if (!this.options.allowedFilenameChars.test(filename)) {\n        console.warn('\uD83D\uDEE1\uFE0F Invalid characters remain in filename:', filename);\n        return this.generateSafeFilename();\n      }\n      \n      // Prevent Windows reserved filenames\n      const reservedNames = ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', \n                             'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', \n                             'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'];\n      const nameWithoutExt = filename.split('.')[0].toUpperCase();\n      if (reservedNames.includes(nameWithoutExt)) {\n        filename = '_' + filename;\n      }\n      \n      return filename;\n      \n    } catch (error) {\n      console.error('\u274C Filename sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return this.generateSafeFilename();\n    }\n  }\n\n  /**\n   * Sanitize HTML content to prevent XSS attacks\n   * @param {string} html - HTML content to sanitize\n   * @param {Object} options - Additional options\n   * @returns {string} - Sanitized HTML (escaped)\n   */\n  sanitizeHTML(html, options = {}) {\n    this.stats.htmlProcessed++;\n    \n    try {\n      // Input validation\n      if (!html || typeof html !== 'string') {\n        return '';\n      }\n      \n      // Trim whitespace\n      html = html.trim();\n      \n      if (html.length === 0) {\n        return '';\n      }\n      \n      // Escape HTML entities to prevent XSS\n      const htmlEscapeMap = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '/': '&#x2F;'\n      };\n      \n      const escapedHtml = html.replace(/[&<>\"'\\/]/g, (char) => {\n        return htmlEscapeMap[char];\n      });\n      \n      return escapedHtml;\n      \n    } catch (error) {\n      console.error('\u274C HTML sanitization error:', error);\n      this.stats.threatsBlocked++;\n      return '';\n    }\n  }\n\n  /**\n   * Generate a safe filename with timestamp\n   * @returns {string} - Safe generated filename\n   */\n  generateSafeFilename() {\n    const timestamp = Date.now();\n    const random = Math.floor(Math.random() * 10000);\n    return `file_${timestamp}_${random}`;\n  }\n\n  /**\n   * Batch sanitize multiple selectors\n   * @param {Array<string>} selectors - Array of selectors to sanitize\n   * @returns {Array<string>} - Array of sanitized selectors\n   */\n  sanitizeSelectors(selectors) {\n    if (!Array.isArray(selectors)) {\n      return [];\n    }\n    return selectors.map(selector => this.sanitizeSelector(selector)).filter(s => s.length > 0);\n  }\n\n  /**\n   * Batch sanitize multiple URLs\n   * @param {Array<string>} urls - Array of URLs to sanitize\n   * @returns {Array<string>} - Array of sanitized URLs\n   */\n  sanitizeURLs(urls, options = {}) {\n    if (!Array.isArray(urls)) {\n      return [];\n    }\n    return urls.map(url => this.sanitizeURL(url, options)).filter(u => u.length > 0);\n  }\n\n  /**\n   * Get sanitization statistics\n   * @returns {Object} - Statistics object\n   */\n  getStats() {\n    return { ...this.stats };\n  }\n\n  /**\n   * Reset statistics\n   */\n  resetStats() {\n    this.stats = {\n      selectorsProcessed: 0,\n      urlsProcessed: 0,\n      filenamesProcessed: 0,\n      htmlProcessed: 0,\n      threatsBlocked: 0\n    };\n  }\n}\n\n// Export for use in different contexts\nif (typeof window !== 'undefined') {\n  window.InputSanitizer = InputSanitizer;\n}\n\n// Export to globalThis for service worker context\nif (typeof globalThis !== 'undefined') {\n  globalThis.InputSanitizer = InputSanitizer;\n}\n\n// ES6 export\nexport { InputSanitizer };\n\nconsole.log('\u2705 Input Sanitizer System loaded');\n", "// advanced-export-system.js - Enterprise-grade export system with progress tracking and memory management\n// Enhanced with DataGrab's proven patterns and enterprise reliability features\n\nimport { EXPORT_CONFIG, PERFORMANCE_CONFIG } from '../config/constants.js';\n\nclass AdvancedExportSystem {\n  constructor(options = {}) {\n    this.options = {\n      enableCompression: options.enableCompression !== false,\n      includeMetadata: options.includeMetadata !== false,\n      includeThumbnails: options.includeThumbnails !== false,\n      maxFileSize: options.maxFileSize || EXPORT_CONFIG.MAX_FILE_SIZE_BYTES,\n      tempStorage: options.tempStorage || 'memory', // 'memory' or 'indexeddb'\n      batchSize: options.batchSize || EXPORT_CONFIG.BATCH_SIZE,\n      maxRetries: options.maxRetries || 3,\n      retryDelay: options.retryDelay || 1000,\n      enableProgressTracking: options.enableProgressTracking !== false,\n      enableUserNotifications: options.enableUserNotifications !== false,\n      enableMemoryManagement: options.enableMemoryManagement !== false,\n      compressionLevel: options.compressionLevel || EXPORT_CONFIG.COMPRESSION_LEVEL,\n      streamingThreshold: options.streamingThreshold || EXPORT_CONFIG.STREAMING_THRESHOLD,\n      ...options\n    };\n\n    this.exportStats = {\n      totalExports: 0,\n      formatCounts: {},\n      averageExportTime: 0,\n      totalDataExported: 0,\n      memoryPeakUsage: 0,\n      averageBatchTime: 0,\n      recoveredErrors: 0,\n      largeDatasetExports: 0\n    };\n\n    // Memory limits for unbounded array growth prevention\n    this.MAX_EXPORT_HISTORY = 100;\n    \n    this.tempData = new Map();\n    this.exportHistory = [];\n    this.activeExports = new Map();\n    this.progressCallbacks = new Map();\n    \n    // Memory management\n    this.memoryThreshold = PERFORMANCE_CONFIG.MEMORY_WARNING_THRESHOLD_BYTES;\n    this.lastGC = Date.now();\n    this.gcInterval = PERFORMANCE_CONFIG.MEMORY_SAMPLE_INTERVAL_MS;\n    \n    // Performance monitoring\n    this.performanceMetrics = {\n      processingTimes: [],\n      memoryUsage: [],\n      batchSizes: [],\n      errorRates: [],\n      throughputRates: []\n    };\n\n    // User notification system\n    this.notificationCallbacks = new Set();\n    \n    console.log('\uD83D\uDE80 Enterprise Export System initialized with enhanced capabilities');\n  }\n\n  // Enhanced main export method with progress tracking and error recovery\n  async exportData(data, format, filename, options = {}) {\n    const exportId = this.generateExportId();\n    const startTime = Date.now();\n    const exportOptions = { ...this.options, ...options };\n\n    try {\n      // Validate data\n      if (!data || !Array.isArray(data.items)) {\n        throw new Error('Invalid data format: expected object with items array');\n      }\n\n      const itemCount = data.items.length;\n      console.log(`\uD83D\uDCCA Starting ${format.toUpperCase()} export: ${itemCount} items`);\n\n      // Initialize progress tracking\n      if (exportOptions.enableProgressTracking) {\n        this.initializeProgressTracking(exportId, itemCount);\n      }\n\n      // Memory management for large datasets\n      if (exportOptions.enableMemoryManagement && itemCount > EXPORT_CONFIG.LARGE_DATASET_THRESHOLD) {\n        console.log(`\uD83E\uDDE0 Large dataset detected (${itemCount} items). Using optimized processing...`);\n        this.scheduleMemoryManagement();\n        this.exportStats.largeDatasetExports++;\n      }\n\n      // Show user notification\n      if (exportOptions.enableUserNotifications) {\n        await this.showNotification('Export Started', \n          `Starting ${format.toUpperCase()} export with ${itemCount} items...`, 'info');\n      }\n\n      let result;\n      let retries = 0;\n      const maxRetries = exportOptions.maxRetries || 3;\n\n      // Retry mechanism with exponential backoff\n      while (retries <= maxRetries) {\n        try {\n          // Route to appropriate export method with progress tracking\n          switch (format.toLowerCase()) {\n          case 'xlsx':\n          case 'excel':\n            result = await this.exportToExcelWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          case 'csv':\n            result = await this.exportToCSVWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          case 'json':\n            result = await this.exportToJSONWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          case 'html':\n            result = await this.exportToHTMLWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          case 'xml':\n            result = await this.exportToXMLWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          case 'zip':\n            result = await this.exportToZipWithProgress(data, filename, exportOptions, exportId);\n            break;\n\n          default:\n            throw new Error(`Unsupported export format: ${format}`);\n          }\n          break; // Success, exit retry loop\n\n        } catch (error) {\n          retries++;\n          console.warn(`\u26A0\uFE0F Export attempt ${retries}/${maxRetries + 1} failed:`, error.message);\n          \n          if (retries <= maxRetries) {\n            const delay = exportOptions.retryDelay * Math.pow(2, retries - 1); // Exponential backoff\n            console.log(`\uD83D\uDD04 Retrying in ${delay}ms...`);\n            \n            if (exportOptions.enableUserNotifications) {\n              await this.showNotification('Export Retry', \n                `Retrying export (attempt ${retries + 1}/${maxRetries + 1})...`, 'warning');\n            }\n            \n            await this.delay(delay);\n            this.exportStats.recoveredErrors++;\n          } else {\n            throw error; // Max retries exceeded\n          }\n        }\n      }\n\n      // Update progress to completion\n      if (exportOptions.enableProgressTracking) {\n        this.updateProgress(exportId, 100, 'Export completed successfully');\n      }\n\n      // Update statistics with enhanced metrics\n      const exportTime = Date.now() - startTime;\n      this.updateEnhancedStats(format, exportTime, result.size, itemCount, exportId);\n\n      // Enforce memory limit before adding to history\n      if (this.exportHistory.length >= this.MAX_EXPORT_HISTORY) {\n        this.exportHistory.shift(); // Remove oldest entry (at beginning since using push)\n      }\n      // Add to history with enhanced information\n      this.exportHistory.push({\n        timestamp: Date.now(),\n        exportId,\n        format: format,\n        filename: filename,\n        itemCount: itemCount,\n        fileSize: result.size,\n        exportTime: exportTime,\n        retryCount: retries,\n        memoryPeak: this.getMemoryUsage(),\n        success: true,\n        throughput: itemCount / (exportTime / 1000) // items per second\n      });\n\n      // Show completion notification\n      if (exportOptions.enableUserNotifications) {\n        const sizeFormatted = this.formatBytes(result.size);\n        const throughput = Math.round(itemCount / (exportTime / 1000));\n        await this.showNotification('Export Complete', \n          `\u2705 Successfully exported ${itemCount} items (${sizeFormatted}) in ${this.formatTime(exportTime)} \u2022 ${throughput} items/sec`, \n          'success');\n      }\n\n      // Cleanup resources\n      this.cleanupExport(exportId);\n\n      return {\n        success: true,\n        exportId,\n        data: result.data,\n        filename: result.filename,\n        size: result.size,\n        mimeType: result.mimeType,\n        exportTime: exportTime,\n        retryCount: retries,\n        itemsProcessed: itemCount,\n        throughput: itemCount / (exportTime / 1000)\n      };\n\n    } catch (error) {\n      console.error('\u274C Export failed after all retries:', error);\n      \n      // Enforce memory limit before adding to history\n      if (this.exportHistory.length >= this.MAX_EXPORT_HISTORY) {\n        this.exportHistory.shift(); // Remove oldest entry (at beginning since using push)\n      }\n      // Update failed export history\n      this.exportHistory.push({\n        timestamp: Date.now(),\n        exportId,\n        format: format,\n        filename: filename,\n        itemCount: data.items?.length || 0,\n        error: error.message,\n        exportTime: Date.now() - startTime,\n        success: false\n      });\n\n      // Show error notification\n      if (exportOptions.enableUserNotifications) {\n        await this.showNotification('Export Failed', \n          `\u274C Failed to export ${format.toUpperCase()}: ${this.getUserFriendlyError(error.message)}`, \n          'error');\n      }\n\n      // Cleanup resources\n      this.cleanupExport(exportId);\n\n      return {\n        success: false,\n        exportId,\n        error: error.message,\n        exportTime: Date.now() - startTime,\n        userFriendlyError: this.getUserFriendlyError(error.message)\n      };\n    }\n  }\n\n  // Enhanced Excel export with progress tracking and advanced formatting\n  async exportToExcelWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 5, 'Initializing Excel export...');\n\n      const items = data.items || [];\n      \n      // Detect large datasets and route to streaming export\n      if (items.length > options.streamingThreshold) {\n        console.log(`\uD83D\uDCCA LARGE DATASET DETECTED: ${items.length} items > ${options.streamingThreshold} threshold`);\n        console.log('\uD83D\uDE80 ROUTING: Using streaming export for memory optimization');\n        return await this.exportToExcelStreaming(data, filename, options, exportId);\n      }\n\n      console.log(`\uD83D\uDCCB STANDARD DATASET: ${items.length} items <= ${options.streamingThreshold} threshold`);\n      console.log('\uD83D\uDCC4 ROUTING: Using standard Excel export');\n\n      // Enhanced Diagnostics: XLSX Library Loading\n      if (typeof globalThis.XLSX === 'undefined') {\n        const errorMessage = 'XLSX library failed to load. This is required for Excel exports. Please check your internet connection and try again, or use CSV export as an alternative.';\n        console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: XLSX Export Failed - Library not loaded:', errorMessage);\n        console.warn('\uD83D\uDD04 FALLBACK DIAGNOSTIC: User should use CSV export as alternative');\n        throw new Error(errorMessage);\n      }\n\n      const XLSX = globalThis.XLSX;\n      \n      // Verify XLSX library functionality\n      if (!XLSX.utils || !XLSX.utils.book_new || !XLSX.write) {\n        const errorMessage = 'XLSX library loaded but is incomplete or corrupted. Please refresh the page and try again.';\n        console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: XLSX Export Failed - Library corrupted:', errorMessage);\n        console.warn('\uD83D\uDD04 FALLBACK DIAGNOSTIC: User should refresh page or use CSV export');\n        throw new Error(errorMessage);\n      }\n      \n      // Enhanced Diagnostics: XLSX Success\n      console.log('\u2705 FEATURE DIAGNOSTIC: XLSX Library successfully loaded and verified');\n      console.log('\uD83D\uDCCA ENHANCED FEATURE: Excel export with advanced formatting enabled');\n\n      this.updateProgress(exportId, 10, 'Creating Excel workbook...');\n\n      const workbook = XLSX.utils.book_new();\n\n      // Main items sheet with batch processing for large datasets\n      if (items.length > options.batchSize) {\n        this.updateProgress(exportId, 15, `Processing ${items.length} items in batches...`);\n        const itemsSheet = await this.createItemsSheetBatched(items, options, exportId);\n        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'Items');\n      } else {\n        this.updateProgress(exportId, 15, 'Creating items sheet...');\n        const itemsSheet = this.createItemsSheetEnhanced(items, options);\n        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'Items');\n      }\n\n      this.updateProgress(exportId, 40, 'Adding summary sheet...');\n\n      // Enhanced summary sheet\n      if (data.summary) {\n        const summarySheet = this.createEnhancedSummarySheet(data.summary, options);\n        XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');\n      }\n\n      this.updateProgress(exportId, 50, 'Adding statistics sheet...');\n\n      // Enhanced statistics sheet\n      const statsSheet = this.createEnhancedStatsSheet(data, options);\n      XLSX.utils.book_append_sheet(workbook, statsSheet, 'Statistics');\n\n      this.updateProgress(exportId, 60, 'Processing error log...');\n\n      // Error log sheet (if errors exist)\n      if (data.errors && data.errors.length > 0) {\n        const errorSheet = this.createEnhancedErrorSheet(data.errors, options);\n        XLSX.utils.book_append_sheet(workbook, errorSheet, 'Errors');\n      }\n\n      this.updateProgress(exportId, 70, 'Processing duplicate analysis...');\n\n      // Duplicate groups sheet (if available)\n      if (data.duplicateGroups && data.duplicateGroups.length > 0) {\n        const dupSheet = this.createEnhancedDuplicateSheet(data.duplicateGroups, options);\n        XLSX.utils.book_append_sheet(workbook, dupSheet, 'Duplicates');\n      }\n\n      // Performance metrics sheet\n      if (options.includePerformanceMetrics) {\n        this.updateProgress(exportId, 75, 'Adding performance metrics...');\n        const perfSheet = this.createPerformanceMetricsSheet(data, options);\n        XLSX.utils.book_append_sheet(workbook, perfSheet, 'Performance');\n      }\n\n      this.updateProgress(exportId, 80, 'Generating Excel file...');\n\n      // Generate file with enhanced options\n      const writeOptions = {\n        bookType: 'xlsx',\n        type: 'array',\n        compression: options.enableCompression,\n        cellStyles: true // Enable formatting\n      };\n      \n      // Enhanced Diagnostics: XLSX Generation Options\n      console.log('\uD83D\uDCCA XLSX GENERATION DIAGNOSTIC:', {\n        compression: writeOptions.compression,\n        cellStyles: writeOptions.cellStyles,\n        worksheetCount: workbook.SheetNames.length,\n        includeMetadata: options.includeMetadata\n      });\n      \n      const excelBuffer = XLSX.write(workbook, writeOptions);\n      console.log(`\u2705 FEATURE DIAGNOSTIC: Excel file generated successfully (${this.formatBytes(excelBuffer.byteLength)})`);\n\n      this.updateProgress(exportId, 90, 'Finalizing export...');\n\n      const finalFilename = this.ensureExtension(filename || 'export', 'xlsx');\n\n      return {\n        data: excelBuffer,\n        filename: finalFilename,\n        size: excelBuffer.byteLength,\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      };\n\n    } catch (error) {\n      // Provide user-friendly error messages\n      if (error.message.includes('XLSX library')) {\n        throw new Error(`Excel Export Failed: ${error.message}\\\\n\\\\nTroubleshooting steps:\\\\n1. Check your internet connection\\\\n2. Disable ad blockers temporarily\\\\n3. Refresh the page and try again\\\\n4. Use CSV export as an alternative`);\n      } else {\n        throw new Error(`Excel export failed: ${error.message}`);\n      }\n    }\n  }\n\n  // Streaming Excel export for large datasets with memory optimization\n  async exportToExcelStreaming(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 5, 'Initializing streaming Excel export...');\n\n      // Enhanced Diagnostics: XLSX Library Loading\n      if (typeof globalThis.XLSX === 'undefined') {\n        const errorMessage = 'XLSX library failed to load. This is required for Excel exports.';\n        console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: XLSX Export Failed - Library not loaded:', errorMessage);\n        throw new Error(errorMessage);\n      }\n\n      const XLSX = globalThis.XLSX;\n      \n      // Verify XLSX library functionality\n      if (!XLSX.utils || !XLSX.utils.book_new || !XLSX.write) {\n        const errorMessage = 'XLSX library loaded but is incomplete or corrupted.';\n        console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: XLSX Export Failed - Library corrupted:', errorMessage);\n        throw new Error(errorMessage);\n      }\n      \n      console.log('\u2705 FEATURE DIAGNOSTIC: XLSX Library verified for streaming export');\n      console.log('\uD83D\uDE80 ENHANCED FEATURE: Streaming Excel export with memory optimization enabled');\n\n      this.updateProgress(exportId, 10, 'Creating Excel workbook...');\n\n      const workbook = XLSX.utils.book_new();\n      const items = data.items || [];\n      const batchSize = options.batchSize || EXPORT_CONFIG.BATCH_SIZE;\n      \n      console.log(`\uD83D\uDCCA STREAMING EXPORT: Processing ${items.length} items in batches of ${batchSize}`);\n\n      // Process main items sheet with streaming\n      const worksheetData = [];\n      \n      // Add headers\n      const headers = this.generateCSVHeaders(items, options);\n      worksheetData.push(headers);\n\n      this.updateProgress(exportId, 15, 'Processing items in batches...');\n\n      const totalBatches = Math.ceil(items.length / batchSize);\n      \n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const batchNumber = Math.floor(i / batchSize) + 1;\n        const progress = 15 + ((i / items.length) * 55);\n        \n        this.updateProgress(exportId, progress, `Processing batch ${batchNumber}/${totalBatches} (${batch.length} items)...`);\n        \n        // Process batch - flatten each item\n        batch.forEach(item => {\n          const flatItem = this.flattenItemForExcel(item);\n          worksheetData.push(flatItem);\n        });\n        \n        // GC hint every 5 batches\n        if (batchNumber % 5 === 0) {\n          console.log(`\uD83E\uDDE0 MEMORY MANAGEMENT: Triggering cleanup after batch ${batchNumber}`);\n          await this.performMemoryCleanup();\n          await this.delay(10); // Give browser chance to GC\n        }\n        \n        // Allow other tasks to run\n        await this.delay(1);\n      }\n\n      this.updateProgress(exportId, 70, 'Creating Items worksheet...');\n      \n      // Create worksheet from accumulated data\n      const itemsSheet = XLSX.utils.aoa_to_sheet(worksheetData);\n      XLSX.utils.book_append_sheet(workbook, itemsSheet, 'Items');\n      \n      // Clear worksheetData to free memory\n      worksheetData.length = 0;\n\n      this.updateProgress(exportId, 75, 'Adding summary sheet...');\n\n      // Enhanced summary sheet\n      if (data.summary) {\n        const summarySheet = this.createEnhancedSummarySheet(data.summary, options);\n        XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');\n      }\n\n      this.updateProgress(exportId, 80, 'Adding statistics sheet...');\n\n      // Enhanced statistics sheet\n      const statsSheet = this.createEnhancedStatsSheet(data, options);\n      XLSX.utils.book_append_sheet(workbook, statsSheet, 'Statistics');\n\n      // Error log sheet (if errors exist)\n      if (data.errors && data.errors.length > 0) {\n        this.updateProgress(exportId, 82, 'Processing error log...');\n        const errorSheet = this.createEnhancedErrorSheet(data.errors, options);\n        XLSX.utils.book_append_sheet(workbook, errorSheet, 'Errors');\n      }\n\n      // Duplicate groups sheet (if available)\n      if (data.duplicateGroups && data.duplicateGroups.length > 0) {\n        this.updateProgress(exportId, 84, 'Processing duplicate analysis...');\n        const dupSheet = this.createEnhancedDuplicateSheet(data.duplicateGroups, options);\n        XLSX.utils.book_append_sheet(workbook, dupSheet, 'Duplicates');\n      }\n\n      // Performance metrics sheet\n      if (options.includePerformanceMetrics) {\n        this.updateProgress(exportId, 86, 'Adding performance metrics...');\n        const perfSheet = this.createPerformanceMetricsSheet(data, options);\n        XLSX.utils.book_append_sheet(workbook, perfSheet, 'Performance');\n      }\n\n      this.updateProgress(exportId, 88, 'Generating Excel file...');\n\n      // Generate file with enhanced options\n      const writeOptions = {\n        bookType: 'xlsx',\n        type: 'array',\n        compression: options.enableCompression,\n        cellStyles: true\n      };\n      \n      console.log('\uD83D\uDCCA STREAMING XLSX GENERATION:', {\n        compression: writeOptions.compression,\n        worksheetCount: workbook.SheetNames.length,\n        totalItems: items.length\n      });\n      \n      const excelBuffer = XLSX.write(workbook, writeOptions);\n      console.log(`\u2705 STREAMING EXPORT: Excel file generated successfully (${this.formatBytes(excelBuffer.byteLength)})`);\n\n      this.updateProgress(exportId, 95, 'Finalizing streaming export...');\n\n      const finalFilename = this.ensureExtension(filename || 'export', 'xlsx');\n\n      return {\n        data: excelBuffer,\n        filename: finalFilename,\n        size: excelBuffer.byteLength,\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      };\n\n    } catch (error) {\n      console.error('\u274C Streaming Excel export failed:', error);\n      throw new Error(`Streaming Excel export failed: ${error.message}`);\n    }\n  }\n\n  // Enhanced CSV export with Papa Parse integration and streaming for large datasets\n  async exportToCSVWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 5, 'Initializing CSV export...');\n\n      // Enhanced Diagnostics: Papa Parse Library Loading\n      if (typeof globalThis.Papa === 'undefined') {\n        console.warn('\u26A0\uFE0F FEATURE DIAGNOSTIC: Papa Parse library not available - using fallback CSV processing');\n        console.log('\uD83D\uDD04 FALLBACK DIAGNOSTIC: Using legacy CSV export methods for compatibility');\n        return await this.exportToCSVLegacy(data, filename, options, exportId);\n      }\n\n      const Papa = globalThis.Papa;\n      \n      // Verify Papa Parse functionality\n      if (!Papa.unparse || !Papa.parse) {\n        console.warn('\u26A0\uFE0F FEATURE DIAGNOSTIC: Papa Parse library incomplete - using fallback CSV processing');\n        console.log('\uD83D\uDD04 FALLBACK DIAGNOSTIC: Papa Parse missing required methods, falling back');\n        return await this.exportToCSVLegacy(data, filename, options, exportId);\n      }\n\n      console.log('\u2705 FEATURE DIAGNOSTIC: Papa Parse library successfully loaded and verified');\n      console.log('\uD83D\uDE80 ENHANCED FEATURE: Papa Parse CSV processing enabled');\n\n      const items = data.items || [];\n      const useStreaming = items.length >= options.streamingThreshold;\n\n      // Enhanced Diagnostics: CSV Export Strategy with Papa Parse\n      if (useStreaming) {\n        console.log(`\uD83D\uDCCA FEATURE DIAGNOSTIC: Large dataset (${items.length} items) - using Papa Parse streaming CSV export`);\n        console.log('\uD83D\uDE80 ENHANCED FEATURE: Papa Parse memory-optimized streaming CSV processing enabled');\n        return await this.exportToCSVStreamingPapa(data, filename, options, exportId);\n      } else {\n        console.log(`\uD83D\uDCCB FEATURE DIAGNOSTIC: Standard dataset (${items.length} items) - using Papa Parse standard CSV export`);\n        console.log('\uD83D\uDCC4 ENHANCED FEATURE: Papa Parse in-memory CSV processing used');\n        return await this.exportToCSVStandardPapa(data, filename, options, exportId);\n      }\n\n    } catch (error) {\n      console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: Papa Parse CSV export failed:', error.message);\n      console.log('\uD83D\uDD04 FALLBACK DIAGNOSTIC: Attempting fallback to legacy CSV export');\n      \n      try {\n        return await this.exportToCSVLegacy(data, filename, options, exportId);\n      } catch (fallbackError) {\n        console.error('\u274C CRITICAL: Both Papa Parse and legacy CSV export failed:', fallbackError.message);\n        throw new Error(`CSV export failed: ${error.message}. Fallback also failed: ${fallbackError.message}`);\n      }\n    }\n  }\n\n  // Papa Parse enhanced CSV export for standard datasets\n  async exportToCSVStandardPapa(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 10, 'Preparing data for Papa Parse...');\n\n      const Papa = globalThis.Papa;\n      const items = data.items || [];\n\n      // Prepare data for Papa Parse\n      this.updateProgress(exportId, 20, 'Converting data to Papa Parse format...');\n      \n      const csvData = [];\n      \n      // Add headers if needed\n      if (items.length > 0) {\n        const headers = this.generateCSVHeaders(items, options);\n        \n        // Convert items to objects for Papa Parse\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          const rowObject = {};\n          \n          headers.forEach((header, index) => {\n            const cellData = this.getItemValue(item, header, options);\n            rowObject[header] = cellData;\n          });\n          \n          csvData.push(rowObject);\n          \n          // Update progress periodically\n          if (i % 100 === 0) {\n            this.updateProgress(exportId, 20 + (i / items.length) * 50, \n              `Processing item ${i + 1}/${items.length}...`);\n          }\n        }\n      }\n\n      this.updateProgress(exportId, 75, 'Generating CSV with Papa Parse...');\n\n      // Use Papa Parse to generate CSV\n      const csvContent = Papa.unparse(csvData, {\n        header: true,\n        delimiter: options.delimiter || ',',\n        newline: '\\r\\n',\n        skipEmptyLines: options.skipEmptyLines !== false,\n        quotes: options.forceQuotes || false,\n        quoteChar: '\"',\n        escapeChar: '\"'\n      });\n\n      this.updateProgress(exportId, 85, 'Adding summary information...');\n\n      // Add summary information if requested\n      let finalCsvContent = csvContent;\n      if (options.includeSummary && data.summary) {\n        finalCsvContent += '\\n\\nSUMMARY\\n';\n        Object.entries(data.summary).forEach(([key, value]) => {\n          finalCsvContent += `${Papa.unparse([[key, value]])}\\n`;\n        });\n      }\n\n      this.updateProgress(exportId, 90, 'Finalizing Papa Parse CSV export...');\n\n      const csvBuffer = new TextEncoder().encode(finalCsvContent);\n      const finalFilename = this.ensureExtension(filename || 'export', 'csv');\n\n      console.log(`\u2705 FEATURE DIAGNOSTIC: Papa Parse CSV generated successfully (${this.formatBytes(csvBuffer.byteLength)})`);\n\n      return {\n        data: csvBuffer,\n        filename: finalFilename,\n        size: csvBuffer.byteLength,\n        mimeType: 'text/csv'\n      };\n\n    } catch (error) {\n      console.error('\u274C Papa Parse standard CSV export failed:', error);\n      throw new Error(`Papa Parse CSV export failed: ${error.message}`);\n    }\n  }\n\n  // Papa Parse enhanced streaming CSV export for large datasets\n  async exportToCSVStreamingPapa(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 10, 'Starting Papa Parse streaming CSV export...');\n\n      const Papa = globalThis.Papa;\n      const items = data.items || [];\n      const chunks = [];\n\n      // Process headers\n      this.updateProgress(exportId, 15, 'Processing headers...');\n      const headers = this.generateCSVHeaders(items, options);\n      \n      // Add header row using Papa Parse\n      const headerRow = Papa.unparse([headers], {\n        header: false,\n        delimiter: options.delimiter || ',',\n        newline: '',\n        quotes: options.forceQuotes || false\n      });\n      chunks.push(headerRow + '\\n');\n\n      this.updateProgress(exportId, 20, 'Processing data in batches with Papa Parse...');\n\n      // Process in batches to manage memory with Papa Parse\n      const batchSize = Math.min(options.batchSize, 200);\n      const totalBatches = Math.ceil(items.length / batchSize);\n\n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const batchNumber = Math.floor(i / batchSize) + 1;\n        \n        this.updateProgress(exportId, \n          20 + (batchNumber / totalBatches) * 60, \n          `Papa Parse processing batch ${batchNumber}/${totalBatches} (${batch.length} items)...`);\n\n        // Convert batch to objects and process with Papa Parse\n        const batchData = [];\n        for (const item of batch) {\n          // Check for cancellation and pause/resume\n          await this.checkExportStatus(exportId);\n          \n          const rowData = [];\n          headers.forEach(header => {\n            const cellData = this.getItemValue(item, header, options);\n            rowData.push(cellData);\n          });\n          batchData.push(rowData);\n        }\n\n        // Use Papa Parse for this batch\n        const batchCsv = Papa.unparse(batchData, {\n          header: false,\n          delimiter: options.delimiter || ',',\n          newline: '\\n',\n          quotes: options.forceQuotes || false,\n          skipEmptyLines: options.skipEmptyLines !== false\n        });\n\n        chunks.push(batchCsv + '\\n');\n\n        // Memory management - force garbage collection periodically\n        if (batchNumber % 5 === 0) {\n          await this.performMemoryCleanup();\n        }\n\n        // Allow other tasks to run\n        await this.delay(1);\n      }\n\n      this.updateProgress(exportId, 85, 'Adding summary information...');\n\n      // Add summary information if requested\n      if (options.includeSummary && data.summary) {\n        chunks.push('\\n'); // Empty line\n        chunks.push('SUMMARY\\n');\n\n        Object.entries(data.summary).forEach(([key, value]) => {\n          const summaryRow = Papa.unparse([[key, value]], {\n            header: false,\n            delimiter: options.delimiter || ',',\n            newline: '',\n            quotes: options.forceQuotes || false\n          });\n          chunks.push(summaryRow + '\\n');\n        });\n      }\n\n      this.updateProgress(exportId, 90, 'Finalizing Papa Parse streaming CSV export...');\n\n      // Join all chunks\n      const csvContent = chunks.join('');\n      const csvBuffer = new TextEncoder().encode(csvContent);\n      const finalFilename = this.ensureExtension(filename || 'export', 'csv');\n\n      console.log(`\u2705 FEATURE DIAGNOSTIC: Papa Parse streaming CSV generated successfully (${this.formatBytes(csvBuffer.byteLength)})`);\n\n      return {\n        data: csvBuffer,\n        filename: finalFilename,\n        size: csvBuffer.byteLength,\n        mimeType: 'text/csv'\n      };\n\n    } catch (error) {\n      console.error('\u274C Papa Parse streaming CSV export failed:', error);\n      throw new Error(`Papa Parse streaming CSV export failed: ${error.message}`);\n    }\n  }\n\n  // Legacy CSV export methods (fallback when Papa Parse is not available)\n  async exportToCSVLegacy(data, filename, options, exportId) {\n    try {\n      const items = data.items || [];\n      const useStreaming = items.length >= options.streamingThreshold;\n\n      console.log(`\uD83D\uDD04 FALLBACK DIAGNOSTIC: Using legacy CSV export (streaming: ${useStreaming})`);\n\n      if (useStreaming) {\n        return await this.exportToCSVStreamingLegacy(data, filename, options, exportId);\n      } else {\n        return await this.exportToCSVStandardLegacy(data, filename, options, exportId);\n      }\n    } catch (error) {\n      console.error('\u274C Legacy CSV export failed:', error);\n      throw new Error(`Legacy CSV export failed: ${error.message}`);\n    }\n  }\n\n  // Legacy streaming CSV export for large datasets\n  async exportToCSVStreamingLegacy(data, filename, options, exportId) {\n    this.updateProgress(exportId, 10, 'Starting streaming CSV export...');\n\n    const items = data.items || [];\n    const chunks = [];\n    \n    // Headers\n    const headers = this.generateCSVHeaders(items, options);\n    chunks.push(headers.join(',') + '\\n');\n\n    this.updateProgress(exportId, 20, 'Processing data in batches...');\n\n    // Process in batches to manage memory\n    const batchSize = Math.min(options.batchSize, 200); // Smaller batches for memory efficiency\n    const totalBatches = Math.ceil(items.length / batchSize);\n\n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      const batchNumber = Math.floor(i / batchSize) + 1;\n      \n      this.updateProgress(exportId, \n        20 + (batchNumber / totalBatches) * 60, \n        `Processing batch ${batchNumber}/${totalBatches} (${batch.length} items)...`);\n\n      // Process batch with cancellation check\n      for (const item of batch) {\n        // Check for cancellation and pause/resume\n        await this.checkExportStatus(exportId);\n        \n        const row = this.itemToCSVRow(item, headers, options);\n        chunks.push(row.join(',') + '\\n');\n      }\n\n      // Memory management - force garbage collection periodically\n      if (batchNumber % 5 === 0) {\n        await this.performMemoryCleanup();\n      }\n\n      // Allow other tasks to run\n      await this.delay(1);\n    }\n\n    this.updateProgress(exportId, 85, 'Adding summary information...');\n\n    // Add summary information at the end if requested\n    if (options.includeSummary && data.summary) {\n      chunks.push('\\n'); // Empty line\n      chunks.push('SUMMARY\\n');\n\n      Object.entries(data.summary).forEach(([key, value]) => {\n        chunks.push(`${this.escapeCSV(key)},${this.escapeCSV(value)}\\n`);\n      });\n    }\n\n    this.updateProgress(exportId, 90, 'Finalizing CSV file...');\n\n    // Join all chunks\n    const csvContent = chunks.join('');\n    const csvBuffer = new TextEncoder().encode(csvContent);\n    const finalFilename = this.ensureExtension(filename || 'export', 'csv');\n\n    return {\n      data: csvBuffer,\n      filename: finalFilename,\n      size: csvBuffer.byteLength,\n      mimeType: 'text/csv'\n    };\n  }\n\n  // Legacy standard CSV export for smaller datasets\n  async exportToCSVStandardLegacy(data, filename, options, exportId) {\n    this.updateProgress(exportId, 10, 'Processing CSV data...');\n\n    const rows = [];\n    const items = data.items || [];\n\n    // Headers\n    const headers = this.generateCSVHeaders(items, options);\n    rows.push(headers.join(','));\n\n    this.updateProgress(exportId, 20, `Processing ${items.length} items...`);\n\n    // Data rows with progress updates\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const row = this.itemToCSVRow(item, headers, options);\n      rows.push(row.join(','));\n\n      // Update progress periodically\n      if (i % 50 === 0) {\n        this.updateProgress(exportId, 20 + (i / items.length) * 60, \n          `Processing item ${i + 1}/${items.length}...`);\n      }\n    }\n\n    this.updateProgress(exportId, 85, 'Adding summary information...');\n\n    // Add summary information at the end if requested\n    if (options.includeSummary && data.summary) {\n      rows.push(''); // Empty line\n      rows.push('SUMMARY');\n\n      Object.entries(data.summary).forEach(([key, value]) => {\n        rows.push(`${this.escapeCSV(key)},${this.escapeCSV(value)}`);\n      });\n    }\n\n    this.updateProgress(exportId, 90, 'Finalizing CSV file...');\n\n    const csvContent = rows.join('\\n');\n    const csvBuffer = new TextEncoder().encode(csvContent);\n    const finalFilename = this.ensureExtension(filename || 'export', 'csv');\n\n    return {\n      data: csvBuffer,\n      filename: finalFilename,\n      size: csvBuffer.byteLength,\n      mimeType: 'text/csv'\n    };\n  }\n\n  // Enhanced JSON export with progress tracking\n  async exportToJSONWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 10, 'Preparing JSON data...');\n\n      const exportData = {\n        metadata: {\n          exportDate: new Date().toISOString(),\n          version: '2.0',\n          format: 'StepTwo Gallery Scraper Export - Enterprise Edition',\n          url: data.sourceUrl || 'unknown',\n          userAgent: navigator.userAgent,\n          exportId: exportId,\n          processingMode: data.items?.length >= options.streamingThreshold ? 'streaming' : 'standard'\n        },\n        summary: data.summary || {},\n        items: data.items || [],\n        statistics: data.statistics || {},\n        errors: data.errors || [],\n        duplicateGroups: data.duplicateGroups || [],\n        extractionMethods: data.extractionMethods || [],\n        processingLog: data.processingLog || [],\n        performance: {\n          exportStats: this.exportStats,\n          memoryUsage: this.getMemoryUsage(),\n          timestamp: Date.now()\n        }\n      };\n\n      this.updateProgress(exportId, 30, 'Processing export options...');\n\n      // Remove empty arrays if not needed\n      if (!options.includeEmptyArrays) {\n        Object.keys(exportData).forEach(key => {\n          if (Array.isArray(exportData[key]) && exportData[key].length === 0) {\n            delete exportData[key];\n          }\n        });\n      }\n\n      this.updateProgress(exportId, 50, 'Serializing JSON data...');\n\n      const jsonString = JSON.stringify(exportData, null, options.prettify ? 2 : 0);\n\n      this.updateProgress(exportId, 70, 'Processing compression...');\n\n      let finalData;\n      if (options.enableCompression && jsonString.length > 10000) {\n        // Use compression for large files\n        this.updateProgress(exportId, 80, 'Compressing large JSON file...');\n        finalData = await this.compressString(jsonString);\n      } else {\n        finalData = new TextEncoder().encode(jsonString);\n      }\n\n      this.updateProgress(exportId, 90, 'Finalizing JSON export...');\n\n      const finalFilename = this.ensureExtension(filename || 'export', 'json');\n\n      return {\n        data: finalData,\n        filename: finalFilename,\n        size: finalData.byteLength,\n        mimeType: 'application/json'\n      };\n\n    } catch (error) {\n      throw new Error(`JSON export failed: ${error.message}`);\n    }\n  }\n\n  // Enhanced HTML export with progress tracking\n  async exportToHTMLWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 10, 'Generating HTML report...');\n\n      const html = await this.generateEnhancedHTMLReport(data, options, exportId);\n      \n      this.updateProgress(exportId, 80, 'Encoding HTML content...');\n\n      const htmlBuffer = new TextEncoder().encode(html);\n      const finalFilename = this.ensureExtension(filename || 'export', 'html');\n\n      this.updateProgress(exportId, 90, 'Finalizing HTML export...');\n\n      return {\n        data: htmlBuffer,\n        filename: finalFilename,\n        size: htmlBuffer.byteLength,\n        mimeType: 'text/html'\n      };\n\n    } catch (error) {\n      throw new Error(`HTML export failed: ${error.message}`);\n    }\n  }\n\n  // Enhanced XML export with progress tracking\n  async exportToXMLWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 10, 'Generating XML structure...');\n\n      const xml = await this.generateEnhancedXMLContent(data, options, exportId);\n      \n      this.updateProgress(exportId, 80, 'Encoding XML content...');\n\n      const xmlBuffer = new TextEncoder().encode(xml);\n      const finalFilename = this.ensureExtension(filename || 'export', 'xml');\n\n      this.updateProgress(exportId, 90, 'Finalizing XML export...');\n\n      return {\n        data: xmlBuffer,\n        filename: finalFilename,\n        size: xmlBuffer.byteLength,\n        mimeType: 'application/xml'\n      };\n\n    } catch (error) {\n      throw new Error(`XML export failed: ${error.message}`);\n    }\n  }\n\n  // Helper method to extract item values for Papa Parse CSV processing\n  getItemValue(item, header, options = {}) {\n    try {\n      // Handle different item structures for CSV export\n      switch (header.toLowerCase()) {\n        case 'filename':\n        case 'name':\n          return item.filename || item.name || item.title || 'unknown';\n          \n        case 'url':\n        case 'src':\n          return item.url || item.src || item.originalUrl || '';\n          \n        case 'size':\n          return item.size ? this.formatBytes(item.size) : '';\n          \n        case 'width':\n          return item.width || item.metadata?.width || '';\n          \n        case 'height':\n          return item.height || item.metadata?.height || '';\n          \n        case 'dimensions':\n          if (item.width && item.height) {\n            return `${item.width}x${item.height}`;\n          }\n          return '';\n          \n        case 'alt':\n        case 'alt_text':\n          return item.alt || item.altText || '';\n          \n        case 'description':\n          return item.description || item.caption || '';\n          \n        case 'download_status':\n        case 'status':\n          return item.status || item.downloadStatus || 'pending';\n          \n        case 'error':\n        case 'error_message':\n          return item.error || item.errorMessage || '';\n          \n        case 'index':\n          return item.index !== undefined ? item.index.toString() : '';\n          \n        case 'timestamp':\n        case 'date':\n          if (item.timestamp) {\n            return new Date(item.timestamp).toISOString();\n          }\n          return '';\n          \n        case 'type':\n        case 'file_type':\n          if (item.url || item.src) {\n            const url = item.url || item.src;\n            const extension = url.split('.').pop()?.toLowerCase();\n            return extension || '';\n          }\n          return '';\n          \n        default:\n          // Try direct property access first\n          if (item[header] !== undefined) {\n            return String(item[header]);\n          }\n          \n          // Try nested metadata access\n          if (item.metadata && item.metadata[header] !== undefined) {\n            return String(item.metadata[header]);\n          }\n          \n          // Try case-insensitive property search\n          const propertyKey = Object.keys(item).find(key => \n            key.toLowerCase() === header.toLowerCase()\n          );\n          \n          if (propertyKey) {\n            return String(item[propertyKey]);\n          }\n          \n          return '';\n      }\n    } catch (error) {\n      console.warn(`\u26A0\uFE0F Error extracting value for header \"${header}\":`, error);\n      return '';\n    }\n  }\n\n  // Enhanced CSV export specifically for tabular data from table detection\n  async exportTabularDataToCSV(tabularData, filename, options = {}, exportId = null) {\n    try {\n      if (!exportId) exportId = this.generateExportId();\n      this.updateProgress(exportId, 5, 'Processing tabular data...');\n\n      // Extract table data from the input\n      let tableRows = [];\n      let headers = [];\n\n      if (tabularData.tableData && tabularData.tableData.rows) {\n        // Direct table data structure\n        const data = tabularData.tableData;\n        headers = data.headers || [];\n        \n        // If no explicit headers, use first row\n        if (headers.length === 0 && data.rows.length > 0) {\n          headers = data.rows[0].cells.map(cell => cell.text || 'Column');\n          tableRows = data.rows.slice(1);\n        } else {\n          tableRows = data.dataRows || data.rows || [];\n        }\n      } else if (Array.isArray(tabularData)) {\n        // Array of table data objects\n        tabularData.forEach(item => {\n          if (item.metadata && item.metadata.tableData) {\n            const tData = item.metadata.tableData;\n            if (headers.length === 0 && tData.headers) {\n              headers = tData.headers;\n            }\n            if (tData.dataRows) {\n              tableRows.push(...tData.dataRows);\n            }\n          }\n        });\n      }\n\n      this.updateProgress(exportId, 20, 'Building CSV structure...');\n\n      // Convert to CSV format\n      const csvRows = [];\n      \n      // Add headers\n      if (headers.length > 0) {\n        csvRows.push(headers.map(h => this.escapeCSV(h.toString())).join(','));\n      }\n\n      // Add data rows  \n      tableRows.forEach((row, index) => {\n        let rowData = [];\n        if (row.cells) {\n          // Row with cells structure\n          rowData = row.cells.map(cell => this.escapeCSV((cell.text || '').toString()));\n        } else if (Array.isArray(row)) {\n          // Simple array structure\n          rowData = row.map(cell => this.escapeCSV((cell || '').toString()));\n        } else {\n          // Object structure\n          rowData = Object.values(row).map(val => this.escapeCSV((val || '').toString()));\n        }\n        csvRows.push(rowData.join(','));\n\n        if (index % 50 === 0) {\n          this.updateProgress(exportId, 20 + (index / tableRows.length) * 60, \n            `Processing row ${index + 1}/${tableRows.length}...`);\n        }\n      });\n\n      this.updateProgress(exportId, 85, 'Adding metadata...');\n\n      // Add metadata section if requested\n      if (options.includeMetadata && tabularData.metadata) {\n        csvRows.push(''); // Empty line\n        csvRows.push('METADATA');\n        \n        const metadata = tabularData.metadata;\n        csvRows.push(`Source,${this.escapeCSV(metadata.selector || 'Unknown')}`);\n        csvRows.push(`Confidence,${(metadata.confidence || 0).toFixed(2)}`);\n        csvRows.push(`Children Count,${metadata.childrenCount || 0}`);\n        csvRows.push(`Score,${metadata.score || 0}`);\n        csvRows.push(`Pattern Strength,${(metadata.patternStrength || 0).toFixed(2)}`);\n        csvRows.push(`Extracted At,${new Date(metadata.extractedAt || Date.now()).toISOString()}`);\n        \n        if (metadata.goodClasses && metadata.goodClasses.length > 0) {\n          csvRows.push(`Good Classes,\"${metadata.goodClasses.join(', ')}\"`);\n        }\n      }\n\n      this.updateProgress(exportId, 95, 'Finalizing CSV...');\n\n      const csvContent = csvRows.join('\\n');\n      const csvBuffer = new TextEncoder().encode(csvContent);\n      const finalFilename = this.ensureExtension(filename || 'table-data', 'csv');\n\n      this.updateProgress(exportId, 100, 'Export complete!');\n\n      return {\n        data: csvBuffer,\n        filename: finalFilename,\n        size: csvBuffer.byteLength,\n        mimeType: 'text/csv',\n        rowCount: tableRows.length,\n        columnCount: headers.length\n      };\n\n    } catch (error) {\n      console.error('\u274C Tabular CSV export failed:', error);\n      throw new Error(`Tabular CSV export failed: ${error.message}`);\n    }\n  }\n\n  // Enhanced XLSX export specifically for tabular data \n  async exportTabularDataToXLSX(tabularData, filename, options = {}, exportId = null) {\n    try {\n      if (!exportId) exportId = this.generateExportId();\n      this.updateProgress(exportId, 5, 'Processing tabular data for XLSX...');\n\n      if (typeof globalThis.XLSX === 'undefined') {\n        throw new Error('XLSX library not available');\n      }\n\n      // Extract and structure data similar to CSV export\n      let tableRows = [];\n      let headers = [];\n\n      if (tabularData.tableData && tabularData.tableData.rows) {\n        const data = tabularData.tableData;\n        headers = data.headers || [];\n        \n        if (headers.length === 0 && data.rows.length > 0) {\n          headers = data.rows[0].cells.map(cell => cell.text || 'Column');\n          tableRows = data.rows.slice(1);\n        } else {\n          tableRows = data.dataRows || data.rows || [];\n        }\n      } else if (Array.isArray(tabularData)) {\n        tabularData.forEach(item => {\n          if (item.metadata && item.metadata.tableData) {\n            const tData = item.metadata.tableData;\n            if (headers.length === 0 && tData.headers) {\n              headers = tData.headers;\n            }\n            if (tData.dataRows) {\n              tableRows.push(...tData.dataRows);\n            }\n          }\n        });\n      }\n\n      this.updateProgress(exportId, 30, 'Building worksheet...');\n\n      // Create workbook and worksheet\n      const workbook = globalThis.XLSX.utils.book_new();\n      const worksheetData = [];\n\n      // Add headers\n      if (headers.length > 0) {\n        worksheetData.push(headers);\n      }\n\n      // Add data rows\n      tableRows.forEach((row, index) => {\n        let rowData = [];\n        if (row.cells) {\n          rowData = row.cells.map(cell => cell.text || '');\n        } else if (Array.isArray(row)) {\n          rowData = row;\n        } else {\n          rowData = Object.values(row);\n        }\n        worksheetData.push(rowData);\n\n        if (index % 100 === 0) {\n          this.updateProgress(exportId, 30 + (index / tableRows.length) * 50, \n            `Processing row ${index + 1}/${tableRows.length}...`);\n        }\n      });\n\n      // Create worksheet\n      const worksheet = globalThis.XLSX.utils.aoa_to_sheet(worksheetData);\n      \n      // Add metadata sheet if requested\n      if (options.includeMetadata && tabularData.metadata) {\n        this.updateProgress(exportId, 85, 'Adding metadata sheet...');\n        \n        const metadataData = [\n          ['Property', 'Value'],\n          ['Source', tabularData.metadata.selector || 'Unknown'],\n          ['Confidence', (tabularData.metadata.confidence || 0).toFixed(2)],\n          ['Children Count', tabularData.metadata.childrenCount || 0],\n          ['Score', tabularData.metadata.score || 0],\n          ['Pattern Strength', (tabularData.metadata.patternStrength || 0).toFixed(2)],\n          ['Extracted At', new Date(tabularData.metadata.extractedAt || Date.now()).toISOString()]\n        ];\n        \n        if (tabularData.metadata.goodClasses && tabularData.metadata.goodClasses.length > 0) {\n          metadataData.push(['Good Classes', tabularData.metadata.goodClasses.join(', ')]);\n        }\n        \n        const metadataSheet = globalThis.XLSX.utils.aoa_to_sheet(metadataData);\n        globalThis.XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Metadata');\n      }\n\n      globalThis.XLSX.utils.book_append_sheet(workbook, worksheet, 'Table Data');\n\n      this.updateProgress(exportId, 95, 'Generating XLSX file...');\n\n      // Generate file\n      const xlsxData = globalThis.XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n      const finalFilename = this.ensureExtension(filename || 'table-data', 'xlsx');\n\n      this.updateProgress(exportId, 100, 'Export complete!');\n\n      return {\n        data: xlsxData,\n        filename: finalFilename,\n        size: xlsxData.byteLength,\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        rowCount: tableRows.length,\n        columnCount: headers.length\n      };\n\n    } catch (error) {\n      console.error('\u274C Tabular XLSX export failed:', error);\n      throw new Error(`Tabular XLSX export failed: ${error.message}`);\n    }\n  }\n\n  // Enhanced ZIP export with progress tracking and advanced bundling capabilities\n  async exportToZipWithProgress(data, filename, options, exportId) {\n    try {\n      this.updateProgress(exportId, 5, 'Initializing advanced ZIP archive...');\n\n      // Enhanced Diagnostics: JSZip Library Loading\n      if (typeof globalThis.JSZip === 'undefined') {\n        console.error('\uD83D\uDCCA FEATURE DIAGNOSTIC: JSZip Export Failed - Library not loaded');\n        console.warn('\uD83D\uDD04 FALLBACK DIAGNOSTIC: ZIP export unavailable, use individual file exports');\n        throw new Error('JSZip library not available');\n      }\n\n      const JSZip = globalThis.JSZip;\n      const zip = new JSZip();\n      \n      // Enhanced Diagnostics: JSZip Success\n      console.log('\u2705 FEATURE DIAGNOSTIC: JSZip Library successfully loaded');\n      console.log('\uD83D\uDCCA ENHANCED FEATURE: Advanced ZIP archive creation enabled');\n\n      // Enhanced ZIP configuration with enterprise features\n      const zipConfig = {\n        includeFormats: options.includeFormats || ['json', 'csv', 'html'],\n        includeXLSX: options.includeXLSX !== false,\n        archiveStructure: options.archiveStructure || 'organized', // 'organized', 'flat', 'custom'\n        compressionLevel: options.compressionLevel || 6,\n        maxImagesPerFolder: options.maxImagesPerFolder || 1000,\n        organizeByConfidence: options.organizeByConfidence !== false,\n        createImageIndex: options.createImageIndex !== false,\n        includeManifest: options.includeManifest !== false,\n        customFolders: options.customFolders || {},\n        ...options\n      };\n      \n      // Enhanced Diagnostics: Archive Structure Choices\n      console.log('\uD83D\uDDC2\uFE0F ARCHIVE STRUCTURE DIAGNOSTIC:', {\n        structure: zipConfig.archiveStructure,\n        compression: zipConfig.compressionLevel,\n        organizeByConfidence: zipConfig.organizeByConfidence,\n        includeFormats: zipConfig.includeFormats,\n        includeXLSX: zipConfig.includeXLSX\n      });\n      console.log(`\uD83D\uDCCA ENHANCED FEATURE: ${zipConfig.archiveStructure} archive structure with compression level ${zipConfig.compressionLevel}`);\n\n      // Create organized folder structure for enterprise archives\n      const folders = this.createArchiveFolders(zip, zipConfig);\n\n      this.updateProgress(exportId, 10, 'Adding core data files...');\n\n      // Add main data files with organized structure\n      if (zipConfig.includeFormats.includes('json')) {\n        const jsonData = await this.exportToJSONWithProgress(data, 'export-data.json', options, `${exportId}_json`);\n        folders.data.file('export-data.json', jsonData.data);\n      }\n\n      this.updateProgress(exportId, 20, 'Adding CSV exports...');\n\n      if (zipConfig.includeFormats.includes('csv')) {\n        const csvData = await this.exportToCSVWithProgress(data, 'items.csv', options, `${exportId}_csv`);\n        folders.data.file('items.csv', csvData.data);\n        \n        // Add specialized CSV exports for different data views\n        if (options.includeSpecializedCSVs) {\n          console.log('\uD83D\uDCCA ENHANCED FEATURE: Including specialized CSV exports for advanced data views');\n          await this.addSpecializedCSVExports(data, folders.data, options, exportId);\n          console.log('\u2705 FEATURE DIAGNOSTIC: Specialized CSV exports successfully added');\n        } else {\n          console.log('\uD83D\uDCCB STANDARD FEATURE: Using standard CSV export only');\n        }\n      }\n\n      this.updateProgress(exportId, 30, 'Adding Excel spreadsheet...');\n\n      if (zipConfig.includeXLSX) {\n        try {\n          const xlsxData = await this.exportToExcelWithProgress(data, 'comprehensive-export.xlsx', options, `${exportId}_xlsx`);\n          folders.data.file('comprehensive-export.xlsx', xlsxData.data);\n        } catch (error) {\n          console.warn('XLSX export failed, continuing without Excel file:', error);\n        }\n      }\n\n      this.updateProgress(exportId, 40, 'Adding HTML report...');\n\n      if (zipConfig.includeFormats.includes('html')) {\n        const htmlData = await this.exportToHTMLWithProgress(data, 'export-report.html', options, `${exportId}_html`);\n        folders.reports.file('export-report.html', htmlData.data);\n      }\n\n      this.updateProgress(exportId, 50, 'Processing advanced metadata...');\n\n      // Add enhanced metadata file with comprehensive information\n      const items = Array.isArray(data.items) ? data.items : [data.items];\n      const metadata = {\n        exportInfo: {\n          timestamp: new Date().toISOString(),\n          exportId: exportId,\n          version: '2.0 Enterprise',\n          format: 'ZIP Archive',\n          totalItems: items.length,\n          options: options,\n          fileStructure: {\n            'data.json': 'Complete item data in JSON format',\n            'items.csv': 'Tabular data with comprehensive metadata',\n            'report.html': 'Human-readable export report',\n            'metadata.json': 'Export metadata and statistics',\n            'images/': options.includeImages ? 'Full-size images' : 'Not included',\n            'thumbnails/': options.includeThumbnails ? 'Thumbnail images' : 'Not included'\n          }\n        },\n        summary: {\n          totalItems: items.length,\n          sourceUrl: data.sourceUrl || (typeof window !== 'undefined' ? window.location?.href : 'Unknown'),\n          pageTitle: data.pageTitle || (typeof document !== 'undefined' ? document.title : 'Unknown'),\n          sourceDomain: this.extractDomainFromItems(items),\n          exportDate: new Date().toLocaleString(),\n          confidenceDistribution: this.calculateConfidenceDistribution(items),\n          discoveryMethods: this.analyzeDiscoveryMethods(items),\n          dataCompleteness: this.calculateDataCompleteness(items)\n        },\n        performance: {\n          exportStats: this.exportStats,\n          memoryUsage: this.getMemoryUsage(),\n          processingTime: Date.now() - this.activeExports.get(exportId)?.startTime,\n          reliability: this.calculateExportReliability()\n        },\n        systemInfo: {\n          userAgent: navigator.userAgent,\n          exportVersion: '2.0 Enterprise',\n          processingMode: items.length >= (options.streamingThreshold || 1000) ? 'streaming' : 'standard'\n        },\n        itemSummary: items.map((item, index) => ({\n          index: index + 1,\n          filename: this.generateFilename(item),\n          url: item.image || item.url,\n          dimensions: `${item.width || 'unknown'}x${item.height || 'unknown'}`,\n          confidence: item.confidence || 'unknown',\n          discoveryMethod: item.discoveryMethod || 'unknown',\n          hasErrors: !!(item.errors && item.errors.length > 0)\n        }))\n      };\n      zip.file('metadata.json', JSON.stringify(metadata, null, 2));\n\n      // Add images and thumbnails if requested and available\n      if (options.includeImages && data.items) {\n        this.updateProgress(exportId, 60, 'Processing full-size images...');\n        \n        const imageFolder = zip.folder('images');\n        const thumbFolder = zip.folder('thumbnails');\n        const maxImages = Math.min(data.items.length, options.maxImages || 200);\n        \n        for (let i = 0; i < maxImages; i++) {\n          const item = data.items[i];\n          if (item.image || item.url) {\n            try {\n              this.updateProgress(exportId, 60 + (i / maxImages) * 20, \n                `Adding image ${i + 1}/${maxImages}...`);\n              \n              // Download full-size image\n              const imageUrl = item.image || item.url;\n              const imageData = await this.downloadImageAsBlob(imageUrl);\n              const filename = this.generateFilename(item) || `image_${i + 1}.${this.getImageExtension(imageUrl)}`;\n              imageFolder.file(filename, imageData);\n              \n              // Also add thumbnail if different from main image\n              if (item.thumbnail && item.thumbnail !== imageUrl) {\n                const thumbData = await this.downloadImageAsBlob(item.thumbnail);\n                const thumbExtension = this.getImageExtension(item.thumbnail);\n                thumbFolder.file(`thumb_${i + 1}.${thumbExtension}`, thumbData);\n              }\n              \n              // Memory management - limit concurrent downloads\n              if (i % 5 === 0) {\n                await this.delay(50); // Small delay to prevent overwhelming\n              }\n            } catch (error) {\n              console.warn(`Failed to add image ${i + 1}:`, error);\n            }\n          }\n        }\n      } else if (options.includeThumbnails && data.items) {\n        this.updateProgress(exportId, 60, 'Processing thumbnails...');\n        \n        const thumbFolder = zip.folder('thumbnails');\n        const maxThumbnails = Math.min(data.items.length, 100);\n        \n        for (let i = 0; i < maxThumbnails; i++) {\n          const item = data.items[i];\n          if (item.thumbnail || item.image) {\n            try {\n              this.updateProgress(exportId, 60 + (i / maxThumbnails) * 20, \n                `Adding thumbnail ${i + 1}/${maxThumbnails}...`);\n              \n              const imageData = await this.downloadImageAsBlob(item.thumbnail || item.image);\n              const extension = this.getImageExtension(item.thumbnail || item.image);\n              thumbFolder.file(`thumb_${i + 1}.${extension}`, imageData);\n              \n              // Memory management - limit concurrent downloads\n              if (i % 10 === 0) {\n                await this.delay(50); // Small delay to prevent overwhelming\n              }\n            } catch (error) {\n              console.warn(`Failed to add thumbnail ${i + 1}:`, error);\n            }\n          }\n        }\n      }\n\n      this.updateProgress(exportId, 85, 'Generating ZIP archive...');\n\n      // Generate ZIP with enhanced compression\n      const zipBlob = await zip.generateAsync({\n        type: 'uint8array',\n        compression: 'DEFLATE',\n        compressionOptions: { \n          level: options.compressionLevel || 6 \n        },\n        comment: `Generated by StepTwo Gallery Scraper v2.0 - Export ID: ${exportId}`\n      });\n\n      this.updateProgress(exportId, 95, 'Finalizing ZIP export...');\n\n      const finalFilename = this.ensureExtension(filename || 'export', 'zip');\n\n      return {\n        data: zipBlob,\n        filename: finalFilename,\n        size: zipBlob.byteLength,\n        mimeType: 'application/zip'\n      };\n\n    } catch (error) {\n      throw new Error(`ZIP export failed: ${error.message}`);\n    }\n  }\n\n  // Create organized folder structure for enterprise ZIP archives\n  createArchiveFolders(zip, zipConfig) {\n    const folders = {};\n    \n    if (zipConfig.archiveStructure === 'organized') {\n      // Organized enterprise structure\n      folders.root = zip;\n      folders.data = zip.folder('data');\n      folders.reports = zip.folder('reports');\n      folders.images = zip.folder('images');\n      folders.metadata = zip.folder('metadata');\n      \n      // Organize images by confidence levels if requested\n      if (zipConfig.organizeByConfidence) {\n        folders.highConfidence = folders.images.folder('high-confidence');\n        folders.mediumConfidence = folders.images.folder('medium-confidence');\n        folders.lowConfidence = folders.images.folder('low-confidence');\n        folders.unknownConfidence = folders.images.folder('unknown-confidence');\n      }\n      \n      // Add custom folders if specified\n      Object.entries(zipConfig.customFolders).forEach(([name, path]) => {\n        folders[name] = zip.folder(path);\n      });\n      \n    } else if (zipConfig.archiveStructure === 'flat') {\n      // Flat structure - everything in root\n      folders.root = zip;\n      folders.data = zip;\n      folders.reports = zip;\n      folders.images = zip;\n      folders.metadata = zip;\n      \n    } else if (zipConfig.archiveStructure === 'custom') {\n      // Custom structure based on user configuration\n      folders.root = zip;\n      folders.data = zipConfig.dataFolder ? zip.folder(zipConfig.dataFolder) : zip;\n      folders.reports = zipConfig.reportsFolder ? zip.folder(zipConfig.reportsFolder) : zip;\n      folders.images = zipConfig.imagesFolder ? zip.folder(zipConfig.imagesFolder) : zip;\n      folders.metadata = zipConfig.metadataFolder ? zip.folder(zipConfig.metadataFolder) : zip;\n    }\n    \n    return folders;\n  }\n\n  // Add specialized CSV exports for different data perspectives\n  async addSpecializedCSVExports(data, dataFolder, options, exportId) {\n    const items = data.items || [];\n    \n    try {\n      // High-confidence items only\n      const highConfidenceItems = items.filter(item => (item.confidence || 0) >= 0.75);\n      if (highConfidenceItems.length > 0) {\n        this.updateProgress(exportId, null, 'Adding high-confidence CSV...');\n        const highConfidenceData = { ...data, items: highConfidenceItems };\n        const csvData = await this.exportToCSVStandard(highConfidenceData, 'high-confidence-items.csv', options, `${exportId}_high_csv`);\n        dataFolder.file('high-confidence-items.csv', csvData.data);\n      }\n      \n      // Summary statistics CSV\n      this.updateProgress(exportId, null, 'Adding summary statistics CSV...');\n      const summaryData = this.generateSummaryStatisticsCSV(data, options);\n      dataFolder.file('summary-statistics.csv', summaryData);\n      \n      // Error log CSV if errors exist\n      if (data.errors && data.errors.length > 0) {\n        this.updateProgress(exportId, null, 'Adding error log CSV...');\n        const errorData = this.generateErrorLogCSV(data.errors, options);\n        dataFolder.file('error-log.csv', errorData);\n      }\n      \n      // Duplicate analysis CSV if duplicates exist\n      if (data.duplicateGroups && data.duplicateGroups.length > 0) {\n        this.updateProgress(exportId, null, 'Adding duplicate analysis CSV...');\n        const duplicateData = this.generateDuplicateAnalysisCSV(data.duplicateGroups, options);\n        dataFolder.file('duplicate-analysis.csv', duplicateData);\n      }\n      \n    } catch (error) {\n      console.warn('Failed to add specialized CSV exports:', error);\n    }\n  }\n\n  // Generate summary statistics as CSV data\n  generateSummaryStatisticsCSV(data, options) {\n    const items = data.items || [];\n    const summary = data.summary || {};\n    \n    const stats = [\n      ['Metric', 'Value', 'Description'],\n      ['Total Items', items.length, 'Total number of extracted items'],\n      ['Successful Extractions', summary.successful || items.length, 'Successfully processed items'],\n      ['Failed Extractions', summary.failed || 0, 'Items that failed processing'],\n      ['Success Rate', `${Math.round(((summary.successful || items.length) / (items.length || 1)) * 100)}%`, 'Percentage of successful extractions'],\n      ['Data Completeness', `${this.calculateDataCompleteness(items)}%`, 'Percentage of items with complete metadata'],\n      ['High Confidence Items', items.filter(item => (item.confidence || 0) >= 0.75).length, 'Items with confidence \u2265 75%'],\n      ['Medium Confidence Items', items.filter(item => (item.confidence || 0) >= 0.5 && (item.confidence || 0) < 0.75).length, 'Items with confidence 50-75%'],\n      ['Low Confidence Items', items.filter(item => (item.confidence || 0) < 0.5).length, 'Items with confidence < 50%'],\n      ['Average Processing Time', summary.averageProcessingTime ? `${summary.averageProcessingTime}ms` : 'N/A', 'Average time per item'],\n      ['Total Processing Time', summary.totalProcessingTime ? `${summary.totalProcessingTime}ms` : 'N/A', 'Total extraction time'],\n      ['Memory Peak Usage', this.formatBytes(this.getMemoryUsage()), 'Maximum memory used'],\n      ['Export Timestamp', new Date().toISOString(), 'When this export was generated']\n    ];\n    \n    const csvContent = stats.map(row => row.map(cell => this.escapeCSV(cell)).join(',')).join('\\n');\n    return new TextEncoder().encode(csvContent);\n  }\n\n  // Generate error log as CSV data\n  generateErrorLogCSV(errors, options) {\n    const csvRows = [\n      ['Error #', 'Type', 'Message', 'Timestamp', 'Severity', 'Recovery Action']\n    ];\n    \n    errors.slice(0, 200).forEach((error, index) => { // Limit to 200 errors\n      csvRows.push([\n        index + 1,\n        this.classifyError(error.message || error),\n        error.message || error,\n        error.timestamp ? new Date(error.timestamp).toISOString() : 'Unknown',\n        error.severity || 'Warning',\n        error.recoveryAction || 'None'\n      ]);\n    });\n    \n    const csvContent = csvRows.map(row => row.map(cell => this.escapeCSV(cell)).join(',')).join('\\n');\n    return new TextEncoder().encode(csvContent);\n  }\n\n  // Generate duplicate analysis as CSV data\n  generateDuplicateAnalysisCSV(duplicateGroups, options) {\n    const csvRows = [\n      ['Group #', 'Original URL', 'Duplicate Count', 'Similarity Score', 'Action Taken', 'Duplicate URLs']\n    ];\n    \n    duplicateGroups.forEach((group, index) => {\n      csvRows.push([\n        index + 1,\n        group.original || '',\n        group.count || 0,\n        group.similarity || 'N/A',\n        group.action || 'Skipped',\n        group.duplicates ? group.duplicates.join('; ') : ''\n      ]);\n    });\n    \n    const csvContent = csvRows.map(row => row.map(cell => this.escapeCSV(cell)).join(',')).join('\\n');\n    return new TextEncoder().encode(csvContent);\n  }\n\n  // Enhanced multi-format bundle export for maximum compatibility\n  async exportMultiFormatBundle(data, filename, formats, options = {}) {\n    const exportId = this.generateExportId();\n    const startTime = Date.now();\n    \n    try {\n      this.updateProgress(exportId, 5, 'Initializing multi-format bundle...');\n      \n      if (typeof globalThis.JSZip === 'undefined') {\n        throw new Error('JSZip library not available for bundle export');\n      }\n      \n      const JSZip = globalThis.JSZip;\n      const zip = new JSZip();\n      \n      // Create enterprise bundle structure\n      const bundleFolder = zip.folder('StepTwo-Export-Bundle');\n      const formatsFolder = bundleFolder.folder('formats');\n      const metadataFolder = bundleFolder.folder('metadata');\n      \n      this.updateProgress(exportId, 10, 'Generating formats...');\n      \n      const exportResults = {};\n      const totalFormats = formats.length;\n      \n      // Export each requested format\n      for (let i = 0; i < formats.length; i++) {\n        const format = formats[i];\n        const progressBase = 10 + (i / totalFormats) * 60;\n        \n        this.updateProgress(exportId, progressBase, `Generating ${format.toUpperCase()} export...`);\n        \n        try {\n          let result;\n          switch (format.toLowerCase()) {\n            case 'xlsx':\n            case 'excel':\n              result = await this.exportToExcelWithProgress(data, `export.xlsx`, options, `${exportId}_${format}`);\n              formatsFolder.file(`export.xlsx`, result.data);\n              break;\n              \n            case 'csv':\n              result = await this.exportToCSVWithProgress(data, `export.csv`, options, `${exportId}_${format}`);\n              formatsFolder.file(`export.csv`, result.data);\n              break;\n              \n            case 'json':\n              result = await this.exportToJSONWithProgress(data, `export.json`, options, `${exportId}_${format}`);\n              formatsFolder.file(`export.json`, result.data);\n              break;\n              \n            case 'html':\n              result = await this.exportToHTMLWithProgress(data, `report.html`, options, `${exportId}_${format}`);\n              formatsFolder.file(`report.html`, result.data);\n              break;\n              \n            case 'xml':\n              result = await this.exportToXMLWithProgress(data, `export.xml`, options, `${exportId}_${format}`);\n              formatsFolder.file(`export.xml`, result.data);\n              break;\n              \n            default:\n              console.warn(`Unsupported format for bundle: ${format}`);\n              continue;\n          }\n          \n          exportResults[format] = {\n            success: true,\n            size: result.size,\n            filename: result.filename\n          };\n          \n        } catch (error) {\n          console.error(`Failed to export ${format}:`, error);\n          exportResults[format] = {\n            success: false,\n            error: error.message\n          };\n        }\n      }\n      \n      this.updateProgress(exportId, 75, 'Adding bundle metadata...');\n      \n      // Create comprehensive bundle manifest\n      const manifest = {\n        bundleInfo: {\n          created: new Date().toISOString(),\n          exportId: exportId,\n          bundleVersion: '1.0',\n          totalItems: data.items?.length || 0,\n          formats: Object.keys(exportResults),\n          source: data.sourceUrl || 'Unknown'\n        },\n        formatResults: exportResults,\n        exportOptions: options,\n        systemInfo: {\n          userAgent: navigator.userAgent,\n          exportSystemVersion: '2.0 Enterprise',\n          jsZipVersion: '3.10.1'\n        }\n      };\n      \n      metadataFolder.file('manifest.json', JSON.stringify(manifest, null, 2));\n      \n      // Add README for the bundle\n      const readme = this.generateBundleReadme(manifest, data);\n      bundleFolder.file('README.txt', readme);\n      \n      this.updateProgress(exportId, 85, 'Compressing bundle...');\n      \n      // Generate the final bundle\n      const bundleBlob = await zip.generateAsync({\n        type: 'uint8array',\n        compression: 'DEFLATE',\n        compressionOptions: { \n          level: options.compressionLevel || 6 \n        },\n        comment: `StepTwo Multi-Format Export Bundle - Generated ${new Date().toISOString()}`\n      });\n      \n      this.updateProgress(exportId, 95, 'Finalizing bundle...');\n      \n      const finalFilename = this.ensureExtension(filename || 'steptwo-export-bundle', 'zip');\n      \n      // Update statistics\n      const exportTime = Date.now() - startTime;\n      this.updateEnhancedStats('bundle', exportTime, bundleBlob.byteLength, data.items?.length || 0, exportId);\n      \n      this.updateProgress(exportId, 100, 'Bundle export complete!');\n      \n      return {\n        success: true,\n        exportId,\n        data: bundleBlob,\n        filename: finalFilename,\n        size: bundleBlob.byteLength,\n        mimeType: 'application/zip',\n        bundleManifest: manifest,\n        exportTime: exportTime,\n        formatsIncluded: Object.keys(exportResults).filter(format => exportResults[format].success)\n      };\n      \n    } catch (error) {\n      console.error('\u274C Multi-format bundle export failed:', error);\n      \n      await this.showNotification('Bundle Export Failed', \n        `\u274C Failed to create multi-format bundle: ${this.getUserFriendlyError(error.message)}`, \n        'error');\n      \n      return {\n        success: false,\n        exportId,\n        error: error.message,\n        exportTime: Date.now() - startTime,\n        userFriendlyError: this.getUserFriendlyError(error.message)\n      };\n    } finally {\n      this.cleanupExport(exportId);\n    }\n  }\n\n  // Generate a helpful README for export bundles\n  generateBundleReadme(manifest, data) {\n    const successfulFormats = Object.entries(manifest.formatResults)\n      .filter(([format, result]) => result.success)\n      .map(([format]) => format.toUpperCase());\n    \n    const failedFormats = Object.entries(manifest.formatResults)\n      .filter(([format, result]) => !result.success)\n      .map(([format]) => format.toUpperCase());\n    \n    return `STEPTWO GALLERY SCRAPER - EXPORT BUNDLE\n=====================================\n\nExport Information:\n- Export ID: ${manifest.bundleInfo.exportId}\n- Created: ${manifest.bundleInfo.created}\n- Total Items: ${manifest.bundleInfo.totalItems}\n- Source: ${manifest.bundleInfo.source}\n\nBundle Contents:\n==============\n\nFORMATS/ Directory:\n${successfulFormats.map(format => `  - export.${format.toLowerCase()} - Complete dataset in ${format} format`).join('\\n')}\n\nMETADATA/ Directory:\n  - manifest.json - Complete export metadata and results\n\nExport Statistics:\n=================\n- Successful Formats: ${successfulFormats.join(', ')}\n${failedFormats.length > 0 ? `- Failed Formats: ${failedFormats.join(', ')}` : ''}\n- Bundle Version: ${manifest.bundleInfo.bundleVersion}\n- Export System: ${manifest.systemInfo.exportSystemVersion}\n\nHow to Use:\n==========\n1. Extract this ZIP file to access all export formats\n2. Choose the format that best suits your needs:\n   - XLSX: Open in Excel, Google Sheets, or LibreOffice Calc\n   - CSV: Import into any spreadsheet or database application\n   - JSON: Use for programming, APIs, or technical analysis\n   - HTML: Open in any web browser for visual report\n   - XML: Use for structured data exchange\n\nFor technical support or questions about this export,\nvisit: https://github.com/johnsonskyrme-sys/steptwo\n\nGenerated by StepTwo Gallery Scraper v2.0 Enterprise Edition\n`;\n  }\n\n  // Enhanced helper methods for creating Excel sheets with better formatting\n  createItemsSheetEnhanced(items, options) {\n    const sheetData = [];\n\n    // Generate headers\n    const headers = this.generateCSVHeaders(items, options);\n    sheetData.push(headers);\n\n    // Data rows with enhanced formatting\n    items.forEach((item, index) => {\n      const row = this.itemToCSVRow({...item, index: index + 1}, headers, options)\n        .map(cell => typeof cell === 'string' && cell.startsWith('\"') && cell.endsWith('\"') ?\n          cell.slice(1, -1).replace(/\"\"/g, '\"') : cell); // Remove CSV escaping for Excel\n      sheetData.push(row);\n    });\n\n    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n    \n    // Add enhanced formatting\n    this.applyExcelFormatting(worksheet, headers);\n    \n    return worksheet;\n  }\n\n  // Batch processing for large datasets in Excel\n  async createItemsSheetBatched(items, options, exportId) {\n    const sheetData = [];\n    const headers = this.generateCSVHeaders(items, options);\n    sheetData.push(headers);\n\n    const batchSize = Math.min(options.batchSize, 200);\n    const totalBatches = Math.ceil(items.length / batchSize);\n\n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      const batchNumber = Math.floor(i / batchSize) + 1;\n      \n      this.updateProgress(exportId, \n        15 + (batchNumber / totalBatches) * 20, \n        `Processing Excel batch ${batchNumber}/${totalBatches}...`);\n\n      // Process batch\n      batch.forEach((item, index) => {\n        const globalIndex = i + index + 1;\n        const row = this.itemToCSVRow({...item, index: globalIndex}, headers, options)\n          .map(cell => typeof cell === 'string' && cell.startsWith('\"') && cell.endsWith('\"') ?\n            cell.slice(1, -1).replace(/\"\"/g, '\"') : cell);\n        sheetData.push(row);\n      });\n\n      // Memory management\n      if (batchNumber % 5 === 0) {\n        await this.performMemoryCleanup();\n      }\n\n      // Allow other tasks to run\n      await this.delay(1);\n    }\n\n    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);\n    this.applyExcelFormatting(worksheet, headers);\n    \n    return worksheet;\n  }\n\n  // Apply enhanced Excel formatting\n  applyExcelFormatting(worksheet, headers) {\n    if (!worksheet['!cols']) {\n      worksheet['!cols'] = [];\n    }\n\n    // Auto-resize columns\n    headers.forEach((header, index) => {\n      const maxLength = Math.max(\n        header.length,\n        20 // Minimum width\n      );\n      worksheet['!cols'][index] = { wch: Math.min(maxLength, 50) }; // Max width 50\n    });\n\n    // Add header formatting\n    if (!worksheet['!merges']) {\n      worksheet['!merges'] = [];\n    }\n\n    return worksheet;\n  }\n\n  // Enhanced summary sheet\n  createEnhancedSummarySheet(summary, _options) {\n    const now = new Date();\n    const sheetData = [\n      ['\uD83D\uDCCA Gallery Scraper Report - Enterprise Edition', ''],\n      ['', ''],\n      ['Export Information', ''],\n      ['Total Items', summary.totalItems || 0],\n      ['Successful Extractions', summary.successful || 0],\n      ['Failed Extractions', summary.failed || 0],\n      ['Duplicate Items', summary.duplicates || 0],\n      ['Success Rate', summary.totalItems ? `${Math.round((summary.successful || 0) / summary.totalItems * 100)}%` : '0%'],\n      ['', ''],\n      ['Performance Metrics', ''],\n      ['Average Processing Time', summary.averageProcessingTime || 0],\n      ['Total Processing Time', summary.totalProcessingTime || 0],\n      ['Items per Second', summary.throughput || 0],\n      ['Memory Peak Usage', this.formatBytes(this.getMemoryUsage())],\n      ['', ''],\n      ['Source Information', ''],\n      ['Source URL', summary.sourceUrl || ''],\n      ['Export Date', now.toISOString()],\n      ['Export Time (Local)', now.toLocaleString()],\n      ['User Agent', navigator.userAgent.substring(0, 100) + '...']\n    ];\n\n    return XLSX.utils.aoa_to_sheet(sheetData);\n  }\n\n  // Enhanced statistics sheet\n  createEnhancedStatsSheet(data, _options) {\n    const sheetData = [\n      ['\uD83D\uDCC8 Advanced Statistics', ''],\n      ['', ''],\n      ['Extraction Methods', 'Count', 'Success Rate']\n    ];\n\n    if (data.extractionMethods) {\n      data.extractionMethods.forEach(method => {\n        const successRate = method.successful && method.count ? \n          `${Math.round(method.successful / method.count * 100)}%` : 'N/A';\n        sheetData.push([method.name, method.count, successRate]);\n      });\n    }\n\n    sheetData.push(['', '', '']);\n    sheetData.push(['Error Analysis', 'Count', 'Percentage']);\n\n    if (data.errorStats) {\n      const totalErrors = Object.values(data.errorStats).reduce((sum, count) => sum + count, 0);\n      Object.entries(data.errorStats).forEach(([type, count]) => {\n        const percentage = totalErrors ? `${Math.round(count / totalErrors * 100)}%` : '0%';\n        sheetData.push([type, count, percentage]);\n      });\n    }\n\n    sheetData.push(['', '', '']);\n    sheetData.push(['Export Performance', 'Value', 'Unit']);\n    sheetData.push(['Total Exports This Session', this.exportStats.totalExports, 'exports']);\n    sheetData.push(['Average Export Time', Math.round(this.exportStats.averageExportTime), 'ms']);\n    sheetData.push(['Total Data Exported', this.formatBytes(this.exportStats.totalDataExported), 'bytes']);\n    sheetData.push(['Recovered Errors', this.exportStats.recoveredErrors, 'errors']);\n\n    return XLSX.utils.aoa_to_sheet(sheetData);\n  }\n\n  // Enhanced error sheet\n  createEnhancedErrorSheet(errors, _options) {\n    const sheetData = [\n      ['\u274C Error Log', 'Timestamp', 'Type', 'Frequency'],\n      ['', '', '', '']\n    ];\n\n    // Group errors by type\n    const errorGroups = {};\n    errors.forEach(error => {\n      const errorStr = String(error);\n      if (!errorGroups[errorStr]) {\n        errorGroups[errorStr] = {\n          message: errorStr,\n          count: 0,\n          firstSeen: Date.now(),\n          lastSeen: Date.now()\n        };\n      }\n      errorGroups[errorStr].count++;\n      errorGroups[errorStr].lastSeen = Date.now();\n    });\n\n    // Add grouped errors to sheet\n    Object.values(errorGroups).forEach(errorGroup => {\n      sheetData.push([\n        errorGroup.message,\n        new Date(errorGroup.lastSeen).toLocaleString(),\n        this.classifyError(errorGroup.message),\n        errorGroup.count\n      ]);\n    });\n\n    return XLSX.utils.aoa_to_sheet(sheetData);\n  }\n\n  // Enhanced duplicate sheet\n  createEnhancedDuplicateSheet(duplicateGroups, _options) {\n    const sheetData = [\n      ['\uD83D\uDD04 Duplicate Analysis', 'Group Size', 'Similarity', 'Action'],\n      ['', '', '', '']\n    ];\n\n    duplicateGroups.forEach((group, index) => {\n      sheetData.push([\n        `Group ${index + 1}`,\n        group.items?.length || 0,\n        group.similarity || 'N/A',\n        group.action || 'Review Required'\n      ]);\n\n      // Add items in the group\n      if (group.items) {\n        group.items.forEach((item, itemIndex) => {\n          sheetData.push([\n            `  Item ${itemIndex + 1}`,\n            item.image || item.url || '',\n            item.text || '',\n            ''\n          ]);\n        });\n      }\n\n      sheetData.push(['', '', '', '']); // Separator\n    });\n\n    return XLSX.utils.aoa_to_sheet(sheetData);\n  }\n\n  // Performance metrics sheet\n  createPerformanceMetricsSheet(data, _options) {\n    const sheetData = [\n      ['\u26A1 Performance Metrics', 'Value', 'Unit', 'Trend'],\n      ['', '', '', ''],\n      ['Processing Performance', '', '', ''],\n      ['Items Processed', data.items?.length || 0, 'items', ''],\n      ['Processing Speed', Math.round((data.items?.length || 0) / ((data.processingTime || 1000) / 1000)), 'items/sec', ''],\n      ['Memory Usage Peak', this.formatBytes(this.getMemoryUsage()), 'bytes', ''],\n      ['Batch Processing', data.items?.length > 500 ? 'Enabled' : 'Disabled', '', ''],\n      ['', '', '', ''],\n      ['Export Statistics', '', '', ''],\n      ['Total Exports', this.exportStats.totalExports, 'exports', ''],\n      ['Average Export Time', Math.round(this.exportStats.averageExportTime), 'ms', ''],\n      ['Error Recovery Rate', this.exportStats.recoveredErrors, 'errors', ''],\n      ['Large Dataset Exports', this.exportStats.largeDatasetExports, 'exports', ''],\n      ['', '', '', ''],\n      ['Quality Metrics', '', '', ''],\n      ['Success Rate', data.summary?.successRate ? `${data.summary.successRate}%` : 'N/A', '%', ''],\n      ['Data Completeness', this.calculateDataCompleteness(data.items), '%', ''],\n      ['Export Reliability', this.calculateExportReliability(), '%', '']\n    ];\n\n    return XLSX.utils.aoa_to_sheet(sheetData);\n  }\n\n  // Enhanced HTML report generation\n  async generateEnhancedHTMLReport(data, options, exportId) {\n    const items = data.items || [];\n    const summary = data.summary || {};\n    const stats = this.exportStats;\n\n    this.updateProgress(exportId, 20, 'Building HTML structure...');\n\n    const reportHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gallery Scraper Report - Enterprise Edition</title>\n    <style>\n        body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n            margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            line-height: 1.6; min-height: 100vh;\n        }\n        .container { \n            max-width: 1400px; margin: 0 auto; background: white; padding: 40px; \n            border-radius: 16px; box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n        }\n        .header { \n            text-align: center; margin-bottom: 40px; padding-bottom: 20px; \n            border-bottom: 3px solid #667eea;\n        }\n        h1 { \n            color: #2563eb; margin: 0 0 10px 0; font-size: 3em; font-weight: 700;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            -webkit-background-clip: text; -webkit-text-fill-color: transparent;\n        }\n        .subtitle { color: #6b7280; font-size: 1.2em; margin: 0; }\n        .export-info { \n            background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0;\n            border-left: 4px solid #667eea;\n        }\n        h2 { \n            color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 15px; \n            margin-top: 50px; font-size: 1.8em; position: relative;\n        }\n        h2::before {\n            content: ''; position: absolute; bottom: -2px; left: 0; width: 60px; height: 2px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        }\n        .summary { \n            display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); \n            gap: 25px; margin: 40px 0;\n        }\n        .stat-card { \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n            color: white; padding: 25px; border-radius: 12px; text-align: center;\n            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3); transition: transform 0.3s;\n        }\n        .stat-card:hover { transform: translateY(-5px); }\n        .stat-number { font-size: 2.5em; font-weight: bold; display: block; margin-bottom: 5px; }\n        .stat-label { opacity: 0.95; font-size: 1.1em; }\n        .performance-grid {\n            display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px; margin: 30px 0;\n        }\n        .performance-card {\n            background: #f8fafc; padding: 20px; border-radius: 8px; border: 1px solid #e5e7eb;\n            text-align: center;\n        }\n        .performance-value { font-size: 1.8em; font-weight: bold; color: #667eea; }\n        .performance-label { color: #6b7280; margin-top: 5px; }\n        .items-grid { \n            display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); \n            gap: 25px; margin-top: 40px;\n        }\n        .item-card { \n            background: white; border: 1px solid #e5e7eb; border-radius: 12px; overflow: hidden; \n            transition: all 0.3s; box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n        }\n        .item-card:hover { \n            transform: translateY(-5px); box-shadow: 0 12px 30px rgba(0,0,0,0.15);\n            border-color: #667eea;\n        }\n        .item-image { \n            width: 100%; height: 220px; background: #f3f4f6; display: flex; \n            align-items: center; justify-content: center; overflow: hidden; position: relative;\n        }\n        .item-image img { max-width: 100%; max-height: 100%; object-fit: contain; }\n        .item-image .no-image { \n            color: #9ca3af; font-size: 3em; opacity: 0.5;\n        }\n        .item-info { padding: 20px; }\n        .item-title { \n            font-weight: 600; margin: 0 0 12px 0; color: #1f2937; font-size: 1.1em;\n            line-height: 1.4;\n        }\n        .item-url { \n            font-size: 0.9em; color: #6b7280; word-break: break-all; margin: 8px 0;\n            background: #f8fafc; padding: 8px; border-radius: 6px;\n        }\n        .item-meta { \n            display: flex; justify-content: space-between; align-items: center; \n            font-size: 0.85em; color: #9ca3af; margin-top: 15px; flex-wrap: wrap; gap: 8px;\n        }\n        .quality-score { \n            display: inline-block; background: #10b981; color: white; \n            padding: 4px 10px; border-radius: 15px; font-weight: 500;\n        }\n        .extraction-method {\n            background: #667eea; color: white; padding: 4px 10px; border-radius: 15px;\n            font-weight: 500;\n        }\n        table { \n            width: 100%; border-collapse: collapse; margin-top: 25px; \n            box-shadow: 0 2px 10px rgba(0,0,0,0.05); border-radius: 8px; overflow: hidden;\n        }\n        th, td { border: none; padding: 15px; text-align: left; }\n        th { \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n            color: white; font-weight: 600;\n        }\n        tr:nth-child(even) { background: #f8fafc; }\n        tr:hover { background: #e0e7ff; }\n        .error-list { \n            background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; \n            padding: 20px; margin: 20px 0;\n        }\n        .error-item { \n            color: #dc2626; margin: 8px 0; padding: 8px; background: white; \n            border-radius: 6px; border-left: 4px solid #dc2626;\n        }\n        .footer { \n            margin-top: 60px; text-align: center; color: #6b7280; font-size: 0.9em;\n            padding-top: 30px; border-top: 1px solid #e5e7eb;\n        }\n        .export-badge {\n            display: inline-block; background: #667eea; color: white; padding: 6px 12px;\n            border-radius: 20px; font-size: 0.8em; margin: 0 5px;\n        }\n        @media print {\n            body { background: white; }\n            .container { box-shadow: none; margin: 0; }\n            .item-card { break-inside: avoid; }\n        }\n        @media (max-width: 768px) {\n            .container { padding: 20px; }\n            .summary { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }\n            .items-grid { grid-template-columns: 1fr; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>\uD83D\uDCCA Gallery Scraper Report</h1>\n            <p class=\"subtitle\">Enterprise Edition - Advanced Analytics & Performance Metrics</p>\n            <div class=\"export-info\">\n                <strong>Export ID:</strong> ${exportId} \u2022 \n                <strong>Generated:</strong> ${new Date().toLocaleString()} \u2022 \n                <span class=\"export-badge\">v2.0</span>\n            </div>\n        </div>\n        \n        <div class=\"summary\">\n            <div class=\"stat-card\">\n                <span class=\"stat-number\">${items.length}</span>\n                <span class=\"stat-label\">Total Items</span>\n            </div>\n            <div class=\"stat-card\">\n                <span class=\"stat-number\">${summary.successful || items.length}</span>\n                <span class=\"stat-label\">Successful</span>\n            </div>\n            <div class=\"stat-card\">\n                <span class=\"stat-number\">${summary.failed || 0}</span>\n                <span class=\"stat-label\">Failed</span>\n            </div>\n            <div class=\"stat-card\">\n                <span class=\"stat-number\">${summary.duplicates || 0}</span>\n                <span class=\"stat-label\">Duplicates</span>\n            </div>\n            <div class=\"stat-card\">\n                <span class=\"stat-number\">${summary.successRate || Math.round((summary.successful || items.length) / (items.length || 1) * 100)}%</span>\n                <span class=\"stat-label\">Success Rate</span>\n            </div>\n        </div>\n\n        <h2>\u26A1 Performance Metrics</h2>\n        <div class=\"performance-grid\">\n            <div class=\"performance-card\">\n                <div class=\"performance-value\">${Math.round(summary.throughput || 0)}</div>\n                <div class=\"performance-label\">Items/Second</div>\n            </div>\n            <div class=\"performance-card\">\n                <div class=\"performance-value\">${this.formatTime(summary.totalProcessingTime || 0)}</div>\n                <div class=\"performance-label\">Processing Time</div>\n            </div>\n            <div class=\"performance-card\">\n                <div class=\"performance-value\">${this.formatBytes(this.getMemoryUsage())}</div>\n                <div class=\"performance-label\">Memory Usage</div>\n            </div>\n            <div class=\"performance-card\">\n                <div class=\"performance-value\">${stats.totalExports}</div>\n                <div class=\"performance-label\">Total Exports</div>\n            </div>\n        </div>\n\n        <h2>\uD83D\uDCCB Export Information</h2>\n        <table>\n            <tr><th>Property</th><th>Value</th></tr>\n            <tr><td><strong>Export Date</strong></td><td>${new Date().toLocaleString()}</td></tr>\n            <tr><td><strong>Source URL</strong></td><td><a href=\"${summary.sourceUrl || 'unknown'}\" target=\"_blank\">${summary.sourceUrl || 'unknown'}</a></td></tr>\n            <tr><td><strong>Processing Mode</strong></td><td>${items.length >= options.streamingThreshold ? 'Streaming (Large Dataset)' : 'Standard'}</td></tr>\n            <tr><td><strong>Total File Size</strong></td><td>${this.formatBytes(stats.totalDataExported)}</td></tr>\n            <tr><td><strong>Average Export Time</strong></td><td>${this.formatTime(stats.averageExportTime)}</td></tr>\n            <tr><td><strong>Error Recovery Rate</strong></td><td>${stats.recoveredErrors} errors recovered</td></tr>\n            <tr><td><strong>User Agent</strong></td><td>${navigator.userAgent.substring(0, 80)}...</td></tr>\n        </table>\n\n        ${data.errors && data.errors.length > 0 ? `\n        <h2>\u274C Errors & Issues</h2>\n        <div class=\"error-list\">\n            ${data.errors.slice(0, 10).map(error => `<div class=\"error-item\">\u2022 ${error}</div>`).join('')}\n            ${data.errors.length > 10 ? `<div class=\"error-item\"><em>... and ${data.errors.length - 10} more errors</em></div>` : ''}\n        </div>\n        ` : ''}\n\n        <h2>\uD83D\uDDBC\uFE0F Extracted Items</h2>\n        <div class=\"items-grid\">\n            ${items.slice(0, 100).map((item, index) => `\n                <div class=\"item-card\">\n                    <div class=\"item-image\">\n                        ${item.thumbnail || item.image ?\n                            `<img src=\"${item.thumbnail || item.image}\" alt=\"Image ${index + 1}\" loading=\"lazy\" onerror=\"this.style.display='none'; this.parentNode.innerHTML='<span class=\\\\\"no-image\\\\\">\uD83D\uDDBC\uFE0F</span>'\">` :\n                            '<span class=\"no-image\">\uD83D\uDDBC\uFE0F</span>'\n                        }\n                    </div>\n                    <div class=\"item-info\">\n                        <div class=\"item-title\">${this.escapeHtml(item.text || `Item ${index + 1}`)}</div>\n                        ${item.image ? `<div class=\"item-url\">\uD83D\uDDBC\uFE0F ${this.escapeHtml(item.image)}</div>` : ''}\n                        ${item.link ? `<div class=\"item-url\">\uD83D\uDD17 <a href=\"${item.link}\" target=\"_blank\">Source Link</a></div>` : ''}\n                        <div class=\"item-meta\">\n                            <span class=\"extraction-method\">${item.extractionMethod || 'standard'}</span>\n                            ${item.enhanced?.qualityScore ? `<span class=\"quality-score\">${item.enhanced.qualityScore}/100</span>` : ''}\n                            ${item.enhanced?.processingTime ? `<span>${item.enhanced.processingTime}ms</span>` : ''}\n                        </div>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n\n        ${items.length > 100 ? `<p style=\"text-align: center; color: #6b7280; font-style: italic; margin: 30px 0;\">Showing first 100 items of ${items.length} total for performance reasons.</p>` : ''}\n        \n        <h2>\uD83D\uDCC8 Advanced Statistics</h2>\n        <table>\n            <tr><th>Metric</th><th>Value</th><th>Details</th></tr>\n            ${data.extractionMethods ? data.extractionMethods.map(method =>\n                `<tr><td>${method.name}</td><td>${method.count} items</td><td>${method.successful ? `${Math.round(method.successful/method.count*100)}% success rate` : 'N/A'}</td></tr>`\n            ).join('') : ''}\n            <tr><td>Data Completeness</td><td>${this.calculateDataCompleteness(items)}%</td><td>Percentage of items with complete data</td></tr>\n            <tr><td>Export Reliability</td><td>${this.calculateExportReliability()}%</td><td>System reliability based on error rates</td></tr>\n            <tr><td>Processing Efficiency</td><td>${Math.round((items.length || 0) / ((summary.totalProcessingTime || 1000) / 1000))} items/sec</td><td>Overall processing speed</td></tr>\n        </table>\n        \n        <div class=\"footer\">\n            <p>Generated by <strong>StepTwo Gallery Scraper v2.0 Enterprise Edition</strong></p>\n            <p>Export completed ${new Date().toLocaleString()} \u2022 Report ID: ${exportId}</p>\n            <p>\uD83D\uDE80 Enhanced with enterprise-grade reliability features</p>\n        </div>\n    </div>\n\n    <script>\n        // Add interactive features\n        document.querySelectorAll('.item-card').forEach(card => {\n            card.addEventListener('click', () => {\n                card.style.transform = card.style.transform ? '' : 'scale(1.02)';\n            });\n        });\n\n        // Performance monitoring\n        console.log('\uD83D\uDCCA Report loaded successfully');\n        console.log('\uD83D\uDCC8 Performance metrics available in export system');\n    </script>\n</body>\n</html>`;\n\n    this.updateProgress(exportId, 70, 'Finalizing HTML report...');\n    return reportHtml;\n  }\n\n  // Enhanced XML content generation\n  async generateEnhancedXMLContent(data, options, exportId) {\n    this.updateProgress(exportId, 20, 'Building XML structure...');\n\n    const escape = (str) => String(str).replace(/[<>&'\"]/g, (c) => ({\n      '<': '&lt;', '>': '&gt;', '&': '&amp;', \"'\": '&apos;', '\"': '&quot;'\n    }[c]));\n\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    xml += `<ScrapingReport version=\"2.0\" exportId=\"${exportId}\" exportDate=\"${new Date().toISOString()}\">\\n`;\n    \n    // Enhanced metadata\n    xml += '  <Metadata>\\n';\n    xml += `    <ExportVersion>2.0</ExportVersion>\\n`;\n    xml += `    <ExportId>${exportId}</ExportId>\\n`;\n    xml += `    <ProcessingMode>${data.items?.length >= options.streamingThreshold ? 'streaming' : 'standard'}</ProcessingMode>\\n`;\n    xml += `    <UserAgent>${escape(navigator.userAgent)}</UserAgent>\\n`;\n    xml += '  </Metadata>\\n';\n    \n    xml += '  <Summary>\\n';\n    xml += `    <TotalItems>${data.items?.length || 0}</TotalItems>\\n`;\n    xml += `    <SuccessfulItems>${data.summary?.successful || 0}</SuccessfulItems>\\n`;\n    xml += `    <FailedItems>${data.summary?.failed || 0}</FailedItems>\\n`;\n    xml += `    <DuplicateItems>${data.summary?.duplicates || 0}</DuplicateItems>\\n`;\n    xml += `    <SuccessRate>${data.summary?.successRate || Math.round((data.summary?.successful || 0) / (data.items?.length || 1) * 100)}%</SuccessRate>\\n`;\n    xml += `    <SourceUrl>${escape(data.summary?.sourceUrl || 'unknown')}</SourceUrl>\\n`;\n    xml += `    <ProcessingTime>${data.summary?.totalProcessingTime || 0}ms</ProcessingTime>\\n`;\n    xml += `    <Throughput>${Math.round(data.summary?.throughput || 0)} items/sec</Throughput>\\n`;\n    xml += '  </Summary>\\n';\n    \n    this.updateProgress(exportId, 40, 'Processing items for XML...');\n    \n    xml += '  <Items>\\n';\n\n    const items = data.items || [];\n    const batchSize = 50;\n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      \n      this.updateProgress(exportId, 40 + (i / items.length) * 40, \n        `Processing XML items ${i + 1}-${Math.min(i + batchSize, items.length)}...`);\n\n      batch.forEach((item, index) => {\n        const globalIndex = i + index + 1;\n        xml += `    <Item id=\"${globalIndex}\">\\n`;\n        xml += `      <ImageUrl>${escape(item.image || '')}</ImageUrl>\\n`;\n        xml += `      <ThumbnailUrl>${escape(item.thumbnail || '')}</ThumbnailUrl>\\n`;\n        xml += `      <Link>${escape(item.link || '')}</Link>\\n`;\n        xml += `      <Text>${escape(item.text || '')}</Text>\\n`;\n        xml += `      <ExtractionMethod>${escape(item.extractionMethod || 'standard')}</ExtractionMethod>\\n`;\n        \n        if (item.enhanced) {\n          xml += `      <QualityScore>${item.enhanced.qualityScore || 0}</QualityScore>\\n`;\n          xml += `      <ProcessingTime>${item.enhanced.processingTime || 0}ms</ProcessingTime>\\n`;\n        }\n        \n        if (item.metadata) {\n          xml += `      <Metadata>\\n`;\n          xml += `        <ContainerInfo>${escape(item.metadata.containerInfo || '')}</ContainerInfo>\\n`;\n          xml += `        <ElementClasses>${escape(item.metadata.elementClasses || '')}</ElementClasses>\\n`;\n          xml += `      </Metadata>\\n`;\n        }\n        \n        xml += '    </Item>\\n';\n      });\n\n      // Allow other tasks to run\n      if (i % (batchSize * 5) === 0) {\n        await this.delay(1);\n      }\n    }\n\n    xml += '  </Items>\\n';\n\n    // Add performance metrics\n    xml += '  <Performance>\\n';\n    xml += `    <MemoryUsage>${this.getMemoryUsage()}</MemoryUsage>\\n`;\n    xml += `    <TotalExports>${this.exportStats.totalExports}</TotalExports>\\n`;\n    xml += `    <AverageExportTime>${Math.round(this.exportStats.averageExportTime)}ms</AverageExportTime>\\n`;\n    xml += `    <RecoveredErrors>${this.exportStats.recoveredErrors}</RecoveredErrors>\\n`;\n    xml += '  </Performance>\\n';\n\n    xml += '</ScrapingReport>';\n\n    this.updateProgress(exportId, 80, 'Finalizing XML content...');\n    return xml;\n  }\n\n  // Export cancellation system\n  async cancelExport(exportId, reason = 'User cancelled') {\n    if (!this.activeExports.has(exportId)) {\n      return { success: false, error: 'Export not found or already completed' };\n    }\n\n    try {\n      const exportInfo = this.activeExports.get(exportId);\n      \n      // Mark as cancelled\n      exportInfo.cancelled = true;\n      exportInfo.cancellationReason = reason;\n      exportInfo.cancelledAt = Date.now();\n      \n      console.log(`\uD83D\uDEAB Cancelling export ${exportId}: ${reason}`);\n      \n      // Update progress to show cancellation\n      this.updateProgress(exportId, exportInfo.currentProgress, `Cancelling: ${reason}`);\n      \n      // Cleanup resources\n      await this.cleanupExport(exportId);\n      \n      // Enforce memory limit before adding to history\n      if (this.exportHistory.length >= this.MAX_EXPORT_HISTORY) {\n        this.exportHistory.shift(); // Remove oldest entry (at beginning since using push)\n      }\n      // Add to history as cancelled\n      this.exportHistory.push({\n        timestamp: Date.now(),\n        exportId,\n        cancelled: true,\n        cancellationReason: reason,\n        exportTime: Date.now() - exportInfo.startTime,\n        success: false,\n        itemsProcessed: exportInfo.currentProgress || 0\n      });\n      \n      // Show notification\n      await this.showNotification('Export Cancelled', \n        `Export ${exportId} was cancelled: ${reason}`, 'warning');\n      \n      return { \n        success: true, \n        exportId, \n        message: 'Export cancelled successfully',\n        itemsProcessed: exportInfo.currentProgress || 0,\n        elapsedTime: Date.now() - exportInfo.startTime\n      };\n      \n    } catch (error) {\n      console.error(`\u274C Failed to cancel export ${exportId}:`, error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Cancel all active exports\n  async cancelAllExports(reason = 'Bulk cancellation') {\n    const exportIds = Array.from(this.activeExports.keys());\n    const results = [];\n    \n    console.log(`\uD83D\uDEAB Cancelling ${exportIds.length} active exports...`);\n    \n    for (const exportId of exportIds) {\n      const result = await this.cancelExport(exportId, reason);\n      results.push({ exportId, ...result });\n    }\n    \n    return {\n      success: true,\n      cancelledExports: results.filter(r => r.success).length,\n      failedCancellations: results.filter(r => !r.success).length,\n      results\n    };\n  }\n\n  // Check if export is cancelled (to be called during processing)\n  isExportCancelled(exportId) {\n    const exportInfo = this.activeExports.get(exportId);\n    return exportInfo ? exportInfo.cancelled === true : false;\n  }\n\n  // Check if export is paused\n  isExportPaused(exportId) {\n    const exportInfo = this.activeExports.get(exportId);\n    return exportInfo ? exportInfo.paused === true : false;\n  }\n\n  // Wait for resume if export is paused\n  async waitForResume(exportId) {\n    return new Promise((resolve) => {\n      const checkResume = () => {\n        if (this.isExportCancelled(exportId)) {\n          resolve(false); // Return false to indicate cancellation\n        } else if (!this.isExportPaused(exportId)) {\n          resolve(true); // Return true to continue\n        } else {\n          // Check again in 100ms\n          setTimeout(checkResume, 100);\n        }\n      };\n      checkResume();\n    });\n  }\n\n  // Enhanced method with pause/resume support for processing loops\n  async checkExportStatus(exportId) {\n    if (this.isExportCancelled(exportId)) {\n      throw new Error('Export was cancelled by user');\n    }\n    \n    if (this.isExportPaused(exportId)) {\n      console.log(`\u23F8\uFE0F Export ${exportId} paused, waiting for resume...`);\n      await this.showNotification('Export Paused', 'Export has been paused. You can resume it anytime.', 'info');\n      \n      const shouldContinue = await this.waitForResume(exportId);\n      if (!shouldContinue) {\n        throw new Error('Export was cancelled while paused');\n      }\n      \n      console.log(`\u25B6\uFE0F Export ${exportId} resumed`);\n      await this.showNotification('Export Resumed', 'Export has been resumed and will continue processing.', 'info');\n    }\n  }\n\n  // Get list of active exports\n  getActiveExports() {\n    const activeExports = [];\n    \n    for (const [exportId, info] of this.activeExports.entries()) {\n      activeExports.push({\n        exportId,\n        startTime: info.startTime,\n        currentProgress: info.currentProgress,\n        currentStatus: info.currentStatus,\n        elapsedTime: Date.now() - info.startTime,\n        totalItems: info.totalItems,\n        cancelled: info.cancelled || false\n      });\n    }\n    \n    return activeExports;\n  }\n\n  // Progress tracking system\n  generateExportId() {\n    return `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  initializeProgressTracking(exportId, totalItems) {\n    this.activeExports.set(exportId, {\n      totalItems,\n      startTime: Date.now(),\n      currentProgress: 0,\n      currentStatus: 'Starting export...',\n      stage: 'initialization'\n    });\n    \n    console.log(`\uD83C\uDFAF Progress tracking initialized for export ${exportId}`);\n  }\n\n  updateProgress(exportId, percentage, status) {\n    if (this.activeExports.has(exportId)) {\n      const exportInfo = this.activeExports.get(exportId);\n      exportInfo.currentProgress = Math.min(100, Math.max(0, percentage));\n      exportInfo.currentStatus = status;\n      exportInfo.lastUpdate = Date.now();\n      \n      // Call registered progress callbacks\n      if (this.progressCallbacks.has(exportId)) {\n        this.progressCallbacks.get(exportId).forEach(callback => {\n          try {\n            callback({\n              exportId,\n              progress: exportInfo.currentProgress,\n              status: status,\n              totalItems: exportInfo.totalItems,\n              elapsedTime: Date.now() - exportInfo.startTime\n            });\n          } catch (error) {\n            console.warn('Progress callback error:', error);\n          }\n        });\n      }\n      \n      // Log significant progress milestones\n      if (percentage % 25 === 0 || percentage === 100) {\n        console.log(`\uD83D\uDCCA Export ${exportId}: ${percentage}% - ${status}`);\n      }\n    }\n  }\n\n  // Register progress callback\n  onProgress(exportId, callback) {\n    if (!this.progressCallbacks.has(exportId)) {\n      this.progressCallbacks.set(exportId, new Set());\n    }\n    this.progressCallbacks.get(exportId).add(callback);\n  }\n\n  // Memory management\n  scheduleMemoryManagement() {\n    const now = Date.now();\n    if (now - this.lastGC > this.gcInterval) {\n      this.performMemoryCleanup();\n      this.lastGC = now;\n    }\n  }\n\n  async performMemoryCleanup() {\n    // Clear old temporary data\n    const cutoff = Date.now() - 300000; // 5 minutes ago\n    for (const [key, value] of this.tempData.entries()) {\n      if (value.timestamp && value.timestamp < cutoff) {\n        this.tempData.delete(key);\n      }\n    }\n\n    // Suggest garbage collection\n    if (typeof globalThis.gc === 'function') {\n      globalThis.gc();\n    }\n\n    // Update memory usage tracking\n    this.performanceMetrics.memoryUsage.push({\n      timestamp: Date.now(),\n      usage: this.getMemoryUsage()\n    });\n\n    // Keep only recent memory usage data\n    if (this.performanceMetrics.memoryUsage.length > 100) {\n      this.performanceMetrics.memoryUsage = this.performanceMetrics.memoryUsage.slice(-50);\n    }\n\n    console.log('\uD83E\uDDF9 Memory cleanup performed');\n  }\n\n  getMemoryUsage() {\n    if (typeof performance !== 'undefined' && performance.memory) {\n      return performance.memory.usedJSHeapSize;\n    }\n    return 0;\n  }\n\n  // Enhanced statistics tracking\n  updateEnhancedStats(format, exportTime, fileSize, itemCount, exportId) {\n    this.exportStats.totalExports++;\n    this.exportStats.formatCounts[format] = (this.exportStats.formatCounts[format] || 0) + 1;\n    this.exportStats.averageExportTime =\n      (this.exportStats.averageExportTime * (this.exportStats.totalExports - 1) + exportTime) /\n      this.exportStats.totalExports;\n    this.exportStats.totalDataExported += fileSize;\n\n    // Track memory peak\n    const currentMemory = this.getMemoryUsage();\n    if (currentMemory > this.exportStats.memoryPeakUsage) {\n      this.exportStats.memoryPeakUsage = currentMemory;\n    }\n\n    // Track performance metrics\n    this.performanceMetrics.processingTimes.push({\n      exportId,\n      format,\n      itemCount,\n      exportTime,\n      timestamp: Date.now()\n    });\n\n    // Keep only recent metrics\n    if (this.performanceMetrics.processingTimes.length > 50) {\n      this.performanceMetrics.processingTimes = this.performanceMetrics.processingTimes.slice(-25);\n    }\n  }\n\n  // User notification system\n  async showNotification(title, message, type = 'info') {\n    const notification = {\n      title,\n      message,\n      type,\n      timestamp: Date.now()\n    };\n\n    // Call registered notification callbacks\n    this.notificationCallbacks.forEach(callback => {\n      try {\n        callback(notification);\n      } catch (error) {\n        console.warn('Notification callback error:', error);\n      }\n    });\n\n    // Console logging with emojis\n    const emoji = type === 'success' ? '\u2705' : type === 'warning' ? '\u26A0\uFE0F' : type === 'error' ? '\u274C' : '\u2139\uFE0F';\n    console.log(`${emoji} ${title}: ${message}`);\n  }\n\n  onNotification(callback) {\n    this.notificationCallbacks.add(callback);\n  }\n\n  removeNotificationCallback(callback) {\n    this.notificationCallbacks.delete(callback);\n  }\n\n  // Error handling utilities\n  getUserFriendlyError(errorMessage) {\n    const errorMappings = {\n      'XLSX library': 'Excel library loading issue - try refreshing the page',\n      'JSZip library': 'ZIP library loading issue - try refreshing the page',\n      'Failed to fetch': 'Network connectivity issue - check your internet connection',\n      'Invalid data format': 'Data formatting issue - the scraped data may be corrupted',\n      'Memory allocation': 'Out of memory - try reducing the dataset size or using batch processing',\n      'Quota exceeded': 'Storage quota exceeded - try clearing browser data or using smaller datasets'\n    };\n\n    for (const [key, value] of Object.entries(errorMappings)) {\n      if (errorMessage.includes(key)) {\n        return value;\n      }\n    }\n\n    return 'An unexpected error occurred - please try again or contact support';\n  }\n\n  classifyError(errorMessage) {\n    if (errorMessage.includes('network') || errorMessage.includes('fetch')) return 'Network';\n    if (errorMessage.includes('memory') || errorMessage.includes('allocation')) return 'Memory';\n    if (errorMessage.includes('library') || errorMessage.includes('XLSX') || errorMessage.includes('JSZip')) return 'Library';\n    if (errorMessage.includes('data') || errorMessage.includes('format')) return 'Data';\n    if (errorMessage.includes('permission') || errorMessage.includes('access')) return 'Permission';\n    return 'System';\n  }\n\n  // Data quality analysis\n  calculateDataCompleteness(items) {\n    if (!items || items.length === 0) return 0;\n\n    let completeItems = 0;\n    items.forEach(item => {\n      let completeness = 0;\n      if (item.image) completeness += 0.4;\n      if (item.text) completeness += 0.3;\n      if (item.link) completeness += 0.2;\n      if (item.thumbnail) completeness += 0.1;\n      \n      if (completeness >= 0.7) completeItems++; // Consider 70%+ as complete\n    });\n\n    return Math.round((completeItems / items.length) * 100);\n  }\n\n  calculateExportReliability() {\n    const totalExports = this.exportStats.totalExports;\n    if (totalExports === 0) return 100;\n\n    const failureRate = this.exportHistory.filter(exp => !exp.success).length / totalExports;\n    const recoveryRate = this.exportStats.recoveredErrors / Math.max(totalExports, 1);\n    \n    const reliability = Math.max(0, 100 - (failureRate * 100) + (recoveryRate * 10));\n    return Math.round(Math.min(100, reliability));\n  }\n\n  // Utility methods\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  flattenItemForExcel(item) {\n    const flatItem = [];\n    \n    if (item.filename) flatItem.push(item.filename);\n    else if (item.name) flatItem.push(item.name);\n    else flatItem.push('');\n    \n    flatItem.push(item.url || item.image || '');\n    flatItem.push(item.width || '');\n    flatItem.push(item.height || '');\n    flatItem.push(item.altText || item.alt || '');\n    flatItem.push(item.pageTitle || '');\n    flatItem.push(item.timestamp ? new Date(item.timestamp).toISOString() : '');\n    flatItem.push(item.size || item.fileSize || '');\n    flatItem.push(item.thumbnailUrl || item.thumbnail || '');\n    flatItem.push(item.link || '');\n    flatItem.push(item.confidenceScore !== undefined ? item.confidenceScore : '');\n    flatItem.push(item.discoveryMethod || '');\n    flatItem.push(item.category || '');\n    flatItem.push(item.extractionMethod || '');\n    flatItem.push(item.processingTime || '');\n    flatItem.push(item.sourceDomain || item.source || '');\n    \n    return flatItem;\n  }\n\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  formatTime(ms) {\n    if (ms < 1000) return `${ms}ms`;\n    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n    return `${Math.floor(ms / 60000)}m ${Math.floor((ms % 60000) / 1000)}s`;\n  }\n\n  escapeHtml(text) {\n    if (typeof document !== 'undefined') {\n      const div = document.createElement('div');\n      div.textContent = text;\n      return div.innerHTML;\n    }\n    // Fallback for service worker environment\n    return String(text)\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;');\n  }\n\n  // Helper methods for enhanced metadata\n  extractDomainFromItems(items) {\n    if (!items || items.length === 0) return 'Unknown';\n    try {\n      const firstUrl = items[0].image || items[0].url;\n      return firstUrl ? new URL(firstUrl).hostname : 'Unknown';\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  calculateConfidenceDistribution(items) {\n    if (!items || items.length === 0) return { high: 0, medium: 0, low: 0, unknown: 0 };\n    \n    const distribution = { high: 0, medium: 0, low: 0, unknown: 0 };\n    items.forEach(item => {\n      const confidence = item.confidence;\n      if (confidence >= 0.75) distribution.high++;\n      else if (confidence >= 0.5) distribution.medium++;\n      else if (confidence >= 0.3) distribution.low++;\n      else distribution.unknown++;\n    });\n    return distribution;\n  }\n\n  analyzeDiscoveryMethods(items) {\n    if (!items || items.length === 0) return {};\n    \n    const methods = {};\n    items.forEach(item => {\n      const method = item.discoveryMethod || 'unknown';\n      methods[method] = (methods[method] || 0) + 1;\n    });\n    return methods;\n  }\n\n  cleanupExport(exportId) {\n    this.activeExports.delete(exportId);\n    this.progressCallbacks.delete(exportId);\n    \n    // Clean up any temporary data for this export\n    for (const [key, value] of this.tempData.entries()) {\n      if (key.includes(exportId)) {\n        this.tempData.delete(key);\n      }\n    }\n  }\n\n  // =============================================================================\n  // EXPORT PREVIEW AND FIELD SELECTION SYSTEM\n  // =============================================================================\n\n  /**\n   * Generate export preview for user to see sample data before exporting\n   * @param {Object} data - Export data\n   * @param {string} format - Export format (csv, xlsx, json, html)\n   * @param {Object} options - Export options including field selection\n   * @returns {Object} Preview data with sample rows and estimated file size\n   */\n  async generateExportPreview(data, format, options = {}) {\n    try {\n      const items = Array.isArray(data.items) ? data.items : [data.items];\n      const previewItemCount = Math.min(options.previewRows || 5, items.length);\n      const previewItems = items.slice(0, previewItemCount);\n      \n      // Get available fields\n      const availableFields = this.getAvailableFields(items);\n      \n      // Use selected fields or default comprehensive fields\n      const selectedFields = options.selectedFields || availableFields.slice(0, 10);\n      \n      let preview = {\n        format: format.toUpperCase(),\n        totalItems: items.length,\n        previewItems: previewItemCount,\n        selectedFields: selectedFields,\n        availableFields: availableFields,\n        estimatedSize: this.estimateExportSize(items, format, options),\n        sampleData: null\n      };\n\n      // Generate format-specific preview\n      switch (format.toLowerCase()) {\n        case 'csv':\n          preview.sampleData = this.generateCSVPreview(previewItems, selectedFields, options);\n          break;\n        case 'xlsx':\n        case 'excel':\n          preview.sampleData = this.generateXLSXPreview(previewItems, selectedFields, options);\n          break;\n        case 'json':\n          preview.sampleData = this.generateJSONPreview(previewItems, selectedFields, options);\n          break;\n        case 'html':\n          preview.sampleData = this.generateHTMLPreview(previewItems, selectedFields, options);\n          break;\n        default:\n          preview.sampleData = this.generateGenericPreview(previewItems, selectedFields, options);\n      }\n\n      return {\n        success: true,\n        preview: preview\n      };\n    } catch (error) {\n      console.error('\u274C Failed to generate export preview:', error);\n      return {\n        success: false,\n        error: error.message,\n        userFriendlyError: this.getUserFriendlyError(error.message)\n      };\n    }\n  }\n\n  /**\n   * Get all available fields from the dataset\n   */\n  getAvailableFields(items) {\n    if (!items || items.length === 0) return [];\n    \n    const fieldSet = new Set();\n    const fieldPriority = {\n      // Core fields (always first)\n      'filename': 1,\n      'url': 2, \n      'width': 3,\n      'height': 4,\n      'altText': 5,\n      'pageTitle': 6,\n      'timestamp': 7,\n      // Secondary fields\n      'size': 8,\n      'thumbnailUrl': 9,\n      'link': 10,\n      'confidenceScore': 11,\n      'discoveryMethod': 12,\n      'status': 13,\n      'category': 14\n    };\n    \n    // Analyze sample items to discover fields\n    const sampleSize = Math.min(10, items.length);\n    for (let i = 0; i < sampleSize; i++) {\n      const item = items[i];\n      \n      // Add standard fields that exist\n      Object.keys(fieldPriority).forEach(field => {\n        if (this.extractFieldValue(item, field)) {\n          fieldSet.add(field);\n        }\n      });\n      \n      // Add dynamic fields from item properties\n      Object.keys(item).forEach(key => {\n        if (!fieldPriority[key] && item[key] !== undefined && item[key] !== null && item[key] !== '') {\n          fieldSet.add(key);\n        }\n      });\n      \n      // Add metadata fields if available\n      if (item.metadata) {\n        Object.keys(item.metadata).forEach(key => {\n          const metaKey = `metadata_${key}`;\n          if (!fieldSet.has(metaKey)) {\n            fieldSet.add(metaKey);\n          }\n        });\n      }\n    }\n    \n    // Convert to array and sort by priority\n    const fieldsArray = Array.from(fieldSet);\n    fieldsArray.sort((a, b) => {\n      const priorityA = fieldPriority[a] || 999;\n      const priorityB = fieldPriority[b] || 999;\n      if (priorityA !== priorityB) {\n        return priorityA - priorityB;\n      }\n      return a.localeCompare(b);\n    });\n    \n    return fieldsArray;\n  }\n\n  /**\n   * Estimate export file size based on data and format\n   */\n  estimateExportSize(items, format, options) {\n    if (!items || items.length === 0) return '0 bytes';\n    \n    // Sample first few items to estimate average size\n    const sampleSize = Math.min(5, items.length);\n    let totalSampleSize = 0;\n    \n    for (let i = 0; i < sampleSize; i++) {\n      const item = items[i];\n      const selectedFields = options.selectedFields || this.getAvailableFields([item]);\n      \n      selectedFields.forEach(field => {\n        const value = String(this.extractFieldValue(item, field) || '');\n        totalSampleSize += value.length;\n      });\n    }\n    \n    const avgItemSize = totalSampleSize / sampleSize;\n    let estimatedSize = avgItemSize * items.length;\n    \n    // Format-specific size adjustments\n    switch (format.toLowerCase()) {\n      case 'xlsx':\n        estimatedSize *= 1.5; // XLSX overhead\n        break;\n      case 'json':\n        estimatedSize *= 1.3; // JSON formatting overhead\n        break;\n      case 'html':\n        estimatedSize *= 2.0; // HTML markup overhead\n        break;\n      case 'xml':\n        estimatedSize *= 1.8; // XML markup overhead\n        break;\n      // CSV is baseline\n    }\n    \n    // Add metadata overhead\n    if (options.includeMetadata !== false) {\n      estimatedSize *= 1.2;\n    }\n    \n    return this.formatBytes(Math.round(estimatedSize));\n  }\n\n  /**\n   * Generate CSV preview\n   */\n  generateCSVPreview(items, selectedFields, options) {\n    const headers = selectedFields.map(field => this.getFieldLabel(field));\n    const rows = [headers];\n    \n    items.forEach(item => {\n      const row = selectedFields.map(field => {\n        const value = this.extractFieldValue(item, field);\n        return String(value || '').substring(0, 100); // Truncate for preview\n      });\n      rows.push(row);\n    });\n    \n    return {\n      type: 'table',\n      headers: headers,\n      rows: rows.slice(1), // Exclude header row\n      preview: rows.map(row => row.join(',')).join('\\n')\n    };\n  }\n\n  /**\n   * Generate XLSX preview (similar to CSV but with formatting info)\n   */\n  generateXLSXPreview(items, selectedFields, options) {\n    const csvPreview = this.generateCSVPreview(items, selectedFields, options);\n    return {\n      ...csvPreview,\n      type: 'excel',\n      features: [\n        'Multiple worksheets (Items, Summary, Statistics)',\n        'Auto-sized columns',\n        'Header formatting',\n        options.includeMetadata ? 'Metadata sheets' : null\n      ].filter(Boolean)\n    };\n  }\n\n  /**\n   * Generate JSON preview\n   */\n  generateJSONPreview(items, selectedFields, options) {\n    const sampleData = items.map(item => {\n      const obj = {};\n      selectedFields.forEach(field => {\n        const value = this.extractFieldValue(item, field);\n        if (value !== undefined && value !== null && value !== '') {\n          obj[field] = typeof value === 'string' && value.length > 100 ? \n            value.substring(0, 100) + '...' : value;\n        }\n      });\n      return obj;\n    });\n    \n    return {\n      type: 'json',\n      structure: {\n        items: sampleData,\n        summary: options.includeMetadata ? '{ ... metadata ... }' : null,\n        exportInfo: '{ ... export metadata ... }'\n      },\n      preview: JSON.stringify(sampleData, null, 2).substring(0, 1000) + (sampleData.length > 3 ? '\\n  ...more items...' : '')\n    };\n  }\n\n  /**\n   * Generate HTML preview\n   */\n  generateHTMLPreview(items, selectedFields, options) {\n    const headers = selectedFields.map(field => this.getFieldLabel(field));\n    \n    return {\n      type: 'html',\n      features: [\n        'Responsive table layout',\n        'Enhanced styling and formatting',\n        'Export metadata section',\n        'Visual summary statistics',\n        'Print-friendly design'\n      ],\n      preview: `\n<table>\n  <tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>\n${items.map(item => \n  `  <tr>${selectedFields.map(field => \n    `<td>${String(this.extractFieldValue(item, field) || '').substring(0, 50)}</td>`\n  ).join('')}</tr>`\n).join('\\n')}\n</table>`\n    };\n  }\n\n  /**\n   * Generate generic preview for other formats\n   */\n  generateGenericPreview(items, selectedFields, options) {\n    return {\n      type: 'generic',\n      fields: selectedFields.map(field => ({\n        key: field,\n        label: this.getFieldLabel(field),\n        sampleValue: String(this.extractFieldValue(items[0], field) || '').substring(0, 100)\n      }))\n    };\n  }\n\n  // =============================================================================\n  // EXPORT TEMPLATES AND PRESETS SYSTEM\n  // =============================================================================\n\n  /**\n   * Save an export template for reuse\n   * SECURITY FIX: Updated to async for MV3-compliant chrome.storage.local usage\n   */\n  async saveExportTemplate(templateName, config) {\n    try {\n      const template = {\n        name: templateName,\n        created: Date.now(),\n        config: {\n          format: config.format,\n          selectedFields: config.selectedFields,\n          includeMetadata: config.includeMetadata,\n          includeImages: config.includeImages,\n          compressionLevel: config.compressionLevel,\n          customOptions: config.customOptions || {}\n        },\n        usage: {\n          useCount: 0,\n          lastUsed: null\n        }\n      };\n\n      // Store in chrome.storage.local (MV3 compliant)\n      const templates = await this.getStoredTemplates();\n      templates[templateName] = template;\n      await this.storeTemplates(templates);\n\n      console.log(`\u2705 Export template '${templateName}' saved successfully`);\n      return { success: true, template };\n    } catch (error) {\n      console.error('\u274C Failed to save export template:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get all saved export templates\n   * SECURITY FIX: Updated to async for MV3-compliant chrome.storage.local usage\n   */\n  async getExportTemplates() {\n    try {\n      const templates = await this.getStoredTemplates();\n      return {\n        success: true,\n        templates: Object.values(templates).sort((a, b) => b.created - a.created)\n      };\n    } catch (error) {\n      console.error('\u274C Failed to get export templates:', error);\n      return { success: false, error: error.message, templates: [] };\n    }\n  }\n\n  /**\n   * Delete an export template\n   * SECURITY FIX: Updated to async for MV3-compliant chrome.storage.local usage\n   */\n  async deleteExportTemplate(templateName) {\n    try {\n      const templates = await this.getStoredTemplates();\n      if (templates[templateName]) {\n        delete templates[templateName];\n        await this.storeTemplates(templates);\n        console.log(`\u2705 Export template '${templateName}' deleted`);\n        return { success: true };\n      } else {\n        return { success: false, error: 'Template not found' };\n      }\n    } catch (error) {\n      console.error('\u274C Failed to delete export template:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Use an export template (increment usage stats)\n   * SECURITY FIX: Updated to async for MV3-compliant chrome.storage.local usage\n   */\n  async useExportTemplate(templateName) {\n    try {\n      const templates = await this.getStoredTemplates();\n      if (templates[templateName]) {\n        templates[templateName].usage.useCount++;\n        templates[templateName].usage.lastUsed = Date.now();\n        await this.storeTemplates(templates);\n        return { success: true, config: templates[templateName].config };\n      } else {\n        return { success: false, error: 'Template not found' };\n      }\n    } catch (error) {\n      console.error('\u274C Failed to use export template:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get stored templates from chrome.storage.local (MV3 compliant)\n   * SECURITY FIX: Replaced localStorage with chrome.storage.local for MV3 compliance\n   */\n  async getStoredTemplates() {\n    try {\n      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.local) {\n        const result = await chrome.storage.local.get(['steptwo_export_templates']);\n        return result.steptwo_export_templates || {};\n      }\n      return {};\n    } catch (error) {\n      console.warn('Failed to load export templates from storage:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Store templates to chrome.storage.local (MV3 compliant)\n   * SECURITY FIX: Replaced localStorage with chrome.storage.local for MV3 compliance\n   */\n  async storeTemplates(templates) {\n    try {\n      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.local) {\n        await chrome.storage.local.set({ steptwo_export_templates: templates });\n      }\n    } catch (error) {\n      console.warn('Failed to store export templates:', error);\n    }\n  }\n\n  /**\n   * Get predefined export presets\n   */\n  getPredefinedPresets() {\n    return {\n      'Quick Basic': {\n        name: 'Quick Basic',\n        description: 'Essential fields for quick exports',\n        config: {\n          format: 'csv',\n          selectedFields: ['filename', 'url', 'width', 'height', 'altText'],\n          includeMetadata: false,\n          includeImages: false\n        }\n      },\n      'Complete Dataset': {\n        name: 'Complete Dataset',\n        description: 'All available fields with metadata',\n        config: {\n          format: 'xlsx',\n          selectedFields: null, // Will use all available\n          includeMetadata: true,\n          includeImages: false,\n          includePerformanceMetrics: true\n        }\n      },\n      'Analysis Ready': {\n        name: 'Analysis Ready',\n        description: 'Optimized for data analysis with confidence scores',\n        config: {\n          format: 'csv',\n          selectedFields: ['filename', 'url', 'width', 'height', 'confidenceScore', 'discoveryMethod', 'timestamp', 'sourceDomain'],\n          includeMetadata: true,\n          includeImages: false\n        }\n      },\n      'Archive Bundle': {\n        name: 'Archive Bundle',\n        description: 'Complete archive with images in ZIP format',\n        config: {\n          format: 'zip',\n          selectedFields: null,\n          includeMetadata: true,\n          includeImages: true,\n          compressionLevel: 6\n        }\n      },\n      'Web Report': {\n        name: 'Web Report',\n        description: 'HTML report for web viewing and sharing',\n        config: {\n          format: 'html',\n          selectedFields: ['filename', 'url', 'dimensions', 'altText', 'confidenceScore'],\n          includeMetadata: true,\n          includeImages: false\n        }\n      }\n    };\n  }\n\n  // Backward compatibility methods (delegating to enhanced versions)\n  async exportToExcel(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToExcelWithProgress(data, filename, options, exportId);\n  }\n\n  async exportToCSV(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToCSVWithProgress(data, filename, options, exportId);\n  }\n\n  async exportToJSON(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToJSONWithProgress(data, filename, options, exportId);\n  }\n\n  async exportToHTML(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToHTMLWithProgress(data, filename, options, exportId);\n  }\n\n  async exportToXML(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToXMLWithProgress(data, filename, options, exportId);\n  }\n\n  async exportToZip(data, filename, options) {\n    const exportId = this.generateExportId();\n    return await this.exportToZipWithProgress(data, filename, options, exportId);\n  }\n\n  // Enhanced CSV headers with comprehensive metadata\n  generateCSVHeaders(items, options) {\n    // Use selectedFields from options if provided, otherwise use comprehensive defaults\n    if (options.selectedFields && Array.isArray(options.selectedFields) && options.selectedFields.length > 0) {\n      return options.selectedFields.map(field => this.getFieldLabel(field));\n    }\n\n    // Comprehensive header set with all required metadata fields\n    const comprehensiveHeaders = [\n      'Index',\n      'Filename',\n      'URL',\n      'Width',\n      'Height', \n      'Alt Text',\n      'Page Title',\n      'Timestamp',\n      'File Size',\n      'Thumbnail URL',\n      'Source Link',\n      'Confidence Score',\n      'Discovery Method',\n      'Queue Position',\n      'Category',\n      'Extraction Method',\n      'Processing Time',\n      'Source Domain',\n      'Container Info',\n      'Element Classes'\n    ];\n\n    // Add additional metadata headers based on available data\n    if (options.includeMetadata && items.length > 0) {\n      const sampleItem = items[0];\n      if (sampleItem.enhanced) {\n        comprehensiveHeaders.push('Quality Score Enhanced', 'Validation Status', 'Error Count');\n      }\n      if (sampleItem.metadata) {\n        comprehensiveHeaders.push('Element Tag', 'CSS Classes', 'Data Attributes');\n      }\n      if (sampleItem.dimensions) {\n        comprehensiveHeaders.push('Aspect Ratio', 'Orientation');\n      }\n    }\n\n    return comprehensiveHeaders;\n  }\n\n  getFieldLabel(fieldKey) {\n    const fieldLabels = {\n      'filename': 'Filename',\n      'url': 'URL',\n      'width': 'Width',\n      'height': 'Height',\n      'altText': 'Alt Text',\n      'pageTitle': 'Page Title',\n      'timestamp': 'Timestamp',\n      'size': 'File Size',\n      'thumbnailUrl': 'Thumbnail URL',\n      'link': 'Source Link',\n      'confidenceScore': 'Confidence Score',\n      'discoveryMethod': 'Discovery Method',\n      'queuePosition': 'Queue Position',\n      'category': 'Category',\n      'extractionMethod': 'Extraction Method',\n      'processingTime': 'Processing Time',\n      'sourceDomain': 'Source Domain',\n      'containerInfo': 'Container Info',\n      'elementClasses': 'Element Classes',\n      'status': 'Status',\n      'dimensions': 'Dimensions',\n      'caption': 'Caption',\n      'resolution': 'Resolution',\n      'downloadTime': 'Download Time',\n      'retries': 'Retry Count',\n      'agency': 'Photo Agency',\n      'stockId': 'Stock ID',\n      'aspectRatio': 'Aspect Ratio',\n      'orientation': 'Orientation',\n      'elementTag': 'Element Tag',\n      'cssClasses': 'CSS Classes',\n      'dataAttributes': 'Data Attributes',\n      'validationStatus': 'Validation Status',\n      'errorCount': 'Error Count'\n    };\n\n    return fieldLabels[fieldKey] || fieldKey.charAt(0).toUpperCase() + fieldKey.slice(1);\n  }\n\n  itemToCSVRow(item, headers, options) {\n    const row = [];\n\n    headers.forEach((header, index) => {\n      let value = '';\n\n      // If using selectedFields, map from field key to value\n      if (options.selectedFields && Array.isArray(options.selectedFields)) {\n        const fieldKey = this.getFieldKeyFromLabel(header);\n        value = this.extractFieldValue(item, fieldKey);\n      } else {\n        // Enhanced comprehensive header mapping\n        switch (header) {\n        case 'Index':\n          value = item.index || (index + 1);\n          break;\n        case 'Filename':\n          value = this.extractFieldValue(item, 'filename');\n          break;\n        case 'URL':\n          value = this.extractFieldValue(item, 'url');\n          break;\n        case 'Width':\n          value = this.extractFieldValue(item, 'width');\n          break;\n        case 'Height':\n          value = this.extractFieldValue(item, 'height');\n          break;\n        case 'Alt Text':\n          value = this.extractFieldValue(item, 'altText');\n          break;\n        case 'Page Title':\n          value = this.extractFieldValue(item, 'pageTitle');\n          break;\n        case 'Timestamp':\n          value = this.extractFieldValue(item, 'timestamp');\n          break;\n        case 'File Size':\n          value = this.extractFieldValue(item, 'size');\n          break;\n        case 'Thumbnail URL':\n          value = this.extractFieldValue(item, 'thumbnailUrl');\n          break;\n        case 'Source Link':\n          value = this.extractFieldValue(item, 'link');\n          break;\n        case 'Confidence Score':\n          value = this.extractFieldValue(item, 'confidenceScore');\n          break;\n        case 'Discovery Method':\n          value = this.extractFieldValue(item, 'discoveryMethod');\n          break;\n        case 'Queue Position':\n          value = this.extractFieldValue(item, 'queuePosition');\n          break;\n        case 'Category':\n          value = this.extractFieldValue(item, 'category');\n          break;\n        case 'Extraction Method':\n          value = this.extractFieldValue(item, 'extractionMethod');\n          break;\n        case 'Processing Time':\n          value = this.extractFieldValue(item, 'processingTime');\n          break;\n        case 'Source Domain':\n          value = this.extractFieldValue(item, 'sourceDomain');\n          break;\n        case 'Container Info':\n          value = this.extractFieldValue(item, 'containerInfo');\n          break;\n        case 'Element Classes':\n          value = this.extractFieldValue(item, 'elementClasses');\n          break;\n        // Legacy mappings for backward compatibility\n        case 'Image URL':\n          value = item.image || '';\n          break;\n        case 'Text':\n          value = item.text || '';\n          break;\n        case 'Quality Score':\n          value = item.enhanced?.qualityScore || '';\n          break;\n        default:\n          // Try to extract using field key approach\n          const fieldKey = this.getFieldKeyFromLabel(header);\n          value = this.extractFieldValue(item, fieldKey);\n        }\n      }\n\n      row.push(this.escapeCSV(value));\n    });\n\n    return row;\n  }\n\n  getFieldKeyFromLabel(label) {\n    const labelToFieldMap = {\n      'Filename': 'filename',\n      'Image URL': 'url',\n      'Thumbnail URL': 'thumbnailUrl',\n      'Status': 'status',\n      'File Size': 'size',\n      'Dimensions': 'dimensions',\n      'Caption': 'caption',\n      'Resolution': 'resolution',\n      'Download Time': 'downloadTime',\n      'Source Link': 'link',\n      'Retry Count': 'retries',\n      'Source Domain': 'source',\n      'Extraction Method': 'extractionMethod',\n      'Quality Score': 'qualityScore',\n      'Processing Time': 'processingTime',\n      'Container Info': 'containerInfo',\n      'Photo Agency': 'agency',\n      'Stock ID': 'stockId',\n      'Timestamp': 'timestamp'\n    };\n\n    return labelToFieldMap[label] || label.toLowerCase();\n  }\n\n  extractFieldValue(item, fieldKey) {\n    switch (fieldKey) {\n    case 'filename':\n      return this.generateFilename(item) || item.filename || item.name || '';\n    case 'url':\n      return item.image || item.url || item.src || '';\n    case 'width':\n      return item.width || item.dimensions?.width || '';\n    case 'height':\n      return item.height || item.dimensions?.height || '';\n    case 'altText':\n      return item.alt || item.altText || item.text || '';\n    case 'pageTitle':\n      return item.pageTitle || item.title || (typeof document !== 'undefined' ? document.title : '') || '';\n    case 'timestamp':\n      return item.timestamp || item.createdAt || item.addedAt || new Date().toISOString();\n    case 'size':\n      return item.size || item.fileSize || '';\n    case 'thumbnailUrl':\n      return item.thumbnail || item.thumbnailUrl || '';\n    case 'link':\n      return item.link || item.sourceLink || '';\n    case 'confidenceScore':\n      return item.confidence ? Math.round(item.confidence * 100) + '%' : \n             (item.confidenceScore || item.enhanced?.qualityScore || '');\n    case 'discoveryMethod':\n      return item.discoveryMethod || item.extractionMethod || 'unknown';\n    case 'queuePosition':\n      return item.queuePosition || item.index || '';\n    case 'category':\n      return item.category || item.confidenceTier || this.categorizeByConfidence(item.confidence) || '';\n    case 'extractionMethod':\n      return item.extractionMethod || item.discoveryMethod || 'standard';\n    case 'processingTime':\n      return item.enhanced?.processingTime || item.processingTime || '';\n    case 'sourceDomain':\n      try {\n        const url = item.image || item.url || item.src;\n        return url ? new URL(url).hostname : (item.source || '');\n      } catch {\n        return item.source || '';\n      }\n    case 'containerInfo':\n      return item.metadata?.containerInfo || item.containerInfo || '';\n    case 'elementClasses':\n      return item.metadata?.elementClasses || item.elementClasses || item.className || '';\n    case 'status':\n      return item.status || 'pending';\n    case 'dimensions':\n      return item.dimensions ? `${item.dimensions.width}x${item.dimensions.height}` :\n        (item.width && item.height ? `${item.width}x${item.height}` : '');\n    case 'caption':\n      return item.text || item.caption || item.alt || '';\n    case 'resolution':\n      return item.resolution || this.extractFieldValue(item, 'dimensions');\n    case 'downloadTime':\n      return item.downloadTime || item.processingTime || '';\n    case 'retries':\n      return item.retries || item.retryCount || 0;\n    case 'agency':\n      return item.agency || '';\n    case 'stockId':\n      return item.stockId || item.id || '';\n    case 'aspectRatio':\n      if (item.width && item.height) {\n        return (item.width / item.height).toFixed(2);\n      }\n      return item.aspectRatio || '';\n    case 'orientation':\n      if (item.width && item.height) {\n        return item.width > item.height ? 'landscape' : \n               item.width < item.height ? 'portrait' : 'square';\n      }\n      return item.orientation || '';\n    case 'elementTag':\n      return item.element?.tagName || item.elementTag || '';\n    case 'cssClasses':\n      return item.element?.className || item.cssClasses || '';\n    case 'dataAttributes':\n      if (item.element) {\n        const dataAttrs = [];\n        for (const attr of item.element.attributes || []) {\n          if (attr.name.startsWith('data-')) {\n            dataAttrs.push(`${attr.name}=\"${attr.value}\"`);\n          }\n        }\n        return dataAttrs.join(', ');\n      }\n      return item.dataAttributes || '';\n    case 'validationStatus':\n      return item.validationStatus || item.validated ? 'validated' : 'pending';\n    case 'errorCount':\n      return item.errorCount || item.errors?.length || 0;\n    // Handle metadata fields dynamically\n    default:\n      if (fieldKey.startsWith('metadata_')) {\n        const metaKey = fieldKey.replace('metadata_', '');\n        return item.metadata?.[metaKey] || '';\n      }\n      return item[fieldKey] || '';\n    }\n  }\n\n  escapeCSV(value) {\n    if (value === null || value === undefined) {return '';}\n\n    const stringValue = String(value);\n\n    // If the value contains comma, newline, or quotes, wrap in quotes and escape quotes\n    if (stringValue.includes(',') || stringValue.includes('\\n') || stringValue.includes('\"')) {\n      return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n    }\n\n    return stringValue;\n  }\n\n  ensureExtension(filename, extension) {\n    if (!filename.toLowerCase().endsWith(`.${extension.toLowerCase()}`)) {\n      return `${filename}.${extension}`;\n    }\n    return filename;\n  }\n\n  getImageExtension(url) {\n    const match = url.match(/\\.([a-z0-9]+)(?:\\?|$)/i);\n    return match ? match[1].toLowerCase() : 'jpg';\n  }\n\n  async downloadImageAsBlob(url) {\n    try {\n      const response = await fetch(url);\n      return await response.blob();\n    } catch (error) {\n      throw new Error(`Failed to download image: ${error.message}`);\n    }\n  }\n\n  async compressString(str) {\n    // Enhanced compression with better browser support\n    try {\n      if (typeof CompressionStream !== 'undefined') {\n        const stream = new CompressionStream('gzip');\n        const writer = stream.writable.getWriter();\n        const reader = stream.readable.getReader();\n        \n        writer.write(new TextEncoder().encode(str));\n        writer.close();\n        \n        const chunks = [];\n        let done = false;\n        while (!done) {\n          const { value, done: readerDone } = await reader.read();\n          done = readerDone;\n          if (value) chunks.push(value);\n        }\n        \n        const compressed = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\n        let offset = 0;\n        for (const chunk of chunks) {\n          compressed.set(chunk, offset);\n          offset += chunk.length;\n        }\n        \n        return compressed;\n      }\n    } catch (error) {\n      console.warn('Compression failed, using uncompressed data:', error);\n    }\n    \n    // Fallback to uncompressed\n    return new TextEncoder().encode(str);\n  }\n\n  updateStats(format, exportTime, fileSize) {\n    this.exportStats.totalExports++;\n    this.exportStats.formatCounts[format] = (this.exportStats.formatCounts[format] || 0) + 1;\n    this.exportStats.averageExportTime =\n      (this.exportStats.averageExportTime * (this.exportStats.totalExports - 1) + exportTime) /\n      this.exportStats.totalExports;\n    this.exportStats.totalDataExported += fileSize;\n  }\n\n  getStats() {\n    return {\n      ...this.exportStats,\n      exportHistory: this.exportHistory.slice(-10), // Last 10 exports\n      performanceMetrics: this.performanceMetrics,\n      activeExports: this.activeExports.size,\n      memoryUsage: this.formatBytes(this.getMemoryUsage()),\n      reliability: this.calculateExportReliability()\n    };\n  }\n\n  clearHistory() {\n    this.exportHistory = [];\n    this.tempData.clear();\n    this.performanceMetrics = {\n      processingTimes: [],\n      memoryUsage: [],\n      batchSizes: [],\n      errorRates: [],\n      throughputRates: []\n    };\n    console.log('\uD83E\uDDF9 Export history and performance metrics cleared');\n  }\n\n  // Helper method to generate appropriate filename for items\n  generateFilename(item) {\n    const url = item.image || item.url || item.src;\n    if (!url) return '';\n    \n    try {\n      const urlObj = new URL(url);\n      const pathname = urlObj.pathname;\n      const filename = pathname.split('/').pop();\n      \n      // If filename has no extension, try to determine from URL or default to jpg\n      if (!filename.includes('.')) {\n        const extension = this.getImageExtension(url);\n        return `${filename || 'image'}.${extension}`;\n      }\n      \n      return filename;\n    } catch (error) {\n      // Fallback for invalid URLs\n      const extension = this.getImageExtension(url);\n      return `image.${extension}`;\n    }\n  }\n\n  // Helper method to categorize items by confidence score\n  categorizeByConfidence(confidence) {\n    if (confidence >= 0.75) return 'High Confidence';\n    if (confidence >= 0.5) return 'Medium Confidence';\n    if (confidence >= 0.3) return 'Low Confidence';\n    return 'Very Low Confidence';\n  }\n\n  // Enhanced image dimension detection\n  async detectImageDimensions(url) {\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        resolve({\n          width: img.naturalWidth,\n          height: img.naturalHeight,\n          aspectRatio: img.naturalWidth / img.naturalHeight\n        });\n      };\n      img.onerror = () => {\n        resolve({ width: 0, height: 0, aspectRatio: 0 });\n      };\n      img.src = url;\n      \n      // Timeout after 5 seconds\n      setTimeout(() => {\n        resolve({ width: 0, height: 0, aspectRatio: 0 });\n      }, 5000);\n    });\n  }\n\n}\n\n// Enhanced export interface for service worker context\nif (typeof self !== 'undefined') {\n  self.AdvancedExportSystem = AdvancedExportSystem;\n  console.log('\uD83D\uDE80 Enterprise Export System loaded in service worker context');\n}\n\n// Export for ES6 modules\nexport { AdvancedExportSystem };\n\n// Usage example for enterprise features:\n// const exporter = new AdvancedExportSystem({\n//   enableProgressTracking: true,\n//   enableUserNotifications: true,\n//   enableMemoryManagement: true,\n//   batchSize: 200,\n//   maxRetries: 3,\n//   streamingThreshold: 500\n// });\n//\n// // Register progress callback\n// exporter.onProgress(exportId, (progress) => {\n//   console.log(`Export progress: ${progress.progress}% - ${progress.status}`);\n// });\n//\n// // Register notification callback\n// exporter.onNotification((notification) => {\n//   showUserNotification(notification.title, notification.message, notification.type);\n// });\n//\n// // Enhanced export with all enterprise features\n// const result = await exporter.exportData(scrapingData, 'xlsx', 'enterprise-export', {\n//   includePerformanceMetrics: true,\n//   enableCompression: true,\n//   includeThumbnails: true\n// });", "// consolidated-background.js - Unified background functionality\n// Merged from: simple-download-manager.js + simple-message-handler.js + download-queue.js + \n//              batch-operations-manager.js + memory-optimized-processor.js + site-profile-manager.js +\n//              background-utilities.js + enhanced-error-handling.js\n// Provides comprehensive background processing with download management, message handling, \n// batch operations, memory optimization, site profile management, utilities, and error handling\n// \n// NOTE: image-metadata-tracker.js was removed for Manifest V3 compliance.\n//       The chrome.webRequest API used by ImageMetadataTracker is deprecated in MV3.\n\n// =============================================================================\n// ES6 MODULE IMPORTS\n// =============================================================================\n\n// Import Logger for production-ready logging (CR-020 & CR-009)\nimport { Logger } from '../lib/logger.js';\n\n// Import AdvancedExportSystem for export functionality\nimport { AdvancedExportSystem } from './advanced-export-system.js';\n\n// NOTE: The following libraries are required for AdvancedExportSystem but are not ES6 modules:\n// - papaparse.min.js (CSV parsing)\n// - jszip.min.js (ZIP compression)\n// - xlsx.full.min.js (Excel export)\n// - input-sanitizer.js (Security)\n// \n// These libraries need to be loaded separately in the service worker context.\n// The classes below will check for their availability via globalThis and handle gracefully if missing.\n\n// =============================================================================\n// SIMPLE DOWNLOAD MANAGER - Simplified download management\n// =============================================================================\n\nclass SimpleDownloadManager {\n  constructor() {\n    this.activeDownloads = new Map();\n    this.stats = {\n      total: 0,\n      completed: 0,\n      failed: 0,\n      active: 0\n    };\n    this.onProgressCallback = null;\n    this.downloadPromises = new Map(); // Store promises for event-driven handling\n    \n    // CR-002: Store listener reference for cleanup\n    this.downloadListener = null;\n    \n    // CR-020: Initialize logger for production-ready logging\n    this.logger = typeof Logger !== 'undefined' ? new Logger('DownloadManager') : { debug: console.log, info: console.log, warn: console.warn, error: console.error };\n    \n    // CR-019: Initialize Input Sanitizer for security\n    this.sanitizer = null;\n    if (typeof globalThis.InputSanitizer !== 'undefined') {\n      this.sanitizer = new globalThis.InputSanitizer();\n      this.logger.info('Input Sanitizer initialized for download security (CR-019)');\n    } else {\n      throw new Error('SECURITY: InputSanitizer is required but not available');\n    }\n    \n    this.initializeDownloadListener();\n  }\n\n  // Set progress callback\n  setProgressCallback(callback) {\n    this.onProgressCallback = callback;\n  }\n\n  // Get current stats\n  getStats() {\n    return { ...this.stats };\n  }\n\n  // Add items for download - simplified batch processing\n  async addBatch(items) {\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      throw new Error('No valid items provided for download');\n    }\n\n    this.logger.info(`Adding ${items.length} items for download`);\n\n    // Check if downloads permission is available\n    const hasPermission = await chrome.permissions.contains({\n      permissions: ['downloads']\n    });\n\n    if (!hasPermission) {\n      // MV3 FIX: Cannot request permission from background\n      // Signal need for permission and provide clear error\n      await this.requestDownloadPermission(); // This will notify UI\n      throw new Error('PERMISSION_REQUIRED:Downloads permission required. Please use the extension popup to grant downloads permission, then try again.');\n    }\n\n    this.stats.total += items.length;\n    this.updateProgress();\n\n    // Process downloads sequentially to avoid overwhelming the browser\n    for (const item of items) {\n      try {\n        await this.downloadItem(item);\n        await this.delay(100); // Small delay between downloads\n      } catch (error) {\n        this.logger.error('Download failed for item:', item, error);\n        this.stats.failed++;\n        this.updateProgress();\n      }\n    }\n\n    this.logger.info('Batch download completed');\n  }\n\n  // Download a single item - direct chrome.downloads.download\n  // CR-019: URL and filename sanitization for security\n  async downloadItem(item) {\n    try {\n      this.stats.active++;\n      this.updateProgress();\n\n      let url = item.image || item.url || item.src;\n      if (!url) {\n        throw new Error('No URL provided for download');\n      }\n\n      // CR-019: Sanitize URL before downloading\n      if (this.sanitizer) {\n        const sanitizedUrl = this.sanitizer.sanitizeURL(url);\n        if (!sanitizedUrl) {\n          throw new Error('Invalid or unsafe URL blocked by security filter');\n        }\n        url = sanitizedUrl;\n      }\n\n      // Generate filename (includes sanitization)\n      const filename = this.generateFilename(item, url);\n\n      // Simple download options\n      const downloadOptions = {\n        url: url,\n        filename: filename,\n        saveAs: false // Don't show save dialog for batch downloads\n      };\n\n      this.logger.debug('Starting download:', filename);\n\n      // Direct download call - like working extensions\n      const downloadId = await chrome.downloads.download(downloadOptions);\n      \n      this.activeDownloads.set(downloadId, {\n        item: item,\n        startTime: Date.now(),\n        filename: filename\n      });\n\n      // Wait for download to complete\n      await this.waitForDownload(downloadId);\n\n      this.stats.completed++;\n      this.stats.active--;\n      this.updateProgress();\n\n      this.logger.debug('Download completed:', filename);\n\n    } catch (error) {\n      this.stats.failed++;\n      this.stats.active--;\n      this.updateProgress();\n      throw error;\n    }\n  }\n\n  // CR-002: Initialize event-driven download listener with proper cleanup\n  initializeDownloadListener() {\n    if (!chrome.downloads || !chrome.downloads.onChanged) {\n      console.warn('Downloads API not available');\n      return;\n    }\n\n    // CR-002: Check if listener already exists\n    if (this.downloadListener) {\n      console.log('\u26A0\uFE0F Download listener already initialized, skipping');\n      return;\n    }\n\n    // CR-002: Store bound listener reference for cleanup\n    this.downloadListener = (downloadDelta) => {\n      if (this.downloadPromises.has(downloadDelta.id)) {\n        this.handleDownloadChange(downloadDelta);\n      }\n    };\n\n    chrome.downloads.onChanged.addListener(this.downloadListener);\n\n    console.log('\u2705 Event-driven download listener initialized');\n  }\n\n  // Handle download state changes via events\n  handleDownloadChange(downloadDelta) {\n    const downloadId = downloadDelta.id;\n    const promiseHandlers = this.downloadPromises.get(downloadId);\n    \n    if (!promiseHandlers) return;\n\n    // Handle state changes\n    if (downloadDelta.state && downloadDelta.state.current) {\n      const state = downloadDelta.state.current;\n      \n      switch (state) {\n        case 'complete':\n          this.activeDownloads.delete(downloadId);\n          this.downloadPromises.delete(downloadId);\n          promiseHandlers.resolve({ state: 'complete' });\n          break;\n          \n        case 'interrupted':\n          this.activeDownloads.delete(downloadId);\n          this.downloadPromises.delete(downloadId);\n          const error = downloadDelta.error ? downloadDelta.error.current : 'Unknown error';\n          promiseHandlers.reject(new Error(`Download interrupted: ${error}`));\n          break;\n      }\n    }\n\n    // Handle error changes\n    if (downloadDelta.error && downloadDelta.error.current) {\n      this.activeDownloads.delete(downloadId);\n      this.downloadPromises.delete(downloadId);\n      promiseHandlers.reject(new Error(`Download error: ${downloadDelta.error.current}`));\n    }\n  }\n\n  // Wait for download completion using events\n  async waitForDownload(downloadId) {\n    return new Promise((resolve, reject) => {\n      // Store promise handlers for this download\n      this.downloadPromises.set(downloadId, { resolve, reject });\n\n      // Set timeout as fallback\n      setTimeout(() => {\n        if (this.downloadPromises.has(downloadId)) {\n          this.downloadPromises.delete(downloadId);\n          this.activeDownloads.delete(downloadId);\n          reject(new Error('Download timeout'));\n        }\n      }, 120000);\n    });\n  }\n\n  // Request download permission with user prompt - MV3 COMPLIANT\n  async requestDownloadPermission() {\n    try {\n      // MV3 FIX: Cannot request permissions from background without user gesture\n      // Instead, signal UI to request permissions and return false for now\n      console.warn('\u26A0\uFE0F Downloads permission needed - must be requested from UI with user gesture');\n      \n      // Send message to popup/dashboard to request permission\n      try {\n        await chrome.runtime.sendMessage({\n          type: 'PERMISSION_NEEDED',\n          permission: 'downloads',\n          reason: 'Downloads permission required for batch download'\n        });\n      } catch (error) {\n        console.warn('Could not notify UI about permission need:', error);\n      }\n      \n      return false; // Always return false to trigger UI-based permission request\n    } catch (error) {\n      console.error('\u274C Error in permission handling:', error);\n      \n      const enhancedError = new Error(`[Download Permission Request] Failed to request downloads permission: ${error.message}`);\n      enhancedError.originalError = error;\n      enhancedError.context = 'requestDownloadPermission';\n      enhancedError.timestamp = Date.now();\n      throw enhancedError;\n    }\n  }\n\n  // Generate filename - simplified\n  // CR-019: Filename sanitization for security\n  generateFilename(item, url) {\n    try {\n      // Get base filename from URL\n      let filename = new URL(url).pathname.split('/').pop();\n      \n      // CR-019: Use sanitizer if available\n      if (this.sanitizer) {\n        filename = this.sanitizer.sanitizeFilename(filename);\n      } else {\n        // Fallback: Clean up filename\n        filename = filename.replace(/[^a-zA-Z0-9.-]/g, '_');\n      }\n      \n      // Ensure it has an extension\n      if (!filename.includes('.')) {\n        filename += '.jpg'; // Default to jpg for images\n      }\n      \n      // Add index if available\n      if (item.index !== undefined) {\n        const ext = filename.split('.').pop();\n        const name = filename.replace('.' + ext, '');\n        filename = `${name}_${String(item.index).padStart(3, '0')}.${ext}`;\n      }\n      \n      // Sanitize the full path including folder\n      const fullPath = `steptwo_gallery/${filename}`;\n      return this.sanitizer ? this.sanitizer.sanitizeFilename(fullPath) : fullPath;\n    } catch (error) {\n      // Fallback filename\n      const timestamp = Date.now();\n      const index = item.index !== undefined ? `_${String(item.index).padStart(3, '0')}` : '';\n      return `steptwo_gallery/image_${timestamp}${index}.jpg`;\n    }\n  }\n\n  // Update progress\n  updateProgress() {\n    if (this.onProgressCallback) {\n      this.onProgressCallback(this.getStats());\n    }\n  }\n\n  // Simple delay utility\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Clear all downloads (cancel active ones)\n  async clear() {\n    try {\n      // Cancel active downloads\n      for (const downloadId of this.activeDownloads.keys()) {\n        try {\n          await chrome.downloads.cancel(downloadId);\n        } catch (error) {\n          console.warn('Failed to cancel download:', downloadId, error);\n        }\n      }\n\n      // Reset state\n      this.activeDownloads.clear();\n      this.stats = {\n        total: 0,\n        completed: 0,\n        failed: 0,\n        active: 0\n      };\n\n      this.updateProgress();\n      console.log('\u2705 Download queue cleared');\n    } catch (error) {\n      console.error('Failed to clear downloads:', error);\n      throw error;\n    }\n  }\n\n  // Pause downloads (not really supported by Chrome Downloads API)\n  pause() {\n    console.log('\u23F8\uFE0F Pause requested (Chrome Downloads API does not support pausing)');\n  }\n\n  // Resume downloads\n  resume() {\n    console.log('\u25B6\uFE0F Resume requested');\n  }\n\n  // CR-002: Cleanup method to remove event listener\n  cleanup() {\n    if (this.downloadListener && chrome.downloads && chrome.downloads.onChanged) {\n      try {\n        chrome.downloads.onChanged.removeListener(this.downloadListener);\n        this.downloadListener = null;\n        console.log('\u2705 Download listener cleaned up');\n      } catch (error) {\n        console.error('Failed to remove download listener:', error);\n      }\n    }\n  }\n}\n\n// =============================================================================\n// SIMPLE MESSAGE HANDLER - Simplified message handling\n// =============================================================================\n\nclass SimpleMessageHandler {\n  constructor() {\n    this.downloadQueue = null;\n    this.notificationSystem = null;\n    this.initialized = false;\n    \n    // CR-002: Store listener reference for cleanup\n    this.messageListener = null;\n    \n    // CR-020: Initialize logger for production-ready logging\n    this.logger = typeof Logger !== 'undefined' ? new Logger('MessageHandler') : { debug: console.log, info: console.log, warn: console.warn, error: console.error };\n  }\n\n  // Static instance for singleton pattern\n  static _instance = null;\n\n  // Static getInstance method for singleton pattern\n  static getInstance() {\n    if (!SimpleMessageHandler._instance) {\n      SimpleMessageHandler._instance = new SimpleMessageHandler();\n    }\n    return SimpleMessageHandler._instance;\n  }\n\n  // CR-002: Simple initialization - no complex queueing, with proper listener management\n  async initialize(downloadQueue, exportSystem) {\n    // Make initialization idempotent to prevent duplicate listeners\n    if (this.initialized) {\n      this.logger.warn('SimpleMessageHandler already initialized, skipping');\n      return;\n    }\n\n    this.downloadQueue = downloadQueue;\n    this.exportSystem = exportSystem;\n    this.initialized = true;\n    \n    // CR-002: Only add listener if it doesn't exist\n    if (!this.messageListener) {\n      // CR-002: Store bound listener reference maintaining proper 'this' context\n      this.messageListener = (message, sender, sendResponse) => {\n        this.handleMessage(message, sender, sendResponse);\n        return true; // Keep message channel open for async responses\n      };\n      \n      chrome.runtime.onMessage.addListener(this.messageListener);\n    }\n\n    this.logger.info('Simple message handler initialized');\n  }\n\n  // Direct message handling - no complex routing\n  async handleMessage(message, sender, sendResponse) {\n    try {\n      if (!this.initialized) {\n        sendResponse({ success: false, error: 'Extension not ready, please try again' });\n        return;\n      }\n\n      const { type, action } = message;\n      const messageType = type || action;\n\n      switch (messageType) {\n        case 'SCRAPE_DONE':\n          await this.handleScrapeResults(message, sendResponse);\n          break;\n\n        case 'SCRAPE_ERROR':\n          await this.handleScrapeError(message, sendResponse);\n          break;\n\n        case 'START_DOWNLOAD':\n          await this.handleStartDownload(message, sendResponse);\n          break;\n\n        case 'GET_QUEUE_STATUS':\n          this.handleGetQueueStatus(sendResponse);\n          break;\n\n        case 'PAUSE_QUEUE':\n          await this.handlePauseQueue(sendResponse);\n          break;\n\n        case 'RESUME_QUEUE':\n          await this.handleResumeQueue(sendResponse);\n          break;\n\n        case 'CLEAR_QUEUE':\n          await this.handleClearQueue(sendResponse);\n          break;\n\n        case 'CHECK_PERMISSIONS':\n          await this.handleCheckPermissions(sendResponse);\n          break;\n\n        case 'REQUEST_PERMISSIONS':\n          await this.handleRequestPermissions(sendResponse);\n          break;\n\n        case 'PERMISSION_GRANTED':\n          // Handle permission granted notification from UI - MV3 COMPLIANT\n          console.log(`\u2705 Permission granted notification received: ${message.permission}`);\n          sendResponse({ received: true, permission: message.permission });\n          break;\n\n        // Enhanced Smart Selector message handlers\n        case 'start_smart_selector':\n          await this.handleStartSmartSelector(message, sender, sendResponse);\n          break;\n\n        case 'stop_smart_selector':\n          await this.handleStopSmartSelector(message, sender, sendResponse);\n          break;\n\n        case 'smart_selector_update':\n          await this.handleSmartSelectorUpdate(message, sender, sendResponse);\n          break;\n\n        case 'pattern_analysis_complete':\n          await this.handlePatternAnalysisComplete(message, sender, sendResponse);\n          break;\n\n        case 'remove_last_sample':\n          await this.handleRemoveLastSample(message, sender, sendResponse);\n          break;\n\n        case 'clear_smart_selection':\n          await this.handleClearSmartSelection(message, sender, sendResponse);\n          break;\n\n        // Advanced Export System message handlers\n        case 'EXPORT_DATA':\n          await this.handleExportData(message, sendResponse);\n          break;\n\n        case 'GET_EXPORT_PROGRESS':\n          await this.handleGetExportProgress(message, sendResponse);\n          break;\n\n        case 'CANCEL_EXPORT':\n          await this.handleCancelExport(message, sendResponse);\n          break;\n\n        case 'GET_EXPORT_STATUS':\n          await this.handleGetExportStatus(message, sendResponse);\n          break;\n\n        case 'GET_EXPORT_HISTORY':\n          await this.handleGetExportHistory(message, sendResponse);\n          break;\n\n        default:\n          // Handle unknown message types gracefully\n          console.log('Unknown message type:', messageType, message);\n          sendResponse({ success: true, message: 'Message received but not handled' });\n      }\n    } catch (error) {\n      console.error('Message handling error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle scraping results - simplified\n  async handleScrapeResults(message, sendResponse) {\n    try {\n      const { data } = message;\n      \n      if (!data || !data.items || data.items.length === 0) {\n        sendResponse({ success: false, error: 'No items found to download' });\n        return;\n      }\n\n      console.log(`\uD83D\uDCE5 Received ${data.items.length} items for download`);\n\n      // Add items to download queue\n      if (this.downloadQueue) {\n        await this.downloadQueue.addBatch(data.items);\n        sendResponse({ \n          success: true, \n          message: `Added ${data.items.length} items to download queue`,\n          itemCount: data.items.length \n        });\n      } else {\n        sendResponse({ success: false, error: 'Download queue not available' });\n      }\n    } catch (error) {\n      console.error('Error handling scrape results:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle scraping errors - simplified\n  async handleScrapeError(message, sendResponse) {\n    try {\n      console.error('Scraping error reported:', message.error);\n      \n      if (this.notificationSystem) {\n        this.notificationSystem.showNotification('error', 'Scraping Error', message.error);\n      }\n      \n      sendResponse({ success: true, message: 'Error reported and logged' });\n    } catch (error) {\n      console.error('Error handling scrape error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Start download - simplified\n  async handleStartDownload(message, sendResponse) {\n    try {\n      const { items } = message;\n      \n      if (!items || items.length === 0) {\n        sendResponse({ success: false, error: 'No items provided for download' });\n        return;\n      }\n\n      if (this.downloadQueue) {\n        await this.downloadQueue.addBatch(items);\n        sendResponse({ \n          success: true, \n          message: `Started download of ${items.length} items` \n        });\n      } else {\n        sendResponse({ success: false, error: 'Download queue not available' });\n      }\n    } catch (error) {\n      console.error('Error starting download:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Get queue status - direct\n  handleGetQueueStatus(sendResponse) {\n    if (this.downloadQueue) {\n      const stats = this.downloadQueue.getStats();\n      sendResponse({ success: true, stats });\n    } else {\n      sendResponse({ success: false, error: 'Download queue not available' });\n    }\n  }\n\n  // Pause queue - direct\n  async handlePauseQueue(sendResponse) {\n    try {\n      if (this.downloadQueue) {\n        this.downloadQueue.pause();\n        sendResponse({ success: true, message: 'Download queue paused' });\n      } else {\n        sendResponse({ success: false, error: 'Download queue not available' });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Resume queue - direct\n  async handleResumeQueue(sendResponse) {\n    try {\n      if (this.downloadQueue) {\n        this.downloadQueue.resume();\n        sendResponse({ success: true, message: 'Download queue resumed' });\n      } else {\n        sendResponse({ success: false, error: 'Download queue not available' });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Clear queue - direct\n  async handleClearQueue(sendResponse) {\n    try {\n      if (this.downloadQueue) {\n        this.downloadQueue.clear();\n        sendResponse({ success: true, message: 'Download queue cleared' });\n      } else {\n        sendResponse({ success: false, error: 'Download queue not available' });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Check permissions - simple\n  async handleCheckPermissions(sendResponse) {\n    try {\n      const hasDownloads = await chrome.permissions.contains({ permissions: ['downloads'] });\n      const hasTabs = await chrome.permissions.contains({ permissions: ['tabs'] });\n      \n      sendResponse({ \n        success: true, \n        permissions: { downloads: hasDownloads, tabs: hasTabs } \n      });\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Request permissions - MV3 COMPLIANT: Route to UI for user gesture\n  async handleRequestPermissions(sendResponse) {\n    try {\n      // MV3 FIX: Cannot request permissions from service worker\n      // Must route to UI context with user gesture\n      console.warn('\u26A0\uFE0F Permission request attempted from service worker - routing to UI');\n      \n      // Send message to UI to handle permission request\n      try {\n        await chrome.runtime.sendMessage({\n          type: 'PERMISSION_NEEDED',\n          permission: 'downloads',\n          reason: 'Downloads permission required for batch operations'\n        });\n        \n        // Return false to indicate UI handling is needed\n        sendResponse({ \n          success: false, \n          error: 'PERMISSION_REQUIRED:Permission request must be handled by UI with user gesture. Please use the extension popup to grant permissions.',\n          requiresUIPermission: true\n        });\n        \n      } catch (error) {\n        console.warn('Could not notify UI about permission need:', error.message);\n        sendResponse({ \n          success: false, \n          error: 'PERMISSION_REQUIRED:Downloads permission required. Please open the extension popup and grant permissions manually.',\n          requiresUIPermission: true\n        });\n      }\n    } catch (error) {\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // =============================================================================\n  // ADVANCED EXPORT SYSTEM MESSAGE HANDLERS\n  // =============================================================================\n\n  // MV3 FIX: Route large files to dashboard for reliable blob URL handling\n  async routeLargeFileToFrontend(exportResult, tabId) {\n    try {\n      console.log('\uD83D\uDD04 Routing large file to dashboard for reliable download...');\n      \n      if (!tabId) {\n        // Try to find an active dashboard tab\n        const tabs = await chrome.tabs.query({ url: '*://*/ui/windowed-dashboard.html*' });\n        if (tabs.length > 0) {\n          tabId = tabs[0].id;\n        } else {\n          throw new Error('No dashboard tab found for large file routing');\n        }\n      }\n\n      // Send export data to dashboard for blob creation and download\n      await chrome.tabs.sendMessage(tabId, {\n        action: 'handle_large_file_download',\n        exportData: {\n          data: Array.from(new Uint8Array(exportResult.data)), // Convert to transferable array\n          mimeType: exportResult.mimeType,\n          filename: exportResult.filename,\n          size: exportResult.size,\n          exportId: exportResult.exportId\n        }\n      });\n\n      console.log('\u2705 Large file successfully routed to dashboard');\n      \n    } catch (error) {\n      console.error('\u274C Failed to route large file to dashboard:', error);\n      throw error;\n    }\n  }\n\n  // MV3 FIX: Fallback to data URL download when dashboard routing fails  \n  async fallbackToDataURLDownload(exportResult, sendResponse) {\n    try {\n      console.log('\u26A0\uFE0F Using fallback data URL download (may fail for very large files)');\n      \n      // Force chunked data URL creation only\n      const dataUrl = this.createChunkedDataURL(new Uint8Array(exportResult.data), exportResult.mimeType);\n      \n      const downloadOptions = {\n        url: dataUrl,\n        filename: exportResult.filename,\n        saveAs: false\n      };\n\n      const downloadId = await chrome.downloads.download(downloadOptions);\n      \n      sendResponse({\n        success: true,\n        exportId: exportResult.exportId,\n        downloadId: downloadId,\n        filename: exportResult.filename,\n        size: exportResult.size,\n        fallbackUsed: true,\n        warning: 'Large file download used fallback method - may be unreliable'\n      });\n\n    } catch (error) {\n      console.error('\u274C Fallback download also failed:', error);\n      sendResponse({\n        success: false,\n        error: 'Both dashboard routing and fallback download failed: ' + error.message\n      });\n    }\n  }\n\n  // MV3 SAFE: Memory-safe data URL creation - NO BLOB URLs in service worker\n  async createDataURL(data, mimeType) {\n    try {\n      // MV3 FIX: Only use data URLs, never blob URLs in service worker\n      const MAX_DATA_URL_SIZE = 25 * 1024 * 1024; // 25MB - absolute max for service worker\n      \n      let dataSize = 0;\n      let bytes;\n      \n      if (data instanceof Uint8Array) {\n        bytes = data;\n        dataSize = data.length;\n      } else if (data instanceof ArrayBuffer) {\n        bytes = new Uint8Array(data);\n        dataSize = data.byteLength;\n      } else if (typeof data === 'string') {\n        // For text data, estimate size and convert to bytes\n        const encoder = new TextEncoder();\n        bytes = encoder.encode(data);\n        dataSize = bytes.length;\n      } else {\n        throw new Error('Unsupported data type for createDataURL');\n      }\n      \n      console.log(`\uD83D\uDCCA Creating data URL for ${this.formatBytes(dataSize)} file (${mimeType})`);\n      \n      // MV3 FIX: Reject files too large for service worker data URLs\n      if (dataSize > MAX_DATA_URL_SIZE) {\n        console.error(`\u274C File too large (${this.formatBytes(dataSize)}) for service worker data URL`);\n        throw new Error(`File too large for service worker (${this.formatBytes(dataSize)}). Should be routed to dashboard.`);\n      }\n      \n      // Use chunked base64 encoding for all files\n      console.log('\uD83D\uDD04 Using chunked base64 encoding for reliable data URL');\n      return await this.createChunkedDataURL(bytes, mimeType);\n      \n    } catch (error) {\n      console.error('\u274C Error creating data URL:', error);\n      throw error; // MV3 FIX: No blob URL fallback in service worker\n    }\n  }\n\n  // Chunked base64 encoder to prevent memory issues and call stack overflow\n  async createChunkedDataURL(bytes, mimeType) {\n    try {\n      const CHUNK_SIZE = 65536; // 64KB chunks - safe for all browsers\n      let base64Data = '';\n      \n      console.log(`\uD83D\uDD04 Processing ${bytes.length} bytes in ${Math.ceil(bytes.length / CHUNK_SIZE)} chunks`);\n      \n      // Process in chunks to avoid String.fromCharCode.apply() call stack limit\n      for (let i = 0; i < bytes.length; i += CHUNK_SIZE) {\n        const chunk = bytes.slice(i, i + CHUNK_SIZE);\n        \n        // Convert chunk to string using safe method\n        let chunkString = '';\n        for (let j = 0; j < chunk.length; j++) {\n          chunkString += String.fromCharCode(chunk[j]);\n        }\n        \n        // Add to base64 (btoa is safe for smaller chunks)\n        base64Data += btoa(chunkString);\n        \n        // Yield control occasionally for very large files\n        if (i % (CHUNK_SIZE * 10) === 0 && i > 0) {\n          // Allow other operations to run\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n      \n      console.log(`\u2705 Chunked encoding complete: ${base64Data.length} base64 chars`);\n      return `data:${mimeType};base64,${base64Data}`;\n      \n    } catch (error) {\n      console.error('\u274C Chunked encoding failed:', error);\n      throw error;\n    }\n  }\n  \n  // Helper method to format bytes for logging\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Handle export data request\n  async handleExportData(message, sendResponse) {\n    try {\n      if (!this.exportSystem) {\n        sendResponse({ success: false, error: 'Export system not available' });\n        return;\n      }\n\n      const { exportData, format, filename, options = {} } = message;\n      \n      if (!exportData || !exportData.items) {\n        sendResponse({ success: false, error: 'No data provided for export' });\n        return;\n      }\n\n      console.log(`\uD83D\uDCCA Starting ${format} export: ${exportData.items.length} items`);\n\n      // Start export with progress tracking\n      const result = await this.exportSystem.exportData(exportData, format, filename, {\n        enableProgressTracking: true,\n        enableUserNotifications: true,\n        enableMemoryManagement: true,\n        ...options\n      });\n\n      if (result.success) {\n        // MV3 FIX: Check file size and route large files to dashboard\n        const fileSize = result.size || result.data?.byteLength || result.data?.length || 0;\n        const LARGE_FILE_THRESHOLD = 25 * 1024 * 1024; // 25MB threshold\n        \n        if (fileSize > LARGE_FILE_THRESHOLD) {\n          console.log(`\uD83D\uDD04 Large file detected (${this.formatBytes(fileSize)}), routing to dashboard for reliable download`);\n          \n          // Route to dashboard for blob creation and download\n          try {\n            await this.routeLargeFileToFrontend(result, message.tabId);\n            \n            sendResponse({\n              success: true,\n              exportId: result.exportId,\n              routedToDashboard: true,\n              filename: result.filename,\n              size: result.size,\n              itemsProcessed: result.itemsProcessed,\n              exportTime: result.exportTime,\n              throughput: result.throughput,\n              message: 'Large file routed to dashboard for reliable download'\n            });\n          } catch (routingError) {\n            console.warn('\u26A0\uFE0F Dashboard routing failed, falling back to service worker download:', routingError);\n            // Fallback to service worker download with data URL only\n            await this.fallbackToDataURLDownload(result, sendResponse);\n          }\n        } else {\n          // Small/medium files: use reliable data URL approach\n          console.log(`\uD83D\uDCCA Small file (${this.formatBytes(fileSize)}), using data URL approach`);\n          const downloadOptions = {\n            url: this.createDataURL(result.data, result.mimeType),\n            filename: result.filename,\n            saveAs: false\n          };\n\n          const downloadId = await chrome.downloads.download(downloadOptions);\n          \n          sendResponse({\n            success: true,\n            exportId: result.exportId,\n            downloadId: downloadId,\n            filename: result.filename,\n            size: result.size,\n            itemsProcessed: result.itemsProcessed,\n            exportTime: result.exportTime,\n            throughput: result.throughput\n          });\n        }\n      } else {\n        sendResponse({\n          success: false,\n          error: result.error,\n          userFriendlyError: result.userFriendlyError,\n          exportTime: result.exportTime\n        });\n      }\n\n    } catch (error) {\n      console.error('Export data handler error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle get export progress request\n  async handleGetExportProgress(message, sendResponse) {\n    try {\n      if (!this.exportSystem) {\n        sendResponse({ success: false, error: 'Export system not available' });\n        return;\n      }\n\n      const { exportId } = message;\n      \n      if (!exportId) {\n        // Return all active exports if no specific ID provided\n        const activeExports = this.exportSystem.getActiveExports();\n        sendResponse({ success: true, activeExports });\n        return;\n      }\n\n      // Get specific export progress (implementation would need to be added to AdvancedExportSystem)\n      const activeExports = this.exportSystem.getActiveExports();\n      const exportInfo = activeExports.find(exp => exp.exportId === exportId);\n\n      if (exportInfo) {\n        sendResponse({ success: true, exportInfo });\n      } else {\n        sendResponse({ success: false, error: 'Export not found or completed' });\n      }\n\n    } catch (error) {\n      console.error('Get export progress handler error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle cancel export request\n  async handleCancelExport(message, sendResponse) {\n    try {\n      if (!this.exportSystem) {\n        sendResponse({ success: false, error: 'Export system not available' });\n        return;\n      }\n\n      const { exportId, exportIds } = message;\n      \n      if (exportId) {\n        // Cancel single export\n        const result = await this.exportSystem.cancelExport(exportId);\n        sendResponse({ success: result.success, message: result.message });\n      } else if (exportIds && Array.isArray(exportIds)) {\n        // Cancel multiple exports\n        const result = await this.exportSystem.cancelAllExports(exportIds);\n        sendResponse({ \n          success: true, \n          cancelledExports: result.cancelledExports,\n          failedCancellations: result.failedCancellations,\n          results: result.results\n        });\n      } else {\n        // Cancel all active exports\n        const result = await this.exportSystem.cancelAllExports();\n        sendResponse({ \n          success: true, \n          cancelledExports: result.cancelledExports,\n          message: 'All active exports cancelled'\n        });\n      }\n\n    } catch (error) {\n      console.error('Cancel export handler error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle get export status request\n  async handleGetExportStatus(message, sendResponse) {\n    try {\n      if (!this.exportSystem) {\n        sendResponse({ success: false, error: 'Export system not available' });\n        return;\n      }\n\n      const status = {\n        activeExports: this.exportSystem.getActiveExports(),\n        exportStats: this.exportSystem.exportStats,\n        exportHistory: this.exportSystem.exportHistory.slice(-10), // Last 10 exports\n        systemHealth: {\n          memoryUsage: this.exportSystem.getMemoryUsage(),\n          isHealthy: true // Could add more health checks\n        }\n      };\n\n      sendResponse({ success: true, status });\n\n    } catch (error) {\n      console.error('Get export status handler error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // Handle get export history request  \n  async handleGetExportHistory(message, sendResponse) {\n    try {\n      if (!this.exportSystem) {\n        sendResponse({ success: false, error: 'Export system not available' });\n        return;\n      }\n\n      const { limit = 50, offset = 0, format, successful } = message;\n      \n      let history = this.exportSystem.exportHistory;\n\n      // Apply filters\n      if (format) {\n        history = history.filter(exp => exp.format === format);\n      }\n      if (successful !== undefined) {\n        history = history.filter(exp => exp.success === successful);\n      }\n\n      // Apply pagination\n      const totalCount = history.length;\n      const paginatedHistory = history.slice(offset, offset + limit);\n\n      sendResponse({ \n        success: true, \n        history: paginatedHistory,\n        totalCount,\n        offset,\n        limit,\n        hasMore: (offset + limit) < totalCount\n      });\n\n    } catch (error) {\n      console.error('Get export history handler error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  // CR-002: Cleanup method to properly remove the message listener\n  cleanup() {\n    if (this.messageListener) {\n      try {\n        chrome.runtime.onMessage.removeListener(this.messageListener);\n        this.messageListener = null;\n        this.initialized = false;\n        console.log('\u2705 Message handler listener cleaned up');\n      } catch (error) {\n        console.error('Failed to remove message listener:', error);\n      }\n    }\n  }\n}\n\n// =============================================================================\n// ENHANCED DOWNLOAD QUEUE - Enhanced download queue management (simplified)\n// =============================================================================\n\nclass StepTwoDownloadQueue {\n  constructor({concurrency = 5, retryLimit = 3, hostLimit = 3} = {}) {\n    this.concurrency = concurrency;\n    this.hostLimit = hostLimit;\n    this.retryLimit = retryLimit;\n\n    this.queue = [];\n    this.active = new Map();\n    this.completed = [];\n    this.failed = [];\n    this.duplicates = new Set();\n    this.onProgress = () => {};\n    this.paused = false;\n    this.stopped = false;\n\n    this.stats = {\n      totalItems: 0,\n      processed: 0,\n      successful: 0,\n      failed: 0,\n      skipped: 0,\n      duplicates: 0,\n      startTime: null,\n      endTime: null\n    };\n\n    this.filters = {\n      minWidth: 0,\n      minHeight: 0,\n      allowedTypes: ['jpg', 'jpeg', 'png', 'webp', 'gif', 'svg'],\n      skipDuplicates: false,\n      maxResults: 1000\n    };\n    \n    // Memory limits for unbounded array growth prevention\n    this.MAX_ERRORS = 500;\n    \n    this.errors = [];\n    this.hostQueue = new Map();\n  }\n\n  async addItems(items, options = {}) {\n    const processedItems = items.map(item => this.processItem(item, options));\n\n    // Apply filters\n    const filteredItems = options.skipFiltering ? processedItems :\n      processedItems.filter(item => this.passesFilters(item));\n\n    // Check for duplicates if enabled\n    const uniqueItems = this.filters.skipDuplicates ?\n      await this.removeDuplicates(filteredItems) : filteredItems;\n\n    // Add to queue\n    uniqueItems.forEach(item => {\n      item.id = this.generateItemId();\n      item.addedAt = Date.now();\n      item.status = 'queued';\n      item.retryCount = 0;\n      this.queue.push(item);\n    });\n\n    this.stats.totalItems = this.queue.length + this.completed.length + this.failed.length;\n    this.onProgress({\n      state: 'items_added',\n      added: uniqueItems.length,\n      filtered: processedItems.length - filteredItems.length,\n      duplicates: filteredItems.length - uniqueItems.length,\n      total: this.queue.length,\n      stats: this.getStats()\n    });\n\n    // Start processing if not paused\n    if (!this.paused && !this.stopped) {\n      this._next();\n    }\n\n    return uniqueItems.length;\n  }\n\n  // MV3 FIX: Add addBatch alias for compatibility with SimpleMessageHandler\n  async addBatch(items, options = {}) {\n    console.log('\uD83D\uDCE5 StepTwoDownloadQueue.addBatch called - routing to addItems for MV3 compatibility');\n    return await this.addItems(items, options);\n  }\n\n  processItem(item, _options = {}) {\n    const url = item.url || item.src || item.href;\n\n    const processed = {\n      url: url,\n      filename: item.filename || this.generateFilename(item),\n      referrer: item.referrer || `chrome-extension://${chrome.runtime.id}`,\n      headers: item.headers || {},\n      metadata: {\n        sourceUrl: item.sourceUrl || 'unknown',\n        extractedAt: Date.now(),\n        selector: item.selector,\n        index: item.index,\n        ...item.metadata\n      },\n      ...item\n    };\n\n    // Validate required fields\n    if (!processed.url) {\n      throw new Error('Item must have a URL');\n    }\n\n    return processed;\n  }\n\n  async removeDuplicates(items) {\n    const uniqueItems = [];\n    const seenUrls = new Set(this.duplicates);\n\n    for (const item of items) {\n      // URL-based deduplication\n      if (seenUrls.has(item.url)) {\n        this.stats.duplicates++;\n        continue;\n      }\n\n      seenUrls.add(item.url);\n      uniqueItems.push(item);\n    }\n\n    // Update duplicates set\n    seenUrls.forEach(url => this.duplicates.add(url));\n    return uniqueItems;\n  }\n\n  passesFilters(item) {\n    // Size filters (if metadata available)\n    if (item.width && this.filters.minWidth && item.width < this.filters.minWidth) {\n      return false;\n    }\n\n    if (item.height && this.filters.minHeight && item.height < this.filters.minHeight) {\n      return false;\n    }\n\n    // File type filters\n    const extension = this.getFileExtension(item.url || item.filename || '');\n    if (extension && this.filters.allowedTypes.length > 0) {\n      if (!this.filters.allowedTypes.includes(extension.toLowerCase())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getFileExtension(url) {\n    try {\n      const pathname = new URL(url).pathname;\n      const match = pathname.match(/\\.([^.]+)$/);\n      return match ? match[1] : null;\n    } catch (_error) {\n      const match = url.match(/\\.([^.]+)$/);\n      return match ? match[1] : null;\n    }\n  }\n\n  generateFilename(item) {\n    // Extract from URL\n    try {\n      const url = new URL(item.url);\n      const pathname = url.pathname;\n      let filename = pathname.split('/').pop();\n\n      if (!filename || !filename.includes('.')) {\n        filename = `image_${Date.now()}.jpg`;\n      }\n\n      return this.sanitizeFilename(filename);\n    } catch (_error) {\n      return `download_${Date.now()}.bin`;\n    }\n  }\n\n  sanitizeFilename(filename) {\n    const invalidChars = /[<>:\"/\\\\|?*]/g;\n    return filename\n      .replace(invalidChars, '_')\n      .replace(/[^\\x20-\\x7E]/g, '_')\n      .replace(/\\s+/g, '_')\n      .substring(0, 200);\n  }\n\n  generateItemId() {\n    return `item_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  _next() {\n    // Simplified processing logic\n    if (this.queue.length > 0 && this.active.size < this.concurrency) {\n      const item = this.queue.shift();\n      this.processDownload(item);\n    }\n  }\n\n  async processDownload(item) {\n    try {\n      const downloadId = await chrome.downloads.download({\n        url: item.url,\n        filename: item.filename\n      });\n      \n      this.active.set(downloadId, item);\n      // Wait for completion and handle success/failure\n    } catch (error) {\n      this.failed.push(item);\n      this.stats.failed++;\n    }\n  }\n\n  stop() {\n    this.stopped = true;\n    this.paused = true;\n    this.active.clear();\n    this.stats.endTime = Date.now();\n    this.onProgress({state:'stopped', stats: this.getStats()});\n  }\n\n  clear() {\n    this.stop();\n    this.queue = [];\n    this.completed = [];\n    this.failed = [];\n    this.duplicates.clear();\n    this.errors = [];\n    this.hostQueue.clear();\n    this.stats = {\n      totalItems: 0,\n      processed: 0,\n      successful: 0,\n      failed: 0,\n      skipped: 0,\n      duplicates: 0,\n      startTime: null,\n      endTime: null\n    };\n    this.stopped = false;\n    this.onProgress({state:'cleared', stats: this.getStats()});\n  }\n\n  getStats() {\n    const now = Date.now();\n    const elapsed = this.stats.startTime ? (now - this.stats.startTime) / 1000 : 0;\n    const rate = elapsed > 0 ? this.stats.processed / elapsed : 0;\n    const remaining = this.queue.length + this.active.size;\n    const eta = rate > 0 ? remaining / rate : 0;\n\n    return {\n      ...this.stats,\n      elapsed,\n      rate: Math.round(rate * 100) / 100,\n      eta: Math.round(eta),\n      queueSize: this.queue.length,\n      activeDownloads: this.active.size,\n      remaining\n    };\n  }\n\n  setProgressCallback(cb) {\n    this.onProgress = typeof cb === 'function' ? cb : () => {};\n  }\n\n  setFilters(filters) {\n    Object.assign(this.filters, filters);\n  }\n}\n\n// =============================================================================\n// BATCH OPERATIONS MANAGER - Simplified batch processing\n// =============================================================================\n\nclass BatchOperationsManager {\n  constructor(options = {}) {\n    this.options = {\n      maxConcurrentTabs: options.maxConcurrentTabs || 5,\n      tabProcessingDelay: options.tabProcessingDelay || 1000,\n      enableProgressTracking: options.enableProgressTracking !== false,\n      maxRetries: options.maxRetries || 3,\n      retryDelay: options.retryDelay || 2000,\n      ...options\n    };\n\n    // Memory limits for unbounded array growth prevention\n    this.MAX_BATCH_QUEUE = 1000;\n    this.MAX_BATCH_HISTORY = 100;\n    \n    this.activeBatches = new Map();\n    this.batchQueue = [];\n    this.processingQueue = false;\n    this.batchHistory = [];\n\n    this._listenersRegistered = false;\n    this._initializationPromise = null;\n  }\n\n  // Async initialization for event handlers - called when needed\n  async ensureInitialized() {\n    if (this._initializationPromise) {\n      return this._initializationPromise;\n    }\n    \n    this._initializationPromise = this._initialize();\n    return this._initializationPromise;\n  }\n  \n  async _initialize() {\n    if (this._listenersRegistered) {\n      return;\n    }\n    \n    console.log('\uD83D\uDD04 Initializing BatchOperationsManager event handlers...');\n    \n    try {\n      // Store bound handlers so we can remove them later if needed\n      this._tabUpdatedHandler = (tabId, changeInfo, tab) => {\n        if (changeInfo.status === 'complete') {\n          this.handleTabLoadComplete(tabId, tab);\n        }\n      };\n      \n      this._tabRemovedHandler = (tabId) => {\n        this.handleTabRemoved(tabId);\n      };\n      \n      // Register listeners\n      chrome.tabs.onUpdated.addListener(this._tabUpdatedHandler);\n      chrome.tabs.onRemoved.addListener(this._tabRemovedHandler);\n      \n      this._listenersRegistered = true;\n      console.log('\u2705 BatchOperationsManager event handlers registered');\n      \n    } catch (error) {\n      console.error('\u274C Failed to initialize BatchOperationsManager:', error);\n      this._initializationPromise = null; // Reset to allow retry\n      throw error;\n    }\n  }\n\n  async startBatchOperation(batchConfig) {\n    try {\n      await this.ensureInitialized();\n      \n      const batchId = this.generateBatchId();\n      const batch = {\n        id: batchId,\n        config: batchConfig,\n        urls: batchConfig.urls || [],\n        status: 'initializing',\n        startTime: Date.now(),\n        endTime: null,\n        progress: {\n          total: batchConfig.urls?.length || 0,\n          completed: 0,\n          failed: 0,\n          inProgress: 0\n        },\n        results: [],\n        errors: [],\n        tabs: new Map()\n      };\n\n      this.activeBatches.set(batchId, batch);\n      console.log(`\uD83D\uDE80 Starting batch operation ${batchId} with ${batch.progress.total} URLs`);\n\n      // Start processing\n      batch.status = 'processing';\n      await this.processBatch(batch);\n\n      return batchId;\n    } catch (error) {\n      console.error('\u274C Batch operation failed to start:', error);\n      throw error;\n    }\n  }\n\n  async processBatch(batch) {\n    try {\n      const chunks = this.chunkArray(batch.urls, this.options.maxConcurrentTabs);\n\n      for (const chunk of chunks) {\n        if (batch.status === 'cancelled') {\n          break;\n        }\n\n        await this.processChunk(batch, chunk);\n\n        // Add delay between chunks\n        if (chunks.indexOf(chunk) < chunks.length - 1) {\n          await this.delay(this.options.tabProcessingDelay);\n        }\n      }\n\n      // Complete the batch\n      batch.status = batch.errors.length > 0 ? 'completed_with_errors' : 'completed';\n      batch.endTime = Date.now();\n\n      this.notifyBatchComplete(batch);\n\n      // Enforce memory limit before adding to history\n      if (this.batchHistory.length >= this.MAX_BATCH_HISTORY) {\n        this.batchHistory.shift(); // Remove oldest entry (at beginning since using push)\n      }\n      // Move to history\n      this.batchHistory.push({\n        ...batch,\n        tabs: undefined // Don't store tab references in history\n      });\n\n    } catch (error) {\n      batch.status = 'failed';\n      batch.endTime = Date.now();\n      batch.errors.push({\n        type: 'batch_error',\n        message: error.message,\n        timestamp: Date.now()\n      });\n\n      console.error('\u274C Batch processing failed:', error);\n    }\n  }\n\n  async processChunk(batch, urls) {\n    const chunkPromises = urls.map(url => this.processUrl(batch, url));\n    await Promise.allSettled(chunkPromises);\n  }\n\n  async processUrl(batch, url) {\n    try {\n      batch.progress.inProgress++;\n\n      // Create a new tab for this URL\n      const tab = await chrome.tabs.create({\n        url: url,\n        active: false // Background processing\n      });\n\n      batch.tabs.set(tab.id, {\n        url: url,\n        status: 'loading',\n        startTime: Date.now(),\n        retryCount: 0\n      });\n\n      // Wait for tab to load and process\n      const result = await this.waitForTabProcessing(batch, tab);\n\n      if (result.success) {\n        batch.progress.completed++;\n        batch.results.push(result);\n      } else {\n        batch.progress.failed++;\n        batch.errors.push({\n          url: url,\n          error: result.error,\n          timestamp: Date.now()\n        });\n      }\n\n      // Close the tab\n      try {\n        await chrome.tabs.remove(tab.id);\n      } catch (closeError) {\n        console.warn('Failed to close tab:', closeError);\n      }\n\n      batch.tabs.delete(tab.id);\n      batch.progress.inProgress--;\n\n    } catch (error) {\n      batch.progress.inProgress--;\n      batch.progress.failed++;\n      batch.errors.push({\n        url: url,\n        error: error.message,\n        timestamp: Date.now()\n      });\n      console.error(`\u274C Failed to process URL ${url}:`, error);\n    }\n  }\n\n  async waitForTabProcessing(batch, tab, timeout = 30000) {\n    return new Promise((resolve) => {\n      const startTime = Date.now();\n\n      const checkInterval = setInterval(async () => {\n        try {\n          // Check timeout\n          if (Date.now() - startTime > timeout) {\n            clearInterval(checkInterval);\n            resolve({ success: false, error: 'Processing timeout' });\n            return;\n          }\n\n          // Try to inject and run scraper\n          const result = await this.injectAndRunScraper(tab.id);\n\n          if (result.completed) {\n            clearInterval(checkInterval);\n            resolve({\n              success: true,\n              url: tab.url,\n              items: result.items || [],\n              metadata: result.metadata || {}\n            });\n          }\n\n        } catch (error) {\n          // Tab might not be ready yet, continue checking\n          console.log('Tab not ready yet, retrying...', error.message);\n        }\n      }, 2000); // Check every 2 seconds\n    });\n  }\n\n  async injectAndRunScraper(tabId) {\n    try {\n      // Send message to start scraping\n      const result = await chrome.tabs.sendMessage(tabId, {\n        action: 'START_BATCH_SCRAPE',\n        config: {\n          mode: 'batch',\n          timeout: 20000,\n          maxItems: 1000\n        }\n      });\n\n      return result || { completed: false };\n    } catch (error) {\n      console.warn('Failed to inject scraper:', error);\n      return { completed: false, error: error.message };\n    }\n  }\n\n  handleTabLoadComplete(tabId, _tab) {\n    // Find which batch this tab belongs to\n    for (const batch of this.activeBatches.values()) {\n      const tabInfo = batch.tabs.get(tabId);\n      if (tabInfo) {\n        tabInfo.status = 'loaded';\n        tabInfo.loadTime = Date.now();\n        break;\n      }\n    }\n  }\n\n  handleTabRemoved(tabId) {\n    // Clean up tab references from active batches\n    for (const batch of this.activeBatches.values()) {\n      if (batch.tabs.has(tabId)) {\n        batch.tabs.delete(tabId);\n        break;\n      }\n    }\n  }\n\n  notifyBatchComplete(batch) {\n    try {\n      const message = `Batch operation completed: ${batch.progress.completed}/${batch.progress.total} successful`;\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'StepTwo Gallery Scraper',\n        message: message\n      });\n    } catch {\n      console.log('Batch completed:', batch.progress);\n    }\n  }\n\n  // Cancel an active batch operation\n  async cancelBatch(batchId) {\n    const batch = this.activeBatches.get(batchId);\n    if (!batch) {return false;}\n\n    batch.status = 'cancelled';\n\n    // Close all associated tabs\n    for (const tabId of batch.tabs.keys()) {\n      try {\n        await chrome.tabs.remove(tabId);\n      } catch (error) {\n        console.warn('Failed to close tab during cancellation:', error);\n      }\n    }\n\n    batch.endTime = Date.now();\n    return true;\n  }\n\n  // Get status of all active batches\n  getActiveBatches() {\n    const batches = {};\n    for (const [id, batch] of this.activeBatches) {\n      batches[id] = {\n        id: batch.id,\n        status: batch.status,\n        progress: batch.progress,\n        startTime: batch.startTime,\n        config: batch.config\n      };\n    }\n    return batches;\n  }\n\n  // Get batch history\n  getBatchHistory(limit = 10) {\n    return this.batchHistory.slice(-limit);\n  }\n\n  // Utility methods\n  generateBatchId() {\n    return `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  chunkArray(array, size) {\n    const chunks = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // CR-002: Cleanup method to remove event listeners\n  cleanup() {\n    if (this._tabUpdatedHandler) {\n      try {\n        chrome.tabs.onUpdated.removeListener(this._tabUpdatedHandler);\n        this._tabUpdatedHandler = null;\n        console.log('\u2705 Tab updated listener cleaned up');\n      } catch (error) {\n        console.error('Failed to remove tab updated listener:', error);\n      }\n    }\n\n    if (this._tabRemovedHandler) {\n      try {\n        chrome.tabs.onRemoved.removeListener(this._tabRemovedHandler);\n        this._tabRemovedHandler = null;\n        console.log('\u2705 Tab removed listener cleaned up');\n      } catch (error) {\n        console.error('Failed to remove tab removed listener:', error);\n      }\n    }\n\n    this._listenersRegistered = false;\n    this._initializationPromise = null;\n  }\n}\n\n// =============================================================================\n// MEMORY OPTIMIZED PROCESSOR - Simplified memory optimization\n// =============================================================================\n\nclass MemoryOptimizedProcessor {\n  constructor(options = {}) {\n    this.options = {\n      maxMemoryItems: options.maxMemoryItems || 1000,\n      spillBatchSize: options.spillBatchSize || 500,\n      processingBatchSize: options.processingBatchSize || 100,\n      dbName: options.dbName || 'StepTwoProcessor',\n      dbVersion: options.dbVersion || 1,\n      enableCompression: options.enableCompression !== false,\n      maxTotalItems: options.maxTotalItems || 100000,\n      ...options\n    };\n\n    // Memory limits for unbounded array growth prevention\n    this.MAX_MEMORY_QUEUE = 10000;\n    \n    this.memoryQueue = [];\n    this.dbQueue = null;\n    this.isProcessing = false;\n    this.totalItems = 0;\n    this.processedItems = 0;\n    this.spilledItems = 0;\n\n    this.stats = {\n      memoryUsage: 0,\n      dbUsage: 0,\n      totalProcessed: 0,\n      spillOperations: 0,\n      compressionRatio: 0\n    };\n\n    this.observers = {\n      progress: [],\n      memory: [],\n      error: []\n    };\n  }\n\n  // Add item to processor\n  async addItem(item) {\n    if (this.totalItems >= this.options.maxTotalItems) {\n      throw new Error(`Maximum items limit reached: ${this.options.maxTotalItems}`);\n    }\n\n    // Add metadata\n    const enhancedItem = {\n      ...item,\n      id: this.generateId(),\n      timestamp: Date.now(),\n      memoryId: this.memoryQueue.length\n    };\n\n    // Check memory limit\n    if (this.memoryQueue.length >= this.options.maxMemoryItems) {\n      await this.spillToDatabase();\n    }\n\n    // Enforce hard memory limit as safety net\n    if (this.memoryQueue.length >= this.MAX_MEMORY_QUEUE) {\n      this.memoryQueue.shift(); // Remove oldest entry (at beginning since using push)\n    }\n\n    this.memoryQueue.push(enhancedItem);\n    this.totalItems++;\n\n    // Update memory usage estimate\n    this.updateMemoryStats();\n\n    return enhancedItem.id;\n  }\n\n  // Add multiple items efficiently\n  async addItems(items) {\n    if (this.totalItems + items.length > this.options.maxTotalItems) {\n      throw new Error(`Adding ${items.length} items would exceed maximum limit: ${this.options.maxTotalItems}`);\n    }\n\n    const enhancedItems = items.map((item, index) => ({\n      ...item,\n      id: this.generateId(),\n      timestamp: Date.now(),\n      memoryId: this.memoryQueue.length + index\n    }));\n\n    // Check if we need to spill to database\n    if (this.memoryQueue.length + enhancedItems.length > this.options.maxMemoryItems) {\n      await this.spillToDatabase();\n    }\n\n    // Enforce hard memory limit as safety net - remove oldest entries if needed\n    while (this.memoryQueue.length + enhancedItems.length > this.MAX_MEMORY_QUEUE) {\n      this.memoryQueue.shift(); // Remove oldest entry (at beginning since using push)\n    }\n\n    this.memoryQueue.push(...enhancedItems);\n    this.totalItems += enhancedItems.length;\n\n    // Update memory usage estimate\n    this.updateMemoryStats();\n\n    return enhancedItems.map(item => item.id);\n  }\n\n  // Spill memory items to database (simplified)\n  async spillToDatabase() {\n    if (this.memoryQueue.length === 0) {return;}\n\n    try {\n      // Simplified spillover - just remove from memory for now\n      const itemsToSpill = this.memoryQueue.splice(0, this.options.spillBatchSize);\n      this.spilledItems += itemsToSpill.length;\n      this.stats.spillOperations++;\n      this.stats.dbUsage = this.spilledItems;\n\n      // Update memory stats\n      this.updateMemoryStats();\n\n      console.log(`\uD83D\uDCE4 Spilled ${itemsToSpill.length} items to reduce memory usage`);\n    } catch (error) {\n      console.error('Database spillover failed:', error);\n      throw error;\n    }\n  }\n\n  // Process items in batches\n  async processItems(processingFunction, options = {}) {\n    if (this.isProcessing) {\n      throw new Error('Processing already in progress');\n    }\n\n    this.isProcessing = true;\n    const results = [];\n\n    try {\n      // Process memory items\n      const batchSize = this.options.processingBatchSize;\n\n      for (let i = 0; i < this.memoryQueue.length; i += batchSize) {\n        const batch = this.memoryQueue.slice(i, i + batchSize);\n\n        try {\n          const processedBatch = await processingFunction(batch, options);\n          results.push(...processedBatch);\n        } catch (error) {\n          console.error('Batch processing failed:', error);\n        }\n      }\n\n      this.processedItems = results.length;\n      return results;\n\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  updateMemoryStats() {\n    // Simplified memory usage estimation\n    this.stats.memoryUsage = this.memoryQueue.length;\n    this.stats.totalProcessed = this.processedItems;\n  }\n\n  generateId() {\n    return `mem_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  getStats() {\n    return {\n      ...this.stats,\n      totalItems: this.totalItems,\n      memoryItems: this.memoryQueue.length,\n      spilledItems: this.spilledItems,\n      isProcessing: this.isProcessing\n    };\n  }\n\n  clear() {\n    this.memoryQueue = [];\n    this.totalItems = 0;\n    this.processedItems = 0;\n    this.spilledItems = 0;\n    this.stats = {\n      memoryUsage: 0,\n      dbUsage: 0,\n      totalProcessed: 0,\n      spillOperations: 0,\n      compressionRatio: 0\n    };\n    console.log('\uD83E\uDDF9 Memory processor cleared');\n  }\n}\n\n// =============================================================================\n// SITE PROFILE MANAGER - Simplified site profile management\n// =============================================================================\n\nclass SiteProfileManager {\n  constructor(options = {}) {\n    this.options = {\n      enableRemoteUpdates: options.enableRemoteUpdates !== false,\n      updateInterval: options.updateInterval || 86400000, // 24 hours\n      enableCustomProfiles: options.enableCustomProfiles !== false,\n      maxCustomProfiles: options.maxCustomProfiles || 100,\n      ...options\n    };\n\n    this.builtInProfiles = new Map();\n    this.customProfiles = new Map();\n    this.activeProfile = null;\n    this.lastUpdateCheck = 0;\n\n    this.initializeBuiltInProfiles();\n    this.loadCustomProfiles();\n  }\n\n  initializeBuiltInProfiles() {\n    // Getty Images profile\n    this.builtInProfiles.set('getty', {\n      id: 'getty',\n      name: 'Getty Images',\n      domains: ['gettyimages.com', 'gettyimages.co.uk', 'gettyimages.ca'],\n      selectors: {\n        gallery: 'figure img, [data-testid*=\"photo\"] img, .gallery-item img, .search-result img',\n        thumbnail: 'figure img, [data-testid*=\"photo\"] img',\n        fullSize: 'meta[property=\"og:image\"]',\n        title: 'img[alt], img[title], figcaption',\n        link: 'figure a, [data-testid*=\"photo\"] a',\n        pagination: '.pagination__next'\n      },\n      settings: {\n        waitTime: 2000,\n        maxScrollAttempts: 10,\n        useInfiniteScroll: true,\n        respectRobots: true\n      }\n    });\n\n    // Shutterstock profile\n    this.builtInProfiles.set('shutterstock', {\n      id: 'shutterstock',\n      name: 'Shutterstock',\n      domains: ['shutterstock.com'],\n      selectors: {\n        gallery: '[data-automation=\"AssetGrid-container\"] > div',\n        thumbnail: 'img[data-automation=\"asset-thumb\"]',\n        fullSize: 'meta[property=\"og:image\"]',\n        title: '[data-automation=\"asset-title\"]',\n        link: 'a[data-automation=\"asset-link\"]',\n        pagination: '[data-automation=\"pagination-next\"]'\n      },\n      settings: {\n        waitTime: 1500,\n        maxScrollAttempts: 15,\n        useInfiniteScroll: true,\n        respectRobots: true\n      }\n    });\n\n    // Unsplash profile\n    this.builtInProfiles.set('unsplash', {\n      id: 'unsplash',\n      name: 'Unsplash',\n      domains: ['unsplash.com'],\n      selectors: {\n        gallery: '[data-testid=\"photos-route\"] figure',\n        thumbnail: 'img[srcset]',\n        fullSize: 'img[srcset]',\n        title: 'img[alt]',\n        link: 'a[title]',\n        pagination: 'button[data-testid=\"load-more-button\"]'\n      },\n      settings: {\n        waitTime: 1000,\n        maxScrollAttempts: 20,\n        useInfiniteScroll: true,\n        respectRobots: false\n      }\n    });\n\n    console.log(`\uD83D\uDCC1 Initialized ${this.builtInProfiles.size} built-in site profiles`);\n  }\n\n  async loadCustomProfiles() {\n    try {\n      const stored = await chrome.storage.local.get('customSiteProfiles');\n      if (stored.customSiteProfiles) {\n        for (const [id, profile] of Object.entries(stored.customSiteProfiles)) {\n          this.customProfiles.set(id, profile);\n        }\n        console.log(`\uD83D\uDCC1 Loaded ${this.customProfiles.size} custom site profiles`);\n      }\n    } catch (error) {\n      console.error('Failed to load custom profiles:', error);\n    }\n  }\n\n  async saveCustomProfiles() {\n    try {\n      const profilesObj = {};\n      for (const [id, profile] of this.customProfiles) {\n        profilesObj[id] = profile;\n      }\n      await chrome.storage.local.set({ customSiteProfiles: profilesObj });\n      console.log('\uD83D\uDCBE Custom profiles saved');\n    } catch (error) {\n      console.error('Failed to save custom profiles:', error);\n      throw error;\n    }\n  }\n\n  detectSiteProfile(url) {\n    try {\n      const urlObj = new URL(url);\n      const domain = urlObj.hostname.toLowerCase();\n\n      // Check built-in profiles first\n      for (const profile of this.builtInProfiles.values()) {\n        if (profile.domains.some(d => domain.includes(d))) {\n          console.log(`\uD83D\uDD0D Detected site profile: ${profile.name} for ${domain}`);\n          return profile;\n        }\n      }\n\n      // Check custom profiles\n      for (const profile of this.customProfiles.values()) {\n        if (profile.domains?.some(d => domain.includes(d))) {\n          console.log(`\uD83D\uDD0D Detected custom profile: ${profile.name} for ${domain}`);\n          return profile;\n        }\n      }\n\n      console.log(`\u2753 No site profile found for ${domain}`);\n      return null;\n    } catch (error) {\n      console.warn('Error detecting site profile:', error);\n      return null;\n    }\n  }\n\n  getProfile(profileId) {\n    return this.builtInProfiles.get(profileId) ||\n           this.customProfiles.get(profileId);\n  }\n\n  getAllProfiles() {\n    const profiles = [];\n\n    // Add built-in profiles\n    for (const profile of this.builtInProfiles.values()) {\n      profiles.push({ ...profile, type: 'built-in' });\n    }\n\n    // Add custom profiles\n    for (const profile of this.customProfiles.values()) {\n      profiles.push({ ...profile, type: 'custom' });\n    }\n\n    return profiles;\n  }\n\n  // Get profile statistics\n  getStats() {\n    return {\n      builtIn: this.builtInProfiles.size,\n      custom: this.customProfiles.size,\n      total: this.builtInProfiles.size + this.customProfiles.size,\n      lastUpdate: this.lastUpdateCheck\n    };\n  }\n}\n\n// =============================================================================\n// CONSOLIDATED BACKGROUND MANAGER\n// =============================================================================\n\n// Create unified background manager\nconst ConsolidatedBackgroundManager = {\n  // Component instances\n  downloadManager: null,\n  messageHandler: null,\n  downloadQueue: null,\n  batchManager: null,\n  memoryProcessor: null,\n  siteProfileManager: null,\n  exportSystem: null,\n  \n  // Initialize all components\n  initializeAll: function(options = {}) {\n    console.log('\uD83D\uDE80 Initializing Consolidated Background Manager...');\n    \n    try {\n      this.downloadManager = new SimpleDownloadManager(options.download || {});\n      this.messageHandler = SimpleMessageHandler.getInstance();\n      this.downloadQueue = new StepTwoDownloadQueue(options.queue || {});\n      this.batchManager = new BatchOperationsManager(options.batch || {});\n      this.memoryProcessor = new MemoryOptimizedProcessor(options.memory || {});\n      this.siteProfileManager = new SiteProfileManager(options.profiles || {});\n      \n      // Initialize export system first\n      this.exportSystem = new AdvancedExportSystem(options.export || {});\n      \n      // Initialize message handler with download manager and export system\n      this.messageHandler.initialize(this.downloadManager, this.exportSystem);\n      \n      console.log('\u2705 All consolidated background components initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('\u274C Failed to initialize consolidated background components:', error);\n      \n      const enhancedError = new Error(`[Consolidated Background Initialization] ${error.message}`);\n      enhancedError.originalError = error;\n      enhancedError.context = 'initializeAll';\n      enhancedError.timestamp = Date.now();\n      throw enhancedError;\n    }\n  },\n  \n  // Get combined metrics\n  getMetrics: function() {\n    return {\n      download: this.downloadManager?.getStats(),\n      queue: this.downloadQueue?.getStats(),\n      batch: this.batchManager?.getActiveBatches(),\n      memory: this.memoryProcessor?.getStats(),\n      profiles: this.siteProfileManager?.getStats(),\n      timestamp: Date.now()\n    };\n  }\n};// background-utilities.js - Consolidated utility functions for STEPTWO V2 background scripts\n// Combines utils.js, filename-mask.js, and keyboard-shortcuts.js to reduce file count\n\n// =============================================================================\n// COMMON UTILITIES (from utils.js)\n// =============================================================================\n\nclass StepTwoUtils {\n  // URL validation and parsing\n  static isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  static getHostname(url) {\n    try {\n      return new URL(url).hostname;\n    } catch {\n      return '';\n    }\n  }\n\n  static getFileExtension(url) {\n    try {\n      const pathname = new URL(url).pathname;\n      const ext = pathname.split('.').pop().toLowerCase();\n      return ext && ext.length <= 4 ? ext : '';\n    } catch {\n      return '';\n    }\n  }\n\n  // Enhanced URL normalization\n  static normalizeUrl(url, options = {}) {\n    if (!url || typeof url !== 'string') {return null;}\n\n    try {\n      // Clean the URL\n      let cleanUrl = url.trim().replace(/^['\"]|['\"]$/g, '');\n\n      // Handle data URLs\n      if (cleanUrl.startsWith('data:')) {\n        return options.allowDataUrls !== false ? cleanUrl : null;\n      }\n\n      // Handle protocol-relative URLs\n      if (cleanUrl.startsWith('//')) {\n        cleanUrl = 'https:' + cleanUrl;\n      }\n\n      // Handle relative URLs - need base URL for background scripts\n      if (!cleanUrl.match(/^https?:/)) {\n        return null; // Can't resolve relative URLs in background context\n      }\n\n      const urlObj = new URL(cleanUrl);\n\n      // Normalize protocol to HTTPS if requested\n      if (options.forceHttps && urlObj.protocol === 'http:') {\n        urlObj.protocol = 'https:';\n      }\n\n      // Handle query parameters\n      if (options.removeQueryParams) {\n        urlObj.search = '';\n      }\n\n      // Handle fragments\n      if (options.removeFragment) {\n        urlObj.hash = '';\n      }\n\n      return urlObj.href;\n    } catch {\n      return null;\n    }\n  }\n\n  // Image validation\n  static isImageUrl(url) {\n    const imageExts = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'tiff', 'ico'];\n    const ext = this.getFileExtension(url);\n    return imageExts.includes(ext);\n  }\n\n  static isValidImageSize(width, height, minWidth = 0, minHeight = 0) {\n    return width >= minWidth && height >= minHeight;\n  }\n\n  // Filter utilities\n  static createDefaultFilters() {\n    return {\n      minWidth: 0,\n      minHeight: 0,\n      maxSize: 0, // 0 means no limit\n      allowedTypes: ['jpg', 'jpeg', 'png', 'webp', 'gif', 'svg'],\n      skipDuplicates: false,\n      maxResults: 1000\n    };\n  }\n\n  // Version comparison utility\n  static compareVersions(v1, v2) {\n    const parts1 = v1.split('.').map(Number);\n    const parts2 = v2.split('.').map(Number);\n    const maxLength = Math.max(parts1.length, parts2.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      const part1 = parts1[i] || 0;\n      const part2 = parts2[i] || 0;\n\n      if (part1 < part2) {return -1;}\n      if (part1 > part2) {return 1;}\n    }\n\n    return 0;\n  }\n}\n\n// =============================================================================\n// FILENAME MASK UTILITIES (from filename-mask.js)\n// =============================================================================\n\nlet globalCounter = 0;\nlet siteCounters = {};\nlet sessionCounters = {};\n\nfunction sanitizeFilename(name) {\n  // Remove or replace invalid characters for file names\n  // Avoid regex control character warnings by using a safer approach\n  const invalidChars = /[<>:\"/\\\\|?*]/g;\n\n  return name.replace(invalidChars, '_')\n    .replace(/[^\\x20-\\x7E]/g, '_') // Non-printable ASCII characters\n    .replace(/\\.$/, '_')  // Remove trailing dot\n    .slice(0, 255);       // Limit length\n}\n\nfunction extractDomain(host) {\n  if (!host) {return '';}\n  return host.split('.').slice(-2).join('.');\n}\n\nfunction parseSubdirs(url) {\n  try {\n    const pathname = new URL(url).pathname;\n    const dirs = pathname.split('/').filter(Boolean);\n    return dirs.slice(0, -1).join('_'); // Exclude filename\n  } catch {\n    return '';\n  }\n}\n\nfunction parseUrl(url) {\n  try {\n    const urlObj = new URL(url);\n    return {\n      path: urlObj.pathname,\n      query: urlObj.search.slice(1), // Remove '?'\n      hash: urlObj.hash.slice(1)     // Remove '#'\n    };\n  } catch {\n    return { path: '', query: '', hash: '' };\n  }\n}\n\nfunction applyMask(mask, ctx) {\n  if (!mask) {return ctx.name + (ctx.ext ? `.${ctx.ext}` : '');}\n\n  const now = new Date();\n  const dateStr = now.toISOString().slice(0,10).replace(/-/g,''); // YYYYMMDD\n  const timeStr = now.toTimeString().slice(0,8).replace(/:/g,''); // HHMMSS\n  const timestamp = now.getTime().toString();\n\n  // Get appropriate counter\n  const siteKey = ctx.host || 'global';\n  if (!siteCounters[siteKey]) {siteCounters[siteKey] = 0;}\n  if (!sessionCounters[siteKey]) {sessionCounters[siteKey] = 0;}\n\n  const counter = ctx.num || ++siteCounters[siteKey];\n  const sessionCounter = ++sessionCounters[siteKey];\n  globalCounter = Math.max(globalCounter, counter);\n\n  let out = mask;\n  const replace = (token, value) => {\n    out = out.replace(new RegExp(`\\\\*${token}\\\\*`,'gi'), sanitizeFilename(String(value || '')));\n  };\n\n  // Core tokens\n  replace('name', ctx.name || 'untitled');\n  replace('num', String(counter).padStart(3,'0'));\n  replace('ext', ctx.ext || '');\n  replace('date', dateStr);\n  replace('time', timeStr);\n  replace('timestamp', timestamp);\n  replace('host', ctx.host || '');\n  replace('domain', extractDomain(ctx.host || ctx.url || ''));\n  replace('subdirs', parseSubdirs(ctx.subdirs || ctx.url || ''));\n\n  // Enhanced URL parsing tokens\n  if (ctx.url) {\n    const urlParts = parseUrl(ctx.url);\n    replace('url', ctx.url);\n    replace('path', urlParts.path);\n    replace('query', urlParts.query);\n    replace('hash', urlParts.hash);\n  } else {\n    replace('url', '');\n    replace('path', '');\n    replace('query', '');\n    replace('hash', '');\n  }\n\n  // Additional context tokens\n  replace('caption', ctx.caption || '');\n  replace('id', ctx.id || '');\n  replace('resolution', ctx.resolution || '');\n  replace('size', ctx.size || '');\n  replace('type', ctx.type || '');\n  replace('index', ctx.index || counter);\n  replace('session', sessionCounter);\n  replace('global', globalCounter);\n\n  return out;\n}\n\nfunction resetCounters() {\n  globalCounter = 0;\n  siteCounters = {};\n  sessionCounters = {};\n}\n\nfunction getCounterStats() {\n  return {\n    global: globalCounter,\n    sites: Object.keys(siteCounters).length,\n    session: Object.keys(sessionCounters).length\n  };\n}\n\n// =============================================================================\n// KEYBOARD SHORTCUTS (from keyboard-shortcuts.js)\n// =============================================================================\n\nclass KeyboardShortcuts {\n  constructor() {\n    this.shortcuts = new Map();\n    this.setupShortcuts();\n  }\n\n  setupShortcuts() {\n    // Register available commands\n    this.shortcuts.set('start-scraper', {\n      action: 'startScraper',\n      description: 'Start gallery scraper'\n    });\n\n    this.shortcuts.set('toggle-selector', {\n      action: 'toggleSelector',\n      description: 'Toggle selector mode'\n    });\n\n    this.shortcuts.set('open-dashboard', {\n      action: 'openDashboard',\n      description: 'Open dashboard'\n    });\n\n    console.log('Keyboard shortcuts initialized:', Array.from(this.shortcuts.keys()));\n  }\n\n  async handleCommand(command, tab) {\n    try {\n      console.log('Keyboard shortcut triggered:', command);\n\n      const shortcut = this.shortcuts.get(command);\n      if (!shortcut) {\n        console.warn('Unknown keyboard shortcut:', command);\n        return;\n      }\n\n      switch (shortcut.action) {\n      case 'startScraper':\n        await this.handleStartScraper(tab);\n        break;\n\n      case 'toggleSelector':\n        await this.handleToggleSelector(tab);\n        break;\n\n      case 'openDashboard':\n        await this.handleOpenDashboard(tab);\n        break;\n\n      default:\n        console.warn('Unhandled shortcut action:', shortcut.action);\n      }\n    } catch (error) {\n      console.error('Error handling keyboard shortcut:', error);\n    }\n  }\n\n  async handleStartScraper(_tab) {\n    try {\n      // Inject scraper and start scraping\n      await chrome.tabs.sendMessage(_tab.id, {\n        action: 'startScraping',\n        source: 'keyboard_shortcut'\n      });\n\n      // Show notification\n      chrome.notifications.create('scraper-started', {\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'STEPTWO V2',\n        message: 'Scraper started via keyboard shortcut'\n      });\n    } catch (error) {\n      console.error('Error starting scraper via shortcut:', error);\n    }\n  }\n\n  async handleToggleSelector(tab) {\n    try {\n      // Toggle element selector mode\n      await chrome.tabs.sendMessage(tab.id, {\n        action: 'toggleSelector',\n        source: 'keyboard_shortcut'\n      });\n    } catch (error) {\n      console.error('Error toggling selector via shortcut:', error);\n    }\n  }\n\n  async handleOpenDashboard(_tab) {\n    try {\n      // Open dashboard in new tab\n      await chrome.tabs.create({\n        url: chrome.runtime.getURL('ui/windowed-dashboard.html'),\n        active: true\n      });\n    } catch (error) {\n      console.error('Error opening dashboard via shortcut:', error);\n    }\n  }\n\n  // Get all registered shortcuts\n  getShortcuts() {\n    return Array.from(this.shortcuts.entries()).map(([command, data]) => ({\n      command,\n      action: data.action,\n      description: data.description\n    }));\n  }\n}\n\n// =============================================================================\n// CONTEXT MENU MANAGER (from context-menu-manager.js)\n// =============================================================================\n\nclass ContextMenuManager {\n  // Static properties for singleton pattern to prevent duplicate menu creation\n  static _initializationPromise = null;\n  static _isInitialized = false;\n  static _listenerRegistered = false;\n\n  constructor() {\n    this.menuItems = new Map();\n    this.isInitialized = false;\n\n    // CR-002: Store listener reference for cleanup\n    this.menuClickListener = null;\n  }\n\n  async setupContextMenus() {\n    try {\n      // Check static _isInitialized flag first (not instance flag)\n      if (ContextMenuManager._isInitialized) {\n        console.log('\u26A0\uFE0F Context menus already initialized globally, skipping');\n        return;\n      }\n\n      // If initialization in progress, await it and return\n      if (ContextMenuManager._initializationPromise) {\n        console.log('\u23F3 Context menu initialization already in progress, waiting...');\n        await ContextMenuManager._initializationPromise;\n        return;\n      }\n\n      // Create new _initializationPromise and call _performSetup()\n      console.log('\uD83D\uDD27 Starting context menu initialization...');\n      ContextMenuManager._initializationPromise = this._performSetup();\n      await ContextMenuManager._initializationPromise;\n      \n    } catch (error) {\n      console.error('\u274C Failed to setup context menus:', error);\n      ContextMenuManager._initializationPromise = null;\n    }\n  }\n\n  async _performSetup() {\n    try {\n      // Check if chrome.contextMenus API is available\n      if (!chrome.contextMenus) {\n        console.warn('Context menus API not available');\n        return;\n      }\n\n      // Call await chrome.contextMenus.removeAll()\n      await chrome.contextMenus.removeAll();\n      \n      // Check chrome.runtime.lastError after removeAll\n      if (chrome.runtime.lastError) {\n        console.warn('Error removing existing menus:', chrome.runtime.lastError);\n      }\n\n      // Main menu items (keep existing menu item definitions)\n      const menuItems = [\n        {\n          id: 'steptwo-scan-page',\n          title: 'Scan page for images',\n          contexts: ['page'],\n          documentUrlPatterns: ['http://*/*', 'https://*/*']\n        },\n        {\n          id: 'steptwo-separator-1',\n          type: 'separator',\n          contexts: ['page']\n        },\n        {\n          id: 'steptwo-add-image',\n          title: 'Add to queue',\n          contexts: ['image'],\n          documentUrlPatterns: ['http://*/*', 'https://*/*']\n        },\n        {\n          id: 'steptwo-add-all-images',\n          title: 'Add all images',\n          contexts: ['page'],\n          documentUrlPatterns: ['http://*/*', 'https://*/*']\n        },\n        {\n          id: 'steptwo-separator-2',\n          type: 'separator',\n          contexts: ['page', 'image']\n        },\n        {\n          id: 'steptwo-open-dashboard',\n          title: 'Open dashboard',\n          contexts: ['page', 'image'],\n          documentUrlPatterns: ['http://*/*', 'https://*/*']\n        },\n        {\n          id: 'steptwo-separator-3',\n          type: 'separator',\n          contexts: ['page', 'image']\n        },\n        {\n          id: 'steptwo-options',\n          title: 'Options',\n          contexts: ['page', 'image'],\n          documentUrlPatterns: ['http://*/*', 'https://*/*']\n        }\n      ];\n\n      // Create all menu items\n      for (const item of menuItems) {\n        await this.createMenuItem(item);\n      }\n\n      // Register onClicked listener only if not already registered (use static _listenerRegistered flag)\n      if (!ContextMenuManager._listenerRegistered) {\n        // CR-002: Store bound listener reference maintaining proper 'this' context\n        this.menuClickListener = (info, tab) => {\n          this.handleMenuClick(info, tab);\n        };\n        \n        chrome.contextMenus.onClicked.addListener(this.menuClickListener);\n        ContextMenuManager._listenerRegistered = true;\n        console.log('\u2705 Context menu listener registered');\n      }\n\n      // Set static _isInitialized = true at the end\n      ContextMenuManager._isInitialized = true;\n      this.isInitialized = true;\n      console.log('\u2705 Context menus initialized successfully');\n      \n    } catch (error) {\n      console.error('\u274C Error in _performSetup:', error);\n      throw error;\n    }\n  }\n\n  async createMenuItem(item) {\n    try {\n      chrome.contextMenus.create(item);\n      \n      // Check and log chrome.runtime.lastError after calling chrome.contextMenus.create()\n      if (chrome.runtime.lastError) {\n        console.error(`Error creating menu item ${item.id}:`, chrome.runtime.lastError);\n      } else {\n        this.menuItems.set(item.id, item);\n      }\n    } catch (error) {\n      console.error(`Failed to create menu item ${item.id}:`, error);\n    }\n  }\n\n  async handleMenuClick(info, tab) {\n    try {\n      console.log('Context menu clicked:', info.menuItemId, info);\n\n      switch (info.menuItemId) {\n      case 'steptwo-scan-page':\n        await this.handleScanPage(tab);\n        break;\n\n      case 'steptwo-add-image':\n        await this.handleAddImage(info, tab);\n        break;\n\n      case 'steptwo-add-all-images':\n        await this.handleAddAllImages(tab);\n        break;\n\n      case 'steptwo-open-dashboard':\n        await this.handleOpenDashboard();\n        break;\n\n      case 'steptwo-options':\n        await this.handleOpenOptions();\n        break;\n\n      default:\n        console.warn('Unknown context menu item:', info.menuItemId);\n      }\n    } catch (error) {\n      console.error('Context menu action failed:', error);\n    }\n  }\n\n  async handleScanPage(tab) {\n    try {\n      // Inject content script and start scanning\n      await chrome.tabs.sendMessage(tab.id, {\n        action: 'startScraping',\n        source: 'context_menu'\n      });\n\n      // Show notification\n      chrome.notifications.create('scan-started', {\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'STEPTWO V2',\n        message: 'Page scanning started'\n      });\n    } catch (error) {\n      console.error('Failed to scan page:', error);\n    }\n  }\n\n  async handleAddImage(info, tab) {\n    try {\n      if (info.srcUrl) {\n        // Add single image to queue\n        await chrome.tabs.sendMessage(tab.id, {\n          action: 'addImageToQueue',\n          imageUrl: info.srcUrl,\n          source: 'context_menu'\n        });\n\n        chrome.notifications.create('image-added', {\n          type: 'basic',\n          iconUrl: 'icons/48.png',\n          title: 'STEPTWO V2',\n          message: 'Image added to queue'\n        });\n      }\n    } catch (error) {\n      console.error('Failed to add image:', error);\n    }\n  }\n\n  async handleAddAllImages(tab) {\n    try {\n      await chrome.tabs.sendMessage(tab.id, {\n        action: 'addAllImages',\n        source: 'context_menu'\n      });\n\n      chrome.notifications.create('all-images-added', {\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'STEPTWO V2',\n        message: 'All images added to queue'\n      });\n    } catch (error) {\n      console.error('Failed to add all images:', error);\n    }\n  }\n\n  async handleOpenDashboard() {\n    try {\n      await chrome.tabs.create({\n        url: chrome.runtime.getURL('ui/windowed-dashboard.html'),\n        active: true\n      });\n    } catch (error) {\n      console.error('Failed to open dashboard:', error);\n    }\n  }\n\n  async handleOpenOptions() {\n    try {\n      await chrome.tabs.create({\n        url: chrome.runtime.getURL('ui/options.html'),\n        active: true\n      });\n    } catch (error) {\n      console.error('Failed to open options:', error);\n    }\n  }\n\n  getMenuItems() {\n    return Array.from(this.menuItems.values());\n  }\n\n  isReady() {\n    return this.isInitialized;\n  }\n\n  // CR-002: Cleanup method to remove event listener\n  cleanup() {\n    if (this.menuClickListener && chrome.contextMenus && chrome.contextMenus.onClicked) {\n      try {\n        chrome.contextMenus.onClicked.removeListener(this.menuClickListener);\n        this.menuClickListener = null;\n        this.isInitialized = false;\n        console.log('\u2705 Context menu listener cleaned up');\n      } catch (error) {\n        console.error('Failed to remove context menu listener:', error);\n      }\n    }\n  }\n}\n\n// =============================================================================\n// UPDATED EXPORTS FOR BOTH ES MODULES AND IMPORTSCRIPTS\n// =============================================================================\n\n// Support both ES modules and legacy importScripts\nif (typeof self !== 'undefined') {\n  // Service Worker/importScripts environment\n  self.StepTwoUtils = StepTwoUtils;\n  self.applyMask = applyMask;\n  self.resetCounters = resetCounters;\n  self.getCounterStats = getCounterStats;\n  self.KeyboardShortcuts = KeyboardShortcuts;\n  self.ContextMenuManager = ContextMenuManager;\n}\n\n// ES modules export (commented out for importScripts compatibility)\n// export { StepTwoUtils, applyMask, resetCounters, getCounterStats, KeyboardShortcuts };\n// enhanced-error-handling.js - 5-Layer Fallback Error Handling System for STEPTWO\n// Implements bulletproof image fetching with comprehensive recovery mechanisms\n// Enterprise-grade reliability with intelligent error classification and recovery\n\nconsole.log('\uD83D\uDEE1\uFE0F Loading Enhanced Error Handling System...');\n\n/**\n * Enhanced Error Handling System\n * Implements 5-layer fallback mechanisms with comprehensive error recovery\n */\nclass EnhancedErrorHandling {\n  constructor(options = {}) {\n    this.options = {\n      // Fallback system configuration\n      enableLayer1DirectFetch: options.enableLayer1DirectFetch !== false,\n      enableLayer2CORSWorkaround: options.enableLayer2CORSWorkaround !== false,\n      enableLayer3CredentialedFetch: options.enableLayer3CredentialedFetch !== false,\n      enableLayer4CanvasCapture: options.enableLayer4CanvasCapture !== false,\n      enableLayer5ProxyFetch: options.enableLayer5ProxyFetch !== false,\n      \n      // Timeout configuration (exponential backoff)\n      layer1Timeout: options.layer1Timeout || 5000,\n      layer2Timeout: options.layer2Timeout || 8000,\n      layer3Timeout: options.layer3Timeout || 12000,\n      layer4Timeout: options.layer4Timeout || 15000,\n      layer5Timeout: options.layer5Timeout || 20000,\n      \n      // Retry configuration\n      maxRetryAttempts: options.maxRetryAttempts || 3,\n      retryDelayBase: options.retryDelayBase || 1000,\n      retryDelayMax: options.retryDelayMax || 10000,\n      \n      // Concurrency limits\n      maxConcurrentRequests: options.maxConcurrentRequests || 5,\n      batchSize: options.batchSize || 10,\n      batchDelay: options.batchDelay || 100,\n      \n      // Circuit breaker configuration\n      circuitBreakerThreshold: options.circuitBreakerThreshold || 10,\n      circuitBreakerTimeout: options.circuitBreakerTimeout || 60000,\n      \n      // Memory management\n      memoryThreshold: options.memoryThreshold || 200 * 1024 * 1024, // 200MB\n      enableMemoryManagement: options.enableMemoryManagement !== false,\n      garbageCollectionInterval: options.garbageCollectionInterval || 30000,\n      \n      // User notifications\n      enableProgressTracking: options.enableProgressTracking !== false,\n      enableUserNotifications: options.enableUserNotifications !== false,\n      enableDetailedLogging: options.enableDetailedLogging !== false,\n      \n      // Proxy configuration\n      proxyServices: options.proxyServices || [\n        'https://api.allorigins.win/get?url=',\n        'https://cors-anywhere.herokuapp.com/',\n        'https://api.codetabs.com/v1/proxy?quest='\n      ],\n      \n      ...options\n    };\n\n    // Error classification system\n    this.errorClassifier = {\n      network: ['NetworkError', 'TypeError', 'Failed to fetch', 'ERR_NETWORK'],\n      timeout: ['TimeoutError', 'Request timeout', 'ERR_TIMED_OUT'],\n      cors: ['CORS', 'Cross-Origin', 'ERR_BLOCKED_BY_CLIENT'],\n      permission: ['ERR_BLOCKED_BY_RESPONSE', '403', '401', 'Forbidden'],\n      rateLimit: ['429', 'Too Many Requests', 'Rate limit'],\n      server: ['500', '502', '503', '504', 'Internal Server Error'],\n      notFound: ['404', 'Not Found', 'ERR_FILE_NOT_FOUND'],\n      format: ['Invalid image', 'Unsupported format', 'Corrupted'],\n      memory: ['Out of memory', 'Memory limit', 'ERR_INSUFFICIENT_RESOURCES']\n    };\n\n    // State management\n    this.activeRequests = new Map();\n    this.requestQueue = [];\n    this.completedRequests = new Map();\n    this.failedRequests = new Map();\n    this.circuitBreakers = new Map();\n    \n    // Performance tracking\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      layerUsageStats: {\n        layer1: { attempts: 0, successes: 0, failures: 0 },\n        layer2: { attempts: 0, successes: 0, failures: 0 },\n        layer3: { attempts: 0, successes: 0, failures: 0 },\n        layer4: { attempts: 0, successes: 0, failures: 0 },\n        layer5: { attempts: 0, successes: 0, failures: 0 }\n      },\n      errorTypes: {},\n      averageProcessingTime: 0,\n      memoryUsage: 0,\n      concurrencyUtilization: 0\n    };\n\n    // Progress tracking for UI integration\n    this.progressCallbacks = new Set();\n    this.errorReportCallbacks = new Set();\n    \n    // Memory management\n    this.memoryWatcher = null;\n    this.lastMemoryCheck = Date.now();\n    \n    // Initialize systems\n    this.initializeErrorHandling();\n    this.startMemoryManagement();\n    \n    console.log('\u2705 Enhanced Error Handling System initialized with 5-layer fallback');\n  }\n\n  // =============================================================================\n  // MAIN ENTRY POINT - ENHANCED IMAGE FETCHING\n  // =============================================================================\n\n  /**\n   * Enhanced fetch with 5-layer fallback system\n   * @param {string} url - Image URL to fetch\n   * @param {Object} options - Fetch options and metadata\n   * @returns {Promise<Object>} - Result with data or error information\n   */\n  async enhancedFetch(url, options = {}) {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n    \n    try {\n      // Validate input\n      if (!url || typeof url !== 'string') {\n        throw new Error('Invalid URL provided');\n      }\n\n      // Check circuit breaker\n      if (this.isCircuitBreakerOpen(url)) {\n        throw new Error(`Circuit breaker open for ${this.getDomainFromUrl(url)}`);\n      }\n\n      // Initialize request tracking\n      this.activeRequests.set(requestId, {\n        url,\n        startTime,\n        attempts: 0,\n        currentLayer: 1,\n        errors: []\n      });\n\n      this.metrics.totalRequests++;\n      this.updateProgress(requestId, 0, 'Starting enhanced fetch...');\n\n      // Execute 5-layer fallback system\n      const result = await this.executeFallbackLayers(url, options, requestId);\n      \n      // Success - update metrics and cleanup\n      this.metrics.successfulRequests++;\n      this.completedRequests.set(requestId, result);\n      this.activeRequests.delete(requestId);\n      \n      const processingTime = Date.now() - startTime;\n      this.updateProcessingTimeMetrics(processingTime);\n      \n      this.updateProgress(requestId, 100, 'Fetch completed successfully');\n      \n      return {\n        success: true,\n        requestId,\n        data: result.data,\n        layer: result.layer,\n        processingTime,\n        attempts: result.attempts,\n        metadata: result.metadata\n      };\n\n    } catch (error) {\n      // Failure - update metrics and error tracking\n      this.metrics.failedRequests++;\n      this.updateErrorMetrics(error);\n      \n      const requestData = this.activeRequests.get(requestId);\n      this.failedRequests.set(requestId, {\n        url,\n        error: error.message,\n        attempts: requestData?.attempts || 0,\n        processingTime: Date.now() - startTime,\n        errors: requestData?.errors || []\n      });\n      \n      this.activeRequests.delete(requestId);\n      this.updateCircuitBreaker(url, false);\n      \n      this.updateProgress(requestId, 100, `Fetch failed: ${this.getUserFriendlyError(error.message)}`);\n      \n      return {\n        success: false,\n        requestId,\n        error: error.message,\n        errorType: this.classifyError(error.message),\n        processingTime: Date.now() - startTime,\n        attempts: requestData?.attempts || 0,\n        suggestions: this.getErrorSuggestions(error.message)\n      };\n    }\n  }\n\n  /**\n   * Execute all 5 fallback layers in sequence\n   */\n  async executeFallbackLayers(url, options, requestId) {\n    const layers = [\n      { name: 'layer1', method: 'directFetch', enabled: this.options.enableLayer1DirectFetch },\n      { name: 'layer2', method: 'corsWorkaround', enabled: this.options.enableLayer2CORSWorkaround },\n      { name: 'layer3', method: 'credentialedFetch', enabled: this.options.enableLayer3CredentialedFetch },\n      { name: 'layer4', method: 'canvasCapture', enabled: this.options.enableLayer4CanvasCapture },\n      { name: 'layer5', method: 'proxyFetch', enabled: this.options.enableLayer5ProxyFetch }\n    ];\n\n    const requestData = this.activeRequests.get(requestId);\n    let lastError = null;\n\n    for (const layer of layers) {\n      if (!layer.enabled) {\n        console.log(`\u23ED\uFE0F Layer ${layer.name} disabled, skipping...`);\n        continue;\n      }\n\n      try {\n        requestData.currentLayer = parseInt(layer.name.replace('layer', ''));\n        requestData.attempts++;\n        \n        this.metrics.layerUsageStats[layer.name].attempts++;\n        \n        this.updateProgress(requestId, \n          (requestData.currentLayer - 1) * 20, \n          `Attempting ${layer.name}: ${layer.method}`);\n\n        console.log(`\uD83D\uDD04 Executing ${layer.name}: ${layer.method} for ${url}`);\n        \n        const result = await this[layer.method](url, options, requestId);\n        \n        // Success!\n        this.metrics.layerUsageStats[layer.name].successes++;\n        this.updateCircuitBreaker(url, true);\n        \n        return {\n          data: result,\n          layer: layer.name,\n          attempts: requestData.attempts,\n          metadata: {\n            method: layer.method,\n            finalLayer: layer.name,\n            totalLayers: layers.length\n          }\n        };\n\n      } catch (error) {\n        lastError = error;\n        this.metrics.layerUsageStats[layer.name].failures++;\n        requestData.errors.push({\n          layer: layer.name,\n          method: layer.method,\n          error: error.message,\n          timestamp: Date.now()\n        });\n\n        console.warn(`\u274C ${layer.name} failed:`, error.message);\n        \n        // Add retry logic for transient errors\n        if (this.isTransientError(error.message) && requestData.attempts < this.options.maxRetryAttempts) {\n          const retryDelay = this.calculateRetryDelay(requestData.attempts);\n          console.log(`\uD83D\uDD04 Retrying ${layer.name} in ${retryDelay}ms...`);\n          \n          await this.delay(retryDelay);\n          // Don't increment layer, retry same layer\n          requestData.attempts++;\n          continue;\n        }\n      }\n    }\n\n    // All layers failed\n    throw new Error(`All fallback layers failed. Last error: ${lastError?.message || 'Unknown error'}`);\n  }\n\n  // =============================================================================\n  // LAYER 1 - DIRECT FETCH\n  // =============================================================================\n\n  /**\n   * Layer 1: Standard fetch with proper headers\n   */\n  async directFetch(url, options, requestId) {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.options.layer1Timeout);\n\n    try {\n      const fetchOptions = {\n        method: 'GET',\n        signal: controller.signal,\n        headers: {\n          'Accept': 'image/*,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Referer': window.location.href,\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache',\n          ...options.headers\n        },\n        ...options.fetchOptions\n      };\n\n      const response = await fetch(url, fetchOptions);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType && !this.isValidImageContentType(contentType)) {\n        throw new Error(`Invalid content type: ${contentType}`);\n      }\n\n      const blob = await response.blob();\n      \n      // Validate blob\n      if (blob.size < 100) {\n        throw new Error('Image too small, likely corrupted');\n      }\n\n      return blob;\n\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  // =============================================================================\n  // LAYER 2 - CORS WORKAROUND\n  // =============================================================================\n\n  /**\n   * Layer 2: CORS workaround with alternative headers and no-cors mode\n   */\n  async corsWorkaround(url, options, requestId) {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.options.layer2Timeout);\n\n    try {\n      // Try no-cors mode first\n      const noCorsOptions = {\n        method: 'GET',\n        mode: 'no-cors',\n        signal: controller.signal,\n        headers: {\n          'Accept': '*/*',\n          ...options.headers\n        }\n      };\n\n      const response = await fetch(url, noCorsOptions);\n      \n      // In no-cors mode, we can't check response status, so try to get blob\n      const blob = await response.blob();\n      \n      if (blob.size === 0) {\n        throw new Error('No-cors fetch returned empty response');\n      }\n\n      return blob;\n\n    } catch (error) {\n      // Try alternative headers approach\n      const altHeadersOptions = {\n        method: 'GET',\n        signal: controller.signal,\n        credentials: 'omit',\n        headers: {\n          'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',\n          'Accept-Encoding': 'gzip, deflate, br',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'Sec-Fetch-Dest': 'image',\n          'Sec-Fetch-Mode': 'cors',\n          'Sec-Fetch-Site': 'cross-site',\n          ...options.headers\n        }\n      };\n\n      const response = await fetch(url, altHeadersOptions);\n      \n      if (!response.ok) {\n        throw new Error(`Alternative headers failed: HTTP ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      return blob;\n\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  // =============================================================================\n  // LAYER 3 - CREDENTIALED FETCH\n  // =============================================================================\n\n  /**\n   * Layer 3: Include credentials and try alternative origins\n   */\n  async credentialedFetch(url, options, requestId) {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.options.layer3Timeout);\n\n    try {\n      // Try with credentials included\n      const credentialedOptions = {\n        method: 'GET',\n        credentials: 'include',\n        signal: controller.signal,\n        headers: {\n          'Accept': 'image/*,*/*;q=0.8',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n          'Referer': this.getAlternativeReferer(url),\n          'Origin': this.getAlternativeOrigin(url),\n          'X-Requested-With': 'XMLHttpRequest',\n          ...options.headers\n        }\n      };\n\n      const response = await fetch(url, credentialedOptions);\n      \n      if (!response.ok) {\n        throw new Error(`Credentialed fetch failed: HTTP ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      return blob;\n\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  // =============================================================================\n  // LAYER 4 - CANVAS CAPTURE\n  // =============================================================================\n\n  /**\n   * Layer 4: Render image in canvas and extract as blob\n   */\n  async canvasCapture(url, options, requestId) {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Canvas capture timeout'));\n      }, this.options.layer4Timeout);\n\n      try {\n        const img = new Image();\n        \n        // Set up cross-origin handling\n        img.crossOrigin = 'anonymous';\n        \n        img.onload = () => {\n          try {\n            clearTimeout(timeout);\n            \n            // Create canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            \n            // Set canvas dimensions\n            canvas.width = img.naturalWidth || img.width;\n            canvas.height = img.naturalHeight || img.height;\n            \n            // Draw image to canvas\n            ctx.drawImage(img, 0, 0);\n            \n            // Extract as blob\n            canvas.toBlob((blob) => {\n              if (blob) {\n                resolve(blob);\n              } else {\n                reject(new Error('Canvas toBlob failed'));\n              }\n            }, 'image/png', 0.9);\n            \n          } catch (error) {\n            clearTimeout(timeout);\n            reject(new Error(`Canvas processing failed: ${error.message}`));\n          }\n        };\n        \n        img.onerror = () => {\n          clearTimeout(timeout);\n          reject(new Error('Image failed to load for canvas capture'));\n        };\n        \n        // Start loading\n        img.src = url;\n        \n      } catch (error) {\n        clearTimeout(timeout);\n        reject(new Error(`Canvas capture setup failed: ${error.message}`));\n      }\n    });\n  }\n\n  // =============================================================================\n  // LAYER 5 - PROXY FETCH\n  // =============================================================================\n\n  /**\n   * Layer 5: Use proxy service for final attempt\n   */\n  async proxyFetch(url, options, requestId) {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.options.layer5Timeout);\n\n    try {\n      let lastError = null;\n      \n      // Try each proxy service\n      for (const proxyService of this.options.proxyServices) {\n        try {\n          const proxyUrl = `${proxyService}${encodeURIComponent(url)}`;\n          \n          const response = await fetch(proxyUrl, {\n            method: 'GET',\n            signal: controller.signal,\n            headers: {\n              'Accept': 'application/json,text/plain,*/*',\n              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n            }\n          });\n          \n          if (!response.ok) {\n            throw new Error(`Proxy service failed: HTTP ${response.status}`);\n          }\n          \n          // Handle different proxy response formats\n          const result = await this.handleProxyResponse(response, proxyService);\n          return result;\n          \n        } catch (error) {\n          lastError = error;\n          console.warn(`\u26A0\uFE0F Proxy service ${proxyService} failed:`, error.message);\n          continue;\n        }\n      }\n      \n      throw new Error(`All proxy services failed. Last error: ${lastError?.message}`);\n      \n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * Handle different proxy service response formats\n   */\n  async handleProxyResponse(response, proxyService) {\n    const contentType = response.headers.get('content-type') || '';\n    \n    // If it's already an image, return blob\n    if (contentType.startsWith('image/')) {\n      return await response.blob();\n    }\n    \n    // Handle JSON response (common for CORS proxies)\n    if (contentType.includes('application/json')) {\n      const data = await response.json();\n      \n      // Different proxy services have different response formats\n      let imageData = null;\n      if (data.contents) {\n        imageData = data.contents; // allorigins format\n      } else if (data.data) {\n        imageData = data.data;\n      } else if (typeof data === 'string') {\n        imageData = data;\n      }\n      \n      if (imageData) {\n        // Convert base64 or binary data to blob\n        return this.convertDataToBlob(imageData);\n      }\n    }\n    \n    // Fallback: try to get as blob\n    return await response.blob();\n  }\n\n  /**\n   * Convert various data formats to blob\n   */\n  convertDataToBlob(data) {\n    try {\n      // Try base64 conversion\n      if (typeof data === 'string' && data.startsWith('data:image/')) {\n        const [header, base64] = data.split(',');\n        const mimeType = header.match(/data:([^;]+)/)[1];\n        const byteCharacters = atob(base64);\n        const byteNumbers = new Array(byteCharacters.length);\n        \n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        \n        const byteArray = new Uint8Array(byteNumbers);\n        return new Blob([byteArray], { type: mimeType });\n      }\n      \n      // Try direct blob conversion\n      return new Blob([data], { type: 'image/png' });\n      \n    } catch (error) {\n      throw new Error(`Data conversion failed: ${error.message}`);\n    }\n  }\n\n  // =============================================================================\n  // ERROR CLASSIFICATION AND RECOVERY\n  // =============================================================================\n\n  /**\n   * Classify error type for appropriate handling\n   */\n  classifyError(errorMessage) {\n    const message = errorMessage.toLowerCase();\n    \n    for (const [category, patterns] of Object.entries(this.errorClassifier)) {\n      for (const pattern of patterns) {\n        if (message.includes(pattern.toLowerCase())) {\n          return category;\n        }\n      }\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * Check if error is transient and worth retrying\n   */\n  isTransientError(errorMessage) {\n    const transientPatterns = [\n      'timeout', 'network', 'temporary', 'try again',\n      'rate limit', '429', '502', '503', '504'\n    ];\n    \n    const message = errorMessage.toLowerCase();\n    return transientPatterns.some(pattern => message.includes(pattern));\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff\n   */\n  calculateRetryDelay(attemptNumber) {\n    const delay = this.options.retryDelayBase * Math.pow(2, attemptNumber - 1);\n    const jitter = Math.random() * 1000; // Add jitter to avoid thundering herd\n    return Math.min(delay + jitter, this.options.retryDelayMax);\n  }\n\n  /**\n   * Get user-friendly error suggestions\n   */\n  getErrorSuggestions(errorMessage) {\n    const errorType = this.classifyError(errorMessage);\n    \n    const suggestions = {\n      network: [\n        'Check your internet connection',\n        'Try refreshing the page',\n        'Wait a moment and try again'\n      ],\n      cors: [\n        'The website may be blocking external requests',\n        'Try using a different browser or incognito mode',\n        'Some images may require being logged into the website'\n      ],\n      permission: [\n        'You may need to log into the website first',\n        'The website may be restricting access to images',\n        'Try accessing the page directly before scraping'\n      ],\n      rateLimit: [\n        'The website is limiting requests',\n        'Wait a few minutes before trying again',\n        'Reduce the number of concurrent downloads'\n      ],\n      timeout: [\n        'The image is taking too long to load',\n        'Try again with a slower connection speed',\n        'The image server may be overloaded'\n      ],\n      format: [\n        'The image format may not be supported',\n        'The image file may be corrupted',\n        'Try a different image quality setting'\n      ]\n    };\n    \n    return suggestions[errorType] || [\n      'An unexpected error occurred',\n      'Try refreshing the page and attempting again',\n      'Check the browser console for more details'\n    ];\n  }\n\n  /**\n   * Convert technical error to user-friendly message\n   */\n  getUserFriendlyError(errorMessage) {\n    const errorType = this.classifyError(errorMessage);\n    \n    const friendlyMessages = {\n      network: 'Network connection issue',\n      cors: 'Website blocking external access',\n      permission: 'Access permission denied',\n      rateLimit: 'Too many requests - please wait',\n      timeout: 'Request timed out',\n      server: 'Server error on website',\n      notFound: 'Image not found',\n      format: 'Unsupported image format',\n      memory: 'Memory limit reached'\n    };\n    \n    return friendlyMessages[errorType] || 'Unexpected error occurred';\n  }\n\n  // =============================================================================\n  // CIRCUIT BREAKER PATTERN\n  // =============================================================================\n\n  /**\n   * Check if circuit breaker is open for domain\n   */\n  isCircuitBreakerOpen(url) {\n    const domain = this.getDomainFromUrl(url);\n    const breaker = this.circuitBreakers.get(domain);\n    \n    if (!breaker) return false;\n    \n    if (breaker.state === 'open') {\n      // Check if timeout has elapsed\n      if (Date.now() - breaker.lastFailure > this.options.circuitBreakerTimeout) {\n        breaker.state = 'half-open';\n        breaker.consecutiveFailures = 0;\n        return false;\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Update circuit breaker state\n   */\n  updateCircuitBreaker(url, success) {\n    const domain = this.getDomainFromUrl(url);\n    let breaker = this.circuitBreakers.get(domain);\n    \n    if (!breaker) {\n      breaker = {\n        domain,\n        state: 'closed',\n        consecutiveFailures: 0,\n        lastFailure: null\n      };\n      this.circuitBreakers.set(domain, breaker);\n    }\n    \n    if (success) {\n      breaker.state = 'closed';\n      breaker.consecutiveFailures = 0;\n    } else {\n      breaker.consecutiveFailures++;\n      breaker.lastFailure = Date.now();\n      \n      if (breaker.consecutiveFailures >= this.options.circuitBreakerThreshold) {\n        breaker.state = 'open';\n        console.warn(`\uD83D\uDD34 Circuit breaker opened for ${domain} after ${breaker.consecutiveFailures} failures`);\n      }\n    }\n  }\n\n  // =============================================================================\n  // BATCH PROCESSING AND CONCURRENCY MANAGEMENT\n  // =============================================================================\n\n  /**\n   * Process multiple URLs with intelligent batching and concurrency control\n   */\n  async enhancedFetchBatch(urls, options = {}) {\n    console.log(`\uD83D\uDCE6 Starting batch fetch for ${urls.length} URLs`);\n    \n    const batchOptions = {\n      batchSize: options.batchSize || this.options.batchSize,\n      concurrency: Math.min(options.concurrency || this.options.maxConcurrentRequests, urls.length),\n      enableProgressTracking: options.enableProgressTracking !== false,\n      ...options\n    };\n\n    const results = [];\n    const errors = [];\n    let completed = 0;\n\n    // Create batches\n    const batches = this.createBatches(urls, batchOptions.batchSize);\n    \n    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n      const batch = batches[batchIndex];\n      \n      console.log(`\uD83D\uDD04 Processing batch ${batchIndex + 1}/${batches.length} (${batch.length} items)`);\n      \n      // Process batch with concurrency control\n      const batchPromises = batch.map(async (url) => {\n        try {\n          const result = await this.enhancedFetch(url, options);\n          completed++;\n          \n          if (batchOptions.enableProgressTracking) {\n            this.notifyBatchProgress(completed, urls.length, result);\n          }\n          \n          return { url, ...result };\n        } catch (error) {\n          completed++;\n          const errorResult = { url, success: false, error: error.message };\n          errors.push(errorResult);\n          \n          if (batchOptions.enableProgressTracking) {\n            this.notifyBatchProgress(completed, urls.length, errorResult);\n          }\n          \n          return errorResult;\n        }\n      });\n\n      // Wait for batch completion with concurrency limit\n      const batchResults = await this.limitConcurrency(batchPromises, batchOptions.concurrency);\n      results.push(...batchResults);\n      \n      // Batch delay to prevent overwhelming servers\n      if (batchIndex < batches.length - 1) {\n        await this.delay(this.options.batchDelay);\n      }\n      \n      // Memory management check\n      if (this.options.enableMemoryManagement) {\n        await this.checkMemoryUsage();\n      }\n    }\n\n    const summary = {\n      totalRequests: urls.length,\n      successful: results.filter(r => r.success).length,\n      failed: errors.length,\n      results,\n      errors,\n      processingTime: Date.now() - Date.now(), // Will be set by caller\n      metrics: this.getMetricsSummary()\n    };\n\n    console.log(`\u2705 Batch processing completed: ${summary.successful}/${summary.totalRequests} successful`);\n    \n    return summary;\n  }\n\n  /**\n   * Create batches from URL array\n   */\n  createBatches(urls, batchSize) {\n    const batches = [];\n    for (let i = 0; i < urls.length; i += batchSize) {\n      batches.push(urls.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  /**\n   * Limit concurrency for Promise array\n   */\n  async limitConcurrency(promises, limit) {\n    const results = [];\n    const executing = [];\n\n    for (const promise of promises) {\n      const p = Promise.resolve(promise).then(result => {\n        executing.splice(executing.indexOf(p), 1);\n        return result;\n      });\n\n      results.push(p);\n      \n      if (promises.length >= limit) {\n        executing.push(p);\n        \n        if (executing.length >= limit) {\n          await Promise.race(executing);\n        }\n      }\n    }\n\n    return Promise.all(results);\n  }\n\n  // =============================================================================\n  // MEMORY MANAGEMENT\n  // =============================================================================\n\n  /**\n   * Initialize memory management\n   */\n  startMemoryManagement() {\n    if (!this.options.enableMemoryManagement) return;\n    \n    this.memoryWatcher = setInterval(() => {\n      this.checkMemoryUsage();\n    }, this.options.garbageCollectionInterval);\n  }\n\n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  async checkMemoryUsage() {\n    try {\n      // Use performance.memory if available (Chrome)\n      if (performance.memory) {\n        const memoryInfo = performance.memory;\n        this.metrics.memoryUsage = memoryInfo.usedJSHeapSize;\n        \n        if (memoryInfo.usedJSHeapSize > this.options.memoryThreshold) {\n          console.warn('\uD83E\uDDE0 High memory usage detected, triggering cleanup...');\n          await this.performMemoryCleanup();\n        }\n      }\n    } catch (error) {\n      console.warn('Memory check failed:', error);\n    }\n  }\n\n  /**\n   * Perform memory cleanup\n   */\n  async performMemoryCleanup() {\n    // Clear old completed requests\n    const cutoffTime = Date.now() - 300000; // 5 minutes\n    \n    for (const [id, request] of this.completedRequests.entries()) {\n      if (request.timestamp < cutoffTime) {\n        this.completedRequests.delete(id);\n      }\n    }\n    \n    // Clear old failed requests\n    for (const [id, request] of this.failedRequests.entries()) {\n      if (request.timestamp < cutoffTime) {\n        this.failedRequests.delete(id);\n      }\n    }\n    \n    // Clear old circuit breaker data\n    for (const [domain, breaker] of this.circuitBreakers.entries()) {\n      if (breaker.lastFailure && (Date.now() - breaker.lastFailure) > 600000) { // 10 minutes\n        this.circuitBreakers.delete(domain);\n      }\n    }\n    \n    // Force garbage collection if available\n    if (window.gc) {\n      window.gc();\n    }\n    \n    console.log('\uD83D\uDDD1\uFE0F Memory cleanup completed');\n  }\n\n  // =============================================================================\n  // PROGRESS TRACKING AND USER NOTIFICATIONS\n  // =============================================================================\n\n  /**\n   * Update progress for UI integration\n   */\n  updateProgress(requestId, percentage, message) {\n    if (!this.options.enableProgressTracking) return;\n    \n    const progressData = {\n      requestId,\n      percentage,\n      message,\n      timestamp: Date.now()\n    };\n    \n    // Notify all registered callbacks\n    this.progressCallbacks.forEach(callback => {\n      try {\n        callback(progressData);\n      } catch (error) {\n        console.warn('Progress callback error:', error);\n      }\n    });\n  }\n\n  /**\n   * Notify batch progress\n   */\n  notifyBatchProgress(completed, total, result) {\n    const percentage = Math.round((completed / total) * 100);\n    const message = result.success ? \n      `Completed ${completed}/${total} images` : \n      `Failed ${completed}/${total} images`;\n    \n    this.updateProgress('batch', percentage, message);\n  }\n\n  /**\n   * Register progress callback\n   */\n  onProgress(callback) {\n    this.progressCallbacks.add(callback);\n    \n    return () => {\n      this.progressCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Register error report callback\n   */\n  onErrorReport(callback) {\n    this.errorReportCallbacks.add(callback);\n    \n    return () => {\n      this.errorReportCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Generate error report for troubleshooting\n   */\n  generateErrorReport() {\n    const report = {\n      timestamp: new Date().toISOString(),\n      metrics: this.metrics,\n      activeRequests: Array.from(this.activeRequests.values()),\n      recentFailures: Array.from(this.failedRequests.values()).slice(-20),\n      circuitBreakers: Array.from(this.circuitBreakers.entries()),\n      configuration: {\n        ...this.options,\n        proxyServices: this.options.proxyServices.length // Don't expose actual URLs\n      }\n    };\n    \n    // Notify error report callbacks\n    this.errorReportCallbacks.forEach(callback => {\n      try {\n        callback(report);\n      } catch (error) {\n        console.warn('Error report callback failed:', error);\n      }\n    });\n    \n    return report;\n  }\n\n  // =============================================================================\n  // UTILITY METHODS\n  // =============================================================================\n\n  /**\n   * Initialize error handling system\n   */\n  initializeErrorHandling() {\n    // Set up global error handlers for the enhanced system\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unhandledrejection', (event) => {\n        if (event.reason && event.reason.message && event.reason.message.includes('Enhanced Error Handling')) {\n          console.error('\uD83D\uDEA8 Enhanced Error Handling system error:', event.reason);\n          this.updateErrorMetrics(event.reason);\n        }\n      });\n    }\n  }\n\n  /**\n   * Update error metrics\n   */\n  updateErrorMetrics(error) {\n    const errorType = this.classifyError(error.message);\n    this.metrics.errorTypes[errorType] = (this.metrics.errorTypes[errorType] || 0) + 1;\n  }\n\n  /**\n   * Update processing time metrics\n   */\n  updateProcessingTimeMetrics(processingTime) {\n    const currentAvg = this.metrics.averageProcessingTime;\n    const total = this.metrics.totalRequests;\n    this.metrics.averageProcessingTime = ((currentAvg * (total - 1)) + processingTime) / total;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  generateRequestId() {\n    return 'req_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 5);\n  }\n\n  /**\n   * Extract domain from URL\n   */\n  getDomainFromUrl(url) {\n    try {\n      return new URL(url).hostname;\n    } catch {\n      return 'unknown';\n    }\n  }\n\n  /**\n   * Get alternative referer for credentialed requests\n   */\n  getAlternativeReferer(url) {\n    try {\n      const urlObj = new URL(url);\n      return `${urlObj.protocol}//${urlObj.hostname}/`;\n    } catch {\n      return window.location.href;\n    }\n  }\n\n  /**\n   * Get alternative origin for credentialed requests\n   */\n  getAlternativeOrigin(url) {\n    try {\n      const urlObj = new URL(url);\n      return `${urlObj.protocol}//${urlObj.hostname}`;\n    } catch {\n      return window.location.origin;\n    }\n  }\n\n  /**\n   * Validate image content type\n   */\n  isValidImageContentType(contentType) {\n    const validTypes = [\n      'image/jpeg', 'image/jpg', 'image/png', 'image/gif',\n      'image/webp', 'image/svg+xml', 'image/bmp', 'image/tiff'\n    ];\n    \n    return validTypes.some(type => contentType.toLowerCase().includes(type));\n  }\n\n  /**\n   * Delay helper for backoff and rate limiting\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get metrics summary\n   */\n  getMetricsSummary() {\n    return {\n      ...this.metrics,\n      successRate: this.metrics.totalRequests > 0 ? \n        (this.metrics.successfulRequests / this.metrics.totalRequests) * 100 : 0,\n      activeRequestCount: this.activeRequests.size,\n      circuitBreakerCount: this.circuitBreakers.size\n    };\n  }\n\n  /**\n   * Cleanup system resources\n   */\n  cleanup() {\n    if (this.memoryWatcher) {\n      clearInterval(this.memoryWatcher);\n      this.memoryWatcher = null;\n    }\n    \n    this.activeRequests.clear();\n    this.completedRequests.clear();\n    this.failedRequests.clear();\n    this.progressCallbacks.clear();\n    this.errorReportCallbacks.clear();\n    \n    console.log('\uD83E\uDDF9 Enhanced Error Handling system cleaned up');\n  }\n}\n\n// Export for use in other modules\nif (typeof window !== 'undefined') {\n  window.EnhancedErrorHandling = EnhancedErrorHandling;\n}\n\nconsole.log('\u2705 Enhanced Error Handling System loaded successfully');\n\n// =============================================================================\n// IMAGE METADATA TRACKER - REMOVED FOR MANIFEST V3 COMPLIANCE\n// =============================================================================\n// \n// The ImageMetadataTracker class has been removed to ensure full Manifest V3 compliance.\n// \n// REASON FOR REMOVAL:\n// The chrome.webRequest API used by this class is deprecated in Manifest V3.\n// MV3 requires using declarativeNetRequest instead, which has significant limitations\n// for real-time metadata capture.\n//\n// FUNCTIONALITY REMOVED:\n// - Real-time image Content-Type tracking via webRequest.onCompleted\n// - Redirect handling via webRequest.onBeforeRedirect  \n// - Response header analysis via webRequest.onHeadersReceived\n// - Image metadata storage (MIME types, sizes, caching info)\n// - Message handlers: \"getImagesCT\", \"getImageMetadata\", \"getMetadataMetrics\"\n//\n// IMPACT:\n// This was an optimization feature for enhanced image metadata detection.\n// The extension core functionality (image scraping and downloading) works without it.\n// Image detection now relies on DOM-based analysis and URL pattern matching.\n//\n// MIGRATION PATH (if needed in future):\n// To restore metadata tracking in MV3, would need to:\n// 1. Use declarativeNetRequest API with static rules\n// 2. Implement content script-based metadata capture\n// 3. Use fetch() API in offscreen documents for header inspection\n//\n// =============================================================================\n\n// =============================================================================\n// ES6 MODULE EXPORTS\n// =============================================================================\n\nexport {\n  SimpleDownloadManager,\n  SimpleMessageHandler,\n  StepTwoDownloadQueue,\n  BatchOperationsManager,\n  MemoryOptimizedProcessor,\n  SiteProfileManager,\n  ConsolidatedBackgroundManager,\n  EnhancedErrorHandling,\n  StepTwoUtils,\n  applyMask,\n  resetCounters,\n  getCounterStats\n};", "// simple-service-worker.js - MV3 Compliant Enhanced Service Worker\n// Integrates ErrorHandlingSystem, PerformanceMonitoringSystem, and MV3 resilience features\n// Features: Chrome.alarms keepalive, idempotent initialization, defensive message handling\n\nimport { QUEUE_CONFIG } from '../config/constants.js';\nimport { Logger } from '../lib/logger.js';\nimport { InputSanitizer } from '../lib/input-sanitizer.js';\n\n// Import consolidated background classes\nimport {\n  SimpleDownloadManager,\n  SimpleMessageHandler,\n  StepTwoDownloadQueue,\n  BatchOperationsManager,\n  MemoryOptimizedProcessor,\n  SiteProfileManager,\n  ConsolidatedBackgroundManager,\n  EnhancedErrorHandling,\n  StepTwoUtils,\n  applyMask,\n  resetCounters,\n  getCounterStats\n} from './consolidated-background.js';\n\n// Create logger instance for service worker (will lazy-init on first use)\nconst serviceWorkerLogger = new Logger('ServiceWorker');\n\n// Create safe console methods to prevent 'Illegal invocation' errors\n// Integrate logger if available, otherwise fallback to console\nconst safeConsole = serviceWorkerLogger ? {\n  log: (...args) => serviceWorkerLogger.debug(...args),\n  error: (...args) => serviceWorkerLogger.error(...args),\n  warn: (...args) => serviceWorkerLogger.warn(...args),\n  info: (...args) => serviceWorkerLogger.info(...args)\n} : {\n  log: console.log.bind(console),\n  error: console.error.bind(console),\n  warn: console.warn.bind(console),\n  info: console.info.bind(console)\n};\n\n// Make safeConsole available globally to prevent conflicts with imported scripts\nglobalThis.safeConsole = safeConsole;\n\n// NOTE: No logging at module load to ensure MV3 compliance\n// Logs will be emitted when event handlers fire\n\n// ============================================================================\n// GLOBAL VARIABLES AND DECLARATIONS\n// ============================================================================\n\n// ProxyRouter singleton - declared first, instantiated after class definition\nlet globalProxyRouter = null;\nlet proxyRouterReady = false;\n\n// ============================================================================\n// PHASE 3: ENHANCED QUEUE SYSTEM WITH PRIORITY AND DEDUPLICATION (P3-1)\n// ============================================================================\n\n/**\n * Priority levels for message queue\n * @enum {number}\n */\nconst MessagePriority = {\n  CRITICAL: 0,  // Health checks, keepalive\n  HIGH: 1,      // User-initiated actions\n  NORMAL: 2,    // Regular operations\n  LOW: 3        // Background tasks, cleanup\n};\n\n/**\n * Enhanced message queue with priority, deduplication, and timeout handling\n * Phase 3: P3-1 implementation\n */\nclass PriorityMessageQueue {\n  constructor(maxSize = 100, messageTimeout = 30000) {\n    this.queues = {\n      [MessagePriority.CRITICAL]: [],\n      [MessagePriority.HIGH]: [],\n      [MessagePriority.NORMAL]: [],\n      [MessagePriority.LOW]: []\n    };\n    this.maxSize = maxSize;\n    this.messageTimeout = messageTimeout;\n    this.messageHashes = new Set(); // For deduplication\n    this.processingLock = false;\n    this.stats = {\n      enqueued: 0,\n      dequeued: 0,\n      duplicates: 0,\n      timeouts: 0,\n      dropped: 0\n    };\n  }\n\n  /**\n   * Generate hash for message deduplication\n   * @private\n   */\n  _hashMessage(message) {\n    const key = `${message.action || message.type}_${message.requestId || ''}_${JSON.stringify(message.payload || {})}`;\n    return key;\n  }\n\n  /**\n   * Enqueue message with priority and deduplication\n   */\n  enqueue(item) {\n    const priority = this._determinePriority(item.message);\n    const hash = this._hashMessage(item.message);\n\n    // Deduplication check\n    if (this.messageHashes.has(hash)) {\n      this.stats.duplicates++;\n      safeConsole.log(`\uD83D\uDD04 Duplicate message detected, skipping: ${item.message.action || item.message.type}`);\n      return false;\n    }\n\n    // Check total size across all queues\n    const totalSize = this.size();\n    if (totalSize >= this.maxSize) {\n      // Drop lowest priority message to make room\n      if (this.queues[MessagePriority.LOW].length > 0) {\n        const dropped = this.queues[MessagePriority.LOW].shift();\n        this.messageHashes.delete(this._hashMessage(dropped.message));\n        this.stats.dropped++;\n        safeConsole.warn(`\u26A0\uFE0F Queue full, dropped low priority message: ${dropped.message.action}`);\n      } else {\n        // Queue full with higher priority messages\n        this.stats.dropped++;\n        safeConsole.warn(`\u26A0\uFE0F Queue full, cannot enqueue message: ${item.message.action}`);\n        if (item.sendResponse) {\n          item.sendResponse({ error: 'Service worker overloaded, please retry' });\n        }\n        return false;\n      }\n    }\n\n    // Add to appropriate priority queue\n    item.enqueuedAt = Date.now();\n    item.hash = hash;\n    item.priority = priority;\n    this.queues[priority].push(item);\n    this.messageHashes.add(hash);\n    this.stats.enqueued++;\n\n    safeConsole.log(`\uD83D\uDCE5 Enqueued message (priority: ${priority}): ${item.message.action || item.message.type}`);\n    return true;\n  }\n\n  /**\n   * Dequeue next highest priority message\n   */\n  dequeue() {\n    // Remove stale messages first\n    this._removeStaleMessages();\n\n    // Check queues in priority order\n    for (const priority of [MessagePriority.CRITICAL, MessagePriority.HIGH, MessagePriority.NORMAL, MessagePriority.LOW]) {\n      const queue = this.queues[priority];\n      if (queue.length > 0) {\n        const item = queue.shift();\n        this.messageHashes.delete(item.hash);\n        this.stats.dequeued++;\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Determine priority based on message action\n   * @private\n   */\n  _determinePriority(message) {\n    const action = message.action || message.type || '';\n\n    // Critical: health checks, keepalive\n    if (action.includes('HEALTH') || action.includes('KEEPALIVE') || action.includes('PING')) {\n      return MessagePriority.CRITICAL;\n    }\n\n    // High: user-initiated actions\n    if (action.includes('START') || action.includes('STOP') || action.includes('CANCEL') || \n        action.includes('GET_') || action.includes('SET_')) {\n      return MessagePriority.HIGH;\n    }\n\n    // Low: cleanup, background tasks\n    if (action.includes('CLEANUP') || action.includes('EXPIRE') || action.includes('PURGE')) {\n      return MessagePriority.LOW;\n    }\n\n    // Normal: everything else\n    return MessagePriority.NORMAL;\n  }\n\n  /**\n   * Remove stale messages that exceeded timeout\n   * @private\n   */\n  _removeStaleMessages() {\n    const now = Date.now();\n    let removedCount = 0;\n\n    for (const priority in this.queues) {\n      const queue = this.queues[priority];\n      const originalLength = queue.length;\n\n      // Filter out stale messages\n      this.queues[priority] = queue.filter(item => {\n        const age = now - item.enqueuedAt;\n        if (age > this.messageTimeout) {\n          this.messageHashes.delete(item.hash);\n          if (item.sendResponse) {\n            try {\n              item.sendResponse({ error: 'Request timeout', timeout: true });\n            } catch (e) {\n              // sendResponse may have expired\n            }\n          }\n          return false;\n        }\n        return true;\n      });\n\n      removedCount += originalLength - this.queues[priority].length;\n    }\n\n    if (removedCount > 0) {\n      this.stats.timeouts += removedCount;\n      safeConsole.warn(`\u23F1\uFE0F Removed ${removedCount} stale messages from queue`);\n    }\n  }\n\n  /**\n   * Get total queue size across all priorities\n   */\n  size() {\n    return Object.values(this.queues).reduce((sum, queue) => sum + queue.length, 0);\n  }\n\n  /**\n   * Get queue statistics\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      currentSize: this.size(),\n      byPriority: {\n        critical: this.queues[MessagePriority.CRITICAL].length,\n        high: this.queues[MessagePriority.HIGH].length,\n        normal: this.queues[MessagePriority.NORMAL].length,\n        low: this.queues[MessagePriority.LOW].length\n      }\n    };\n  }\n\n  /**\n   * Clear all queues\n   */\n  clear() {\n    for (const priority in this.queues) {\n      this.queues[priority] = [];\n    }\n    this.messageHashes.clear();\n  }\n}\n\n/**\n * Connection state machine for port connections\n * Phase 3: P3-1 implementation\n */\nconst ConnectionState = {\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected',\n  DISCONNECTING: 'disconnecting',\n  DISCONNECTED: 'disconnected',\n  ERROR: 'error'\n};\n\n/**\n * Connection pool manager with state machine and limits\n * Phase 3: P3-1 implementation\n */\nclass ConnectionPool {\n  constructor(maxConnections = 50, connectionTimeout = 60000) {\n    this.connections = new Map(); // portName -> connection info\n    this.maxConnections = maxConnections;\n    this.connectionTimeout = connectionTimeout;\n    this.stats = {\n      totalCreated: 0,\n      currentActive: 0,\n      totalDisconnected: 0,\n      totalTimedOut: 0,\n      totalErrors: 0\n    };\n  }\n\n  /**\n   * Add new connection with state machine\n   */\n  addConnection(port) {\n    // Check connection limit\n    if (this.connections.size >= this.maxConnections) {\n      safeConsole.warn(`\u26A0\uFE0F Connection pool full (${this.maxConnections}), rejecting new connection: ${port.name}`);\n      try {\n        port.postMessage({ error: 'Connection pool full', retry: true });\n        port.disconnect();\n      } catch (e) {\n        // Ignore if port already disconnected\n      }\n      this.stats.totalErrors++;\n      return false;\n    }\n\n    const connectionId = `${port.name}_${Date.now()}`;\n    const connectionInfo = {\n      port,\n      portName: port.name,\n      connectionId,\n      state: ConnectionState.CONNECTING,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      messageCount: 0,\n      timeoutTimer: null\n    };\n\n    // Set up timeout\n    connectionInfo.timeoutTimer = setTimeout(() => {\n      this._handleConnectionTimeout(connectionId);\n    }, this.connectionTimeout);\n\n    this.connections.set(connectionId, connectionInfo);\n    this.stats.totalCreated++;\n    this.stats.currentActive++;\n\n    safeConsole.log(`\uD83D\uDD0C Connection added to pool: ${port.name} (${connectionId})`);\n\n    // Transition to connected state\n    setTimeout(() => {\n      const conn = this.connections.get(connectionId);\n      if (conn && conn.state === ConnectionState.CONNECTING) {\n        conn.state = ConnectionState.CONNECTED;\n        safeConsole.log(`\u2705 Connection ready: ${port.name}`);\n      }\n    }, 100);\n\n    return true;\n  }\n\n  /**\n   * Handle connection timeout\n   * @private\n   */\n  _handleConnectionTimeout(connectionId) {\n    const conn = this.connections.get(connectionId);\n    if (!conn) return;\n\n    safeConsole.warn(`\u23F1\uFE0F Connection timeout: ${conn.portName} (${connectionId})`);\n    \n    conn.state = ConnectionState.ERROR;\n    this.stats.totalTimedOut++;\n\n    try {\n      conn.port.postMessage({ error: 'Connection timeout' });\n      conn.port.disconnect();\n    } catch (e) {\n      // Ignore if already disconnected\n    }\n\n    this.removeConnection(connectionId);\n  }\n\n  /**\n   * Update connection activity timestamp\n   */\n  updateActivity(connectionId) {\n    const conn = this.connections.get(connectionId);\n    if (conn) {\n      conn.lastActivity = Date.now();\n      conn.messageCount++;\n    }\n  }\n\n  /**\n   * Remove connection from pool\n   */\n  removeConnection(connectionId) {\n    const conn = this.connections.get(connectionId);\n    if (!conn) return false;\n\n    // Clear timeout timer\n    if (conn.timeoutTimer) {\n      clearTimeout(conn.timeoutTimer);\n    }\n\n    // Update state\n    if (conn.state !== ConnectionState.DISCONNECTED) {\n      conn.state = ConnectionState.DISCONNECTED;\n      this.stats.totalDisconnected++;\n      this.stats.currentActive--;\n    }\n\n    this.connections.delete(connectionId);\n    safeConsole.log(`\uD83D\uDD0C Connection removed from pool: ${conn.portName} (${connectionId})`);\n\n    return true;\n  }\n\n  /**\n   * Find connection by port\n   */\n  findByPort(port) {\n    for (const [connectionId, conn] of this.connections.entries()) {\n      if (conn.port === port) {\n        return { connectionId, ...conn };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      maxConnections: this.maxConnections,\n      connectionTimeout: this.connectionTimeout\n    };\n  }\n\n  /**\n   * Cleanup idle connections\n   */\n  cleanupIdleConnections(idleTimeout = 300000) { // 5 minutes\n    const now = Date.now();\n    const toRemove = [];\n\n    for (const [connectionId, conn] of this.connections.entries()) {\n      const idleTime = now - conn.lastActivity;\n      if (idleTime > idleTimeout && conn.state === ConnectionState.CONNECTED) {\n        toRemove.push(connectionId);\n      }\n    }\n\n    for (const connectionId of toRemove) {\n      const conn = this.connections.get(connectionId);\n      safeConsole.log(`\uD83E\uDDF9 Cleaning up idle connection: ${conn.portName} (idle for ${Math.floor((now - conn.lastActivity) / 1000)}s)`);\n      \n      try {\n        conn.port.postMessage({ action: 'IDLE_DISCONNECT' });\n        conn.port.disconnect();\n      } catch (e) {\n        // Ignore if already disconnected\n      }\n\n      this.removeConnection(connectionId);\n    }\n\n    if (toRemove.length > 0) {\n      safeConsole.log(`\uD83E\uDDF9 Cleaned up ${toRemove.length} idle connections`);\n    }\n  }\n}\n\n// Initialize enhanced queues\nconst priorityMessageQueue = new PriorityMessageQueue(QUEUE_CONFIG.MAX_PENDING_MESSAGES, 30000);\nconst priorityConnectionQueue = new PriorityMessageQueue(50, 10000); // Smaller queue for connections\nconst connectionPool = new ConnectionPool(50, 60000);\n\n// Legacy arrays for backward compatibility during transition\nlet pendingMessages = [];\nlet pendingConnections = [];\n\n// Mutex-based queue draining synchronization (CR-011 fix)\nlet queueDrained = false;\nlet queueDrainLock = null;\nlet queueDrainInProgress = false;\n\n// Initialization timeout tracker\nlet initTimeoutId = null;\n\n// Start periodic cleanup of idle connections\nsetInterval(() => {\n  connectionPool.cleanupIdleConnections();\n}, 60000); // Every minute\n\n// ============================================================================\n// PHASE 2: HEALTH MONITORING AND OBSERVABILITY SYSTEM\n// ============================================================================\n\n// Health monitoring state\nlet serviceWorkerRestartCount = 0;\nlet serviceWorkerStartTimestamps = [];\nlet keepaliveAlarmCount = 0;\nlet keepaliveAlarmFailures = 0;\nlet lastKeepaliveTime = null;\nlet healthMetricsInterval = null;\n\n// Message processing metrics\nlet messageProcessingTimes = [];\nconst MAX_PROCESSING_SAMPLES = 100;\n\n// Connection health metrics\nlet connectionMetrics = {\n  activePorts: 0,\n  totalConnections: 0,\n  disconnections: 0,\n  reconnectionAttempts: 0,\n  connectionErrors: 0\n};\n\n/**\n * Track service worker restart\n * @private\n */\nfunction trackServiceWorkerStart() {\n  serviceWorkerRestartCount++;\n  const timestamp = Date.now();\n  serviceWorkerStartTimestamps.push(timestamp);\n  \n  // Keep only last 10 restart timestamps\n  if (serviceWorkerStartTimestamps.length > 10) {\n    serviceWorkerStartTimestamps.shift();\n  }\n  \n  safeConsole.info(`\uD83D\uDD04 Service worker start #${serviceWorkerRestartCount} at ${new Date(timestamp).toISOString()}`);\n}\n\n/**\n * Get comprehensive health status for dashboard and monitoring\n * Phase 2: P2-2 implementation\n * \n * @returns {Object} Complete health status object\n */\nasync function getHealthStatus() {\n  const now = Date.now();\n  const uptime = typeof serviceWorkerStartTime !== 'undefined' \n    ? now - serviceWorkerStartTime \n    : 0;\n  \n  // Calculate average message processing time\n  const avgProcessingTime = messageProcessingTimes.length > 0\n    ? messageProcessingTimes.reduce((a, b) => a + b, 0) / messageProcessingTimes.length\n    : 0;\n  \n  // Get alarm status\n  let alarmStatus = { keepalive: 'unknown', healthCheck: 'unknown' };\n  try {\n    const alarms = await chrome.alarms.getAll();\n    const keepaliveAlarm = alarms.find(a => a.name === 'steptwo-keepalive');\n    const healthCheckAlarm = alarms.find(a => a.name === 'steptwo-health-check');\n    \n    alarmStatus = {\n      keepalive: keepaliveAlarm ? 'active' : 'inactive',\n      healthCheck: healthCheckAlarm ? 'active' : 'inactive',\n      keepaliveSchedule: keepaliveAlarm?.scheduledTime ? new Date(keepaliveAlarm.scheduledTime).toISOString() : null,\n      totalAlarms: alarms.length\n    };\n  } catch (error) {\n    safeConsole.warn('\u26A0\uFE0F Failed to get alarm status:', error);\n  }\n  \n  // Memory status\n  const memoryStatus = performance.memory ? {\n    usedJSHeapSize: performance.memory.usedJSHeapSize,\n    totalJSHeapSize: performance.memory.totalJSHeapSize,\n    jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,\n    usedMB: Math.floor(performance.memory.usedJSHeapSize / 1024 / 1024),\n    totalMB: Math.floor(performance.memory.totalJSHeapSize / 1024 / 1024),\n    limitMB: Math.floor(performance.memory.jsHeapSizeLimit / 1024 / 1024)\n  } : null;\n  \n  return {\n    timestamp: now,\n    uptime,\n    uptimeFormatted: formatDuration(uptime),\n    \n    // Restart tracking\n    restartCount: serviceWorkerRestartCount,\n    restartTimestamps: serviceWorkerStartTimestamps,\n    lastRestart: serviceWorkerStartTimestamps[serviceWorkerStartTimestamps.length - 1] || null,\n    \n    // Keepalive monitoring\n    keepalive: {\n      alarmCount: keepaliveAlarmCount,\n      failureCount: keepaliveAlarmFailures,\n      successRate: keepaliveAlarmCount > 0 \n        ? ((keepaliveAlarmCount - keepaliveAlarmFailures) / keepaliveAlarmCount * 100).toFixed(2) + '%'\n        : 'N/A',\n      lastKeepalive: lastKeepaliveTime,\n      timeSinceLastKeepalive: lastKeepaliveTime ? now - lastKeepaliveTime : null,\n      alarmStatus: alarmStatus.keepalive,\n      healthCheckStatus: alarmStatus.healthCheck\n    },\n    \n    // Message processing metrics\n    messageProcessing: {\n      totalMessages: globalProxyRouter?.performanceMetrics?.messageCount || 0,\n      averageProcessingTime: Math.round(avgProcessingTime),\n      samples: messageProcessingTimes.length,\n      recentTimes: messageProcessingTimes.slice(-10)\n    },\n    \n    // Connection health\n    connections: {\n      ...connectionMetrics,\n      activePortNames: globalProxyRouter?.portConnections \n        ? Array.from(globalProxyRouter.portConnections.keys())\n        : []\n    },\n    \n    // Queue status\n    queues: {\n      pendingMessages: pendingMessages.length,\n      pendingConnections: pendingConnections.length,\n      queueDrained,\n      queueDrainInProgress\n    },\n    \n    // Router status\n    router: {\n      ready: proxyRouterReady,\n      initialized: globalProxyRouter?.isInitialized || false,\n      errorCount: globalProxyRouter?.performanceMetrics?.errorCount || 0\n    },\n    \n    // Memory status\n    memory: memoryStatus,\n    \n    // Alarm configuration\n    alarms: alarmStatus,\n    \n    // Overall health assessment\n    healthy: proxyRouterReady && \n             queueDrained && \n             (keepaliveAlarmFailures < 3) &&\n             (pendingMessages.length < QUEUE_CONFIG.MAX_PENDING_MESSAGES * 0.8),\n    \n    issues: []\n  };\n}\n\n/**\n * Format duration in milliseconds to human readable string\n * @private\n */\nfunction formatDuration(ms) {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\n/**\n * Log health metrics periodically\n * @private\n */\nasync function logHealthMetrics() {\n  try {\n    const health = await getHealthStatus();\n    \n    safeConsole.info('\uD83D\uDCCA Health Metrics Report:', {\n      uptime: health.uptimeFormatted,\n      restarts: health.restartCount,\n      keepaliveSuccess: health.keepalive.successRate,\n      avgMessageTime: health.messageProcessing.averageProcessingTime + 'ms',\n      activePorts: health.connections.activePorts,\n      memory: health.memory ? `${health.memory.usedMB}MB / ${health.memory.limitMB}MB` : 'N/A',\n      healthy: health.healthy ? '\u2705' : '\u26A0\uFE0F',\n      issues: health.issues\n    });\n    \n    if (!health.healthy) {\n      safeConsole.warn('\u26A0\uFE0F Service worker health issues detected');\n    }\n  } catch (error) {\n    safeConsole.error('\u274C Failed to log health metrics:', error);\n  }\n}\n\n/**\n * Start periodic health metrics logging (every 5 minutes)\n * @private\n */\nfunction startHealthMetricsLogging() {\n  if (healthMetricsInterval) {\n    clearInterval(healthMetricsInterval);\n  }\n  \n  // Log immediately on start\n  logHealthMetrics();\n  \n  // Then log every 5 minutes\n  healthMetricsInterval = setInterval(() => {\n    logHealthMetrics();\n  }, 5 * 60 * 1000); // 5 minutes\n  \n  safeConsole.info('\uD83D\uDCCA Health metrics logging started (every 5 minutes)');\n}\n\n/**\n * Track message processing time\n * @private\n */\nfunction trackMessageProcessingTime(startTime) {\n  const processingTime = Date.now() - startTime;\n  messageProcessingTimes.push(processingTime);\n  \n  // Keep only last N samples\n  if (messageProcessingTimes.length > MAX_PROCESSING_SAMPLES) {\n    messageProcessingTimes.shift();\n  }\n  \n  return processingTime;\n}\n\n// Track service worker start\ntrackServiceWorkerStart();\n\n// Start health metrics logging\nif (typeof window === 'undefined') {\n  // Only start in service worker context (not in imported contexts)\n  setTimeout(() => {\n    startHealthMetricsLogging();\n  }, 5000); // Delay to allow initialization\n}\n\n// ============================================================================\n// MV3 COMPLIANT: TOP-LEVEL EVENT LISTENER REGISTRATION\n// ============================================================================\n\n/**\n * MV3 COMPLIANT: Pure wrapper functions that delegate to router methods\n * These are registered at top level during initial script evaluation\n */\n\n// Alarm event handler wrapper with readiness guard\nfunction onAlarmWrapper(alarm) {\n  try {\n    if (proxyRouterReady && globalProxyRouter && typeof globalProxyRouter.handleAlarmEvent === 'function') {\n      globalProxyRouter.handleAlarmEvent(alarm);\n    } else {\n      // Alarms are critical for keepalive, continue with fallback behavior\n      console.warn('\u26A0\uFE0F ProxyRouter not ready for alarm event, using fallback:', alarm.name);\n      \n      // Basic keepalive fallback\n      if (alarm.name === 'steptwo-keepalive') {\n        console.log('\uD83D\uDC93 Fallback keepalive heartbeat - service worker active');\n        // Update activity timestamp if available\n        if (typeof lastActivity !== 'undefined') {\n          lastActivity = Date.now();\n        }\n      }\n    }\n  } catch (error) {\n    console.error('\u274C Error in alarm wrapper:', error);\n  }\n}\n\n// Message event handler wrapper with readiness guard\nfunction onMessageWrapper(message, sender, sendResponse) {\n  const startTime = Date.now(); // Phase 2: Track message processing time\n  \n  try {\n    // CR-011 FIX: Check both proxyRouterReady AND queueDrained to prevent race conditions\n    // Only process directly if router is ready AND queue has been drained\n    if (proxyRouterReady && queueDrained && globalProxyRouter && typeof globalProxyRouter.handleMessage === 'function') {\n      // Phase 2: Wrap sendResponse to track processing time\n      const wrappedSendResponse = (response) => {\n        trackMessageProcessingTime(startTime);\n        sendResponse(response);\n      };\n      \n      globalProxyRouter.handleMessage(message, sender, wrappedSendResponse);\n      return true; // Keep message channel open for async responses\n    } else if (!proxyRouterReady || !queueDrained) {\n      // Queue message for processing once router is ready AND queue is drained\n      // This prevents race condition where messages arrive during queue draining\n      console.log('\uD83D\uDCEB Queueing message until ProxyRouter is ready and queue is drained:', message?.action || message?.type);\n      pendingMessages.push({ message, sender, sendResponse, timestamp: Date.now() });\n      \n      // SECURITY FIX: Bounded queue with LRU eviction prevents memory leak\n      // When queue exceeds limit, remove oldest (FIFO) to prevent unbounded growth\n      if (pendingMessages.length > QUEUE_CONFIG.MAX_PENDING_MESSAGES) {\n        const dropped = pendingMessages.shift(); // Remove oldest entry (LRU eviction)\n        dropped.sendResponse({ error: 'Service worker overloaded, message dropped' });\n        console.warn(`\u26A0\uFE0F MEMORY PROTECTION: Dropped oldest pending message (queue full: ${QUEUE_CONFIG.MAX_PENDING_MESSAGES})`);\n      }\n      return true; // Keep channel open for queued processing\n    } else {\n      console.warn('\u26A0\uFE0F ProxyRouter not ready for message:', message?.action || message?.type);\n      sendResponse({ error: 'Service worker initializing, please retry' });\n      return false;\n    }\n  } catch (error) {\n    console.error('\u274C Error in message wrapper:', error);\n    sendResponse({ error: 'Message handling failed' });\n    return false;\n  }\n}\n\n// Port connection handler wrapper with readiness guard\nfunction onConnectWrapper(port) {\n  try {\n    // CR-011 FIX: Check both proxyRouterReady AND queueDrained to prevent race conditions\n    if (proxyRouterReady && queueDrained && globalProxyRouter && typeof globalProxyRouter.handlePortConnection === 'function') {\n      globalProxyRouter.handlePortConnection(port);\n    } else if (!proxyRouterReady || !queueDrained) {\n      // Queue port connection for processing once router is ready AND queue is drained\n      console.log('\uD83D\uDD0C Queueing port connection until ProxyRouter is ready and queue is drained:', port.name);\n      pendingConnections.push({ port, timestamp: Date.now() });\n      \n      // SECURITY FIX: Bounded queue with LRU eviction prevents memory leak\n      // When queue exceeds limit, remove oldest (FIFO) to prevent unbounded growth\n      if (pendingConnections.length > 50) {\n        const dropped = pendingConnections.shift(); // Remove oldest entry (LRU eviction)\n        console.warn(`\u26A0\uFE0F MEMORY PROTECTION: Dropped oldest pending connection (queue full: 50)`);\n        // Port will disconnect naturally\n      }\n    } else {\n      console.warn('\u26A0\uFE0F ProxyRouter not ready for port connection:', port.name);\n      // Port will disconnect naturally if not handled\n    }\n  } catch (error) {\n    console.error('\u274C Error in connect wrapper:', error);\n  }\n}\n\n// Action click handler wrapper with enhanced error handling\nasync function onActionClickWrapper(tab) {\n  try {\n    if (typeof lastActivity !== 'undefined') {\n      lastActivity = Date.now();\n    }\n    \n    console.log('\uD83D\uDDB1\uFE0F Extension icon clicked on tab:', tab?.id);\n    \n    if (!tab || !tab.id) {\n      console.warn('\u26A0\uFE0F No active tab found for icon click');\n      if (typeof showErrorNotification === 'function') {\n        await showErrorNotification('Please ensure you are on a valid web page and try again.');\n      }\n      return;\n    }\n    \n    // Inject content script on-demand before opening dashboard\n    await injectContentScript(tab.id, false);\n    \n    // Delegate to existing handler\n    if (typeof openDashboard === 'function') {\n      await openDashboard(tab);\n    } else {\n      console.warn('\u26A0\uFE0F openDashboard function not available');\n    }\n  } catch (error) {\n    console.error('\u274C Error in action click wrapper:', error);\n    \n    if (globalProxyRouter && globalProxyRouter.errorHandler && typeof globalProxyRouter.errorHandler.handleError === 'function') {\n      globalProxyRouter.errorHandler.handleError(error, 'Icon Click Handler', { tabId: tab?.id }, 'medium');\n    }\n    \n    if (typeof showErrorNotification === 'function') {\n      await showErrorNotification('Failed to open dashboard. Please try again.');\n    }\n  }\n}\n\n// Command handler wrapper with enhanced error handling\nasync function onCommandWrapper(command, tab) {\n  try {\n    if (typeof lastActivity !== 'undefined') {\n      lastActivity = Date.now();\n    }\n    \n    console.log('\u2328\uFE0F Keyboard command received:', command, 'on tab:', tab?.id);\n    \n    if (!tab || !tab.id) {\n      console.warn('\u26A0\uFE0F No active tab found for command:', command);\n      if (typeof showErrorNotification === 'function') {\n        await showErrorNotification('Please ensure you are on a valid web page and try the command again.');\n      }\n      return;\n    }\n    \n    // Inject content script on-demand before executing command\n    await injectContentScript(tab.id, false);\n    \n    // Delegate to existing handler\n    if (typeof handleKeyboardCommand === 'function') {\n      await handleKeyboardCommand(command, tab);\n    } else {\n      console.warn('\u26A0\uFE0F handleKeyboardCommand function not available');\n    }\n  } catch (error) {\n    console.error('\u274C Error in command wrapper:', error);\n    \n    if (globalProxyRouter && globalProxyRouter.errorHandler && typeof globalProxyRouter.errorHandler.handleError === 'function') {\n      globalProxyRouter.errorHandler.handleError(error, 'Command Handler', { command, tabId: tab?.id }, 'medium');\n    }\n    \n    if (typeof showErrorNotification === 'function') {\n      await showErrorNotification(`Command '${command}' failed. Please try again.`);\n    }\n  }\n}\n\n/**\n * MV3 COMPLIANT: Register ALL Chrome API event listeners during initial script evaluation\n * This MUST happen synchronously during script parsing, not in async functions\n */\n\n// Register alarm listener (MOVED FROM startServiceWorkerWatchdog)\nchrome.alarms.onAlarm.addListener(onAlarmWrapper);\n\n// Register message listener (MOVED FROM setupMessageRouting)\nchrome.runtime.onMessage.addListener(onMessageWrapper);\n\n// Register port connection listener (MOVED FROM setupPortHandling)\nchrome.runtime.onConnect.addListener(onConnectWrapper);\n\n// Register action click listener\nif (chrome.action && chrome.action.onClicked) {\n  chrome.action.onClicked.addListener(onActionClickWrapper);\n}\n\n// Register command listener\nif (chrome.commands && chrome.commands.onCommand) {\n  chrome.commands.onCommand.addListener(onCommandWrapper);\n}\n\n// Context menu handler wrapper\nasync function onContextMenuClickWrapper(info, tab) {\n  try {\n    if (typeof lastActivity !== 'undefined') {\n      lastActivity = Date.now();\n    }\n    \n    console.log('\uD83D\uDCCB Context menu clicked:', info.menuItemId);\n    \n    // Inject content script on-demand before handling context menu action\n    if (tab && tab.id) {\n      await injectContentScript(tab.id, false);\n    }\n    \n    // Delegate to context menu manager if available\n    if (typeof contextMenuManager !== 'undefined' && contextMenuManager && typeof contextMenuManager.handleContextMenuClick === 'function') {\n      await contextMenuManager.handleContextMenuClick(info, tab);\n    } else {\n      console.warn('\u26A0\uFE0F contextMenuManager not available');\n    }\n  } catch (error) {\n    console.error('\u274C Error in context menu wrapper:', error);\n    \n    if (globalProxyRouter && globalProxyRouter.errorHandler && typeof globalProxyRouter.errorHandler.handleError === 'function') {\n      globalProxyRouter.errorHandler.handleError(error, 'Context Menu Handler', {\n        menuItemId: info?.menuItemId,\n        tabId: tab?.id\n      }, 'medium');\n    }\n  }\n}\n\n// Tab update handler wrapper\nfunction onTabUpdatedWrapper(tabId, changeInfo, tab) {\n  try {\n    if (typeof lastActivity !== 'undefined') {\n      lastActivity = Date.now();\n    }\n    \n    // Log significant tab changes\n    if (changeInfo.status === 'complete' || changeInfo.url) {\n      console.log(`\uD83D\uDCC4 Tab ${tabId} updated:`, changeInfo);\n    }\n    \n    // Handle tab updates if needed by other components\n    // This is typically used for content script injection or state tracking\n  } catch (error) {\n    console.error('\u274C Error in tab update wrapper:', error);\n  }\n}\n\n// Register context menu listener\nif (chrome.contextMenus && chrome.contextMenus.onClicked) {\n  chrome.contextMenus.onClicked.addListener(onContextMenuClickWrapper);\n}\n\n// Register tab update listener  \nif (chrome.tabs && chrome.tabs.onUpdated) {\n  chrome.tabs.onUpdated.addListener(onTabUpdatedWrapper);\n}\n\n// NOTE: No module-scope logging for MV3 compliance - all event listeners registered above\n\n// ============================================================================\n// INITIALIZATION TIMEOUT - Prevent infinite queuing if router fails to initialize\n// ============================================================================\n\nconst INIT_TIMEOUT_MS = 10000; // 10 seconds\ninitTimeoutId = setTimeout(() => {\n  if (!proxyRouterReady) {\n    console.error('\u274C CRITICAL: ProxyRouter failed to initialize within timeout');\n    \n    // Respond to all queued messages with error\n    console.warn(`Clearing ${pendingMessages.length} queued messages due to initialization failure`);\n    pendingMessages.forEach(({sendResponse}) => {\n      try {\n        sendResponse({\n          error: 'Service worker initialization failed',\n          retryable: true,\n          errorCode: 'INIT_TIMEOUT'\n        });\n      } catch (e) {\n        // sendResponse may have already expired, ignore\n        console.debug('sendResponse callback expired:', e);\n      }\n    });\n    pendingMessages = [];\n    \n    // Clear queued connections\n    console.warn(`Clearing ${pendingConnections.length} queued connections due to initialization failure`);\n    pendingConnections.forEach(({port}) => {\n      try {\n        port.postMessage({\n          type: 'INIT_ERROR',\n          error: 'Service worker initialization failed'\n        });\n        port.disconnect();\n      } catch (e) {\n        console.debug('Port already disconnected:', e);\n      }\n    });\n    pendingConnections = [];\n  }\n}, INIT_TIMEOUT_MS);\n\n/**\n * CR-011 FIX: Fallback queue draining when ProxyRouter fails to initialize\n * Handles pending messages and connections with proper error responses\n * Respects mutex to prevent race conditions with normal queue draining\n */\nasync function drainQueuesFallback() {\n  // CR-011 FIX: Check if queue is already drained or being drained\n  if (queueDrained) {\n    console.log('\u2705 Queue already drained, skipping fallback...');\n    return;\n  }\n  \n  if (queueDrainInProgress) {\n    console.log('\u23F3 Queue draining in progress, waiting for completion...');\n    if (queueDrainLock) {\n      await queueDrainLock;\n    }\n    return;\n  }\n  \n  // CR-011 FIX: Acquire the drain lock to prevent concurrent draining\n  queueDrainInProgress = true;\n  let resolveLock;\n  queueDrainLock = new Promise(resolve => { resolveLock = resolve; });\n  \n  try {\n    console.log('\uD83D\uDD04 Draining queues with fallback handling (mutex-protected)...');\n    \n    // Drain pending messages with error responses\n    const messagesToDrain = [...pendingMessages];\n    pendingMessages = [];\n    \n    for (const item of messagesToDrain) {\n      try {\n        item.sendResponse({\n          ok: false,\n          error: 'ProxyRouter initialization failed, using fallback handling',\n          requestId: item.message.requestId || `fallback_${Date.now()}`,\n          fallback: true\n        });\n      } catch (error) {\n        console.warn('\u274C Failed to respond to queued message:', error);\n      }\n    }\n    \n    // Drain pending connections (they will timeout naturally)\n    const connectionsToDrain = [...pendingConnections];\n    pendingConnections = [];\n    \n    for (const item of connectionsToDrain) {\n      console.log(`\u26A0\uFE0F Dropping queued connection: ${item.port.name} (ProxyRouter failed)`);\n    }\n    \n    // CR-011 FIX: Mark queue as drained after fallback processing\n    queueDrained = true;\n    \n    console.log(`\u2705 Fallback queue drain completed: ${messagesToDrain.length} messages, ${connectionsToDrain.length} connections`);\n    \n  } catch (error) {\n    console.error('\u274C Fallback queue draining failed:', error);\n    // Don't mark as drained on error to allow retry\n  } finally {\n    // CR-011 FIX: Always release the lock\n    queueDrainInProgress = false;\n    if (resolveLock) {\n      resolveLock();\n    }\n  }\n}\n\n// ============================================================================\n// ON-DEMAND CONTENT SCRIPT INJECTION\n// ============================================================================\n\n/**\n * Inject content script when needed (on-demand injection)\n * Checks if already injected to prevent duplicate injection\n * @param {number} tabId - The ID of the tab to inject into\n * @param {boolean} allFrames - Whether to inject into all frames (default: false)\n * @returns {Promise<boolean>} - True if injected successfully, false if already injected or failed\n */\nasync function injectContentScript(tabId, allFrames = false) {\n  try {\n    safeConsole.log(`\uD83D\uDC89 Attempting to inject content script into tab ${tabId}...`);\n    \n    // Check if already injected by testing for the flag\n    const results = await chrome.scripting.executeScript({\n      target: { tabId },\n      func: () => window.__STEPTWO_INJECTED\n    });\n    \n    if (results && results[0]?.result) {\n      safeConsole.log(`\u2705 Content script already injected in tab ${tabId}, skipping...`);\n      return false; // Already injected\n    }\n    \n    // Inject the bundled content script\n    await chrome.scripting.executeScript({\n      target: { tabId, allFrames },\n      files: ['dist/content.js']\n    });\n    \n    safeConsole.log(`\u2705 Content script injected successfully into tab ${tabId}`);\n    return true;\n    \n  } catch (error) {\n    safeConsole.error(`\u274C Failed to inject content script into tab ${tabId}:`, error);\n    \n    // Log specific error types for debugging\n    if (error.message?.includes('Cannot access')) {\n      safeConsole.warn('\u26A0\uFE0F Cannot inject into this page (likely chrome:// or extension page)');\n    } else if (error.message?.includes('No tab with id')) {\n      safeConsole.warn('\u26A0\uFE0F Tab no longer exists');\n    }\n    \n    return false;\n  }\n}\n\n// Make injectContentScript available globally for other modules\nglobalThis.injectContentScript = injectContentScript;\n\n// Define required scripts for initialization tracking\nconst requiredScripts = [\n  './consolidated-background.js',\n  '../lib/message-schema.js',\n  '../lib/proxy-router.js',\n  '../lib/retry-manager.js',\n  '../lib/sample-data.js',\n  '../lib/consolidated-systems.js'\n];\n\n// Initialize script loading counters\nlet scriptsLoaded = 0;\nlet scriptLoadErrors = [];\n\n// NOTE: importScripts blocks removed for ES module compatibility and MV3 compliance\n// All dependencies are bundled into dist/background.js via esbuild\n// The following code is preserved as comments for reference only:\n/*\ntry {\n  importScripts('./consolidated-background.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('consolidated-background.js');\n}\n\ntry {\n  importScripts('../lib/message-schema.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('message-schema.js');\n}\n\ntry {\n  importScripts('../lib/proxy-router.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('proxy-router.js');\n}\n\ntry {\n  importScripts('../lib/retry-manager.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('retry-manager.js');\n}\n\ntry {\n  importScripts('../lib/sample-data.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('sample-data.js');\n}\n\ntry {\n  importScripts('../lib/consolidated-systems.js');\n  scriptsLoaded++;\n} catch (error) {\n  scriptLoadErrors.push('consolidated-systems.js');\n}\n*/\n\n// ============================================================================\n// MV3 COMPLIANT PROXY ROUTER SYSTEM\n// ============================================================================\n\n// ProxyRouter singleton is now declared at the top of the file\n// This ensures proper initialization order\n\n/**\n * ProxyRouter - Centralized communication system for STEPTWO Chrome Extension\n * Routes messages between service worker, content scripts, popup, and dashboard\n * Provides port channel support with keepalive and state persistence\n * MV3 COMPLIANT: Singleton pattern for top-level event listener registration\n */\nclass ProxyRouter {\n  constructor(options = {}) {\n    this.isInitialized = false;\n    this.messageHandlers = new Map();\n    this.portConnections = new Map(); // Map<string, Set<ConnectionInfo>>\n    this.subscriptions = new Map(); // Map<string, Set<string>>\n    this.messageQueue = [];\n    this.maxQueueSize = options.maxPendingMessages || 1000; // Bounded queue to prevent memory leaks\n    this.state = {\n      jobs: new Map(),\n      progress: new Map(),\n      permissions: new Map(),\n      health: { status: 'starting', lastCheck: Date.now() },\n      retries: new Map(), // Phase 1b: Retry state tracking\n      demo: {\n        isActive: false,\n        currentGalleryType: null,\n        sampleData: null,\n        sessionStartTime: null,\n        stats: {}\n      }\n    };\n    \n    // Backpressure management\n    this.updateThrottle = new Map();\n    this.maxUpdateRate = 100; // 10Hz = 100ms minimum interval\n    this.maxQueueSize = 1000;\n    \n    // Session state persistence\n    this.stateKey = 'steptwo_proxy_state';\n    this.lastStateSave = 0;\n    this.stateSaveInterval = 5000; // Save state every 5 seconds\n    \n    // Port keepalive management\n    this.portKeepaliveInterval = 30000; // 30 seconds\n    this.portKeepaliveTimers = new Map();\n    \n    // Phase 1b: RetryManager integration\n    this.retryManager = null;\n    this.errorHandler = null;\n    \n    // Demo Mode Manager integration\n    this.demoModeManager = null;\n    \n    // Initialize performance metrics to prevent undefined access during early messages\n    this.performanceMetrics = {\n      startTime: Date.now(),\n      messageCount: 0,\n      errorCount: 0,\n      memoryUsage: [],\n      responseTime: [],\n      lastHealthCheck: Date.now(),\n      // ENHANCED: Add message validation telemetry\n      validationErrors: 0,\n      normalizedMessages: 0,\n      legacyMessages: 0,\n      broadcastsSent: 0,\n      broadcastValidationErrors: 0\n    };\n    \n    console.log('\uD83D\uDD04 ProxyRouter initialized');\n  }\n\n  /**\n   * Initialize the ProxyRouter system\n   * MV3 COMPLIANT: Idempotent initialization that can be called multiple times\n   */\n  async initialize(existingMessageHandler = null) {\n    // Idempotent check - prevent duplicate initialization\n    if (this.isInitialized) {\n      console.log('\u2705 ProxyRouter already initialized, skipping...');\n      return true;\n    }\n    \n    try {\n      console.log('\uD83D\uDE80 Initializing ProxyRouter...');\n      \n      // Phase 1b: Initialize ErrorHandlingSystem first\n      await this.initializeErrorHandling();\n      \n      // Phase 1b: Initialize RetryManager with ErrorHandlingSystem integration\n      await this.initializeRetryManager();\n      \n      // Load persisted state\n      await this.loadState();\n      \n      // Set up message routing\n      this.setupMessageRouting();\n      \n      // Set up port connection handling\n      this.setupPortHandling();\n      \n      // Register default message handlers\n      this.registerDefaultHandlers(existingMessageHandler);\n      \n      // Phase 1b: Register retry message handlers\n      this.registerRetryHandlers();\n      \n      // Initialize and register demo mode handlers\n      await this.initializeDemoMode();\n      this.registerDemoModeHandlers();\n      \n      // Start periodic state saving\n      this.startPeriodicStateSave();\n      \n      // Start port keepalive system\n      this.startPortKeepalive();\n      \n      // ENHANCED: Start watchdog timers for service worker health\n      this.startServiceWorkerWatchdog();\n      \n      // ENHANCED: Initialize performance monitoring\n      this.initializePerformanceMonitoring();\n      \n      this.isInitialized = true;\n      \n      // Update health status\n      this.updateHealthStatus('running');\n      \n      console.log('\u2705 ProxyRouter initialized successfully with enhanced monitoring');\n      return true;\n      \n    } catch (error) {\n      console.error('\u274C ProxyRouter initialization failed:', error);\n      this.updateHealthStatus('error', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * ENHANCED: Initialize performance monitoring safeguards\n   */\n  initializePerformanceMonitoring() {\n    // Performance metrics are already initialized in constructor to prevent early access errors\n    // This method now only sets up the monitoring intervals and resets counters if needed\n    if (!this.performanceMetrics) {\n      console.warn('\u26A0\uFE0F Performance metrics not found in constructor, reinitializing...');\n      this.performanceMetrics = {\n        startTime: Date.now(),\n        messageCount: 0,\n        errorCount: 0,\n        memoryUsage: [],\n        responseTime: [],\n        lastHealthCheck: Date.now()\n      };\n    } else {\n      // Reset start time and clear arrays for fresh monitoring\n      this.performanceMetrics.startTime = Date.now();\n      this.performanceMetrics.lastHealthCheck = Date.now();\n      console.log('\uD83D\uDCCA Performance monitoring reinitializing with existing metrics');\n    }\n\n    // Monitor message processing performance\n    setInterval(() => {\n      this.collectPerformanceMetrics();\n    }, 30000); // Every 30 seconds\n\n    console.log('\uD83D\uDCCA Performance monitoring initialized');\n  }\n\n  /**\n   * ENHANCED: Start service worker watchdog timers\n   * MV3 COMPLIANT: Only creates alarms, does NOT register event listeners\n   */\n  startServiceWorkerWatchdog() {\n    // Create a keepalive alarm to prevent service worker suspension\n    chrome.alarms.create('steptwo-keepalive', {\n      delayInMinutes: 1.0,\n      periodInMinutes: 1.0\n    });\n\n    // Create health check alarm\n    chrome.alarms.create('steptwo-health-check', {\n      delayInMinutes: 1,\n      periodInMinutes: 2\n    });\n\n    // NOTE: Event listener is registered at top level during script evaluation\n    console.log('\u23F0 Service worker watchdog timers started');\n  }\n\n  /**\n   * Handle alarm events with proper context binding\n   * ENHANCED: Includes functionality from removed duplicate listener\n   */\n  async handleAlarmEvent(alarm) {\n    try {\n      if (typeof lastActivity !== 'undefined') {\n        lastActivity = Date.now();\n      }\n      if (typeof lastAlarmHeartbeat !== 'undefined') {\n        lastAlarmHeartbeat = Date.now();\n      }\n      if (typeof alarmFailureCount !== 'undefined') {\n        alarmFailureCount = 0; // Reset failure count on successful alarm\n      }\n      \n      // Handle STEPTWO keepalive alarm\n      if (alarm.name === 'steptwo-keepalive' || (typeof KEEPALIVE_ALARM_NAME !== 'undefined' && alarm.name === KEEPALIVE_ALARM_NAME)) {\n        // Phase 2: Track keepalive metrics\n        keepaliveAlarmCount++;\n        lastKeepaliveTime = Date.now();\n        \n        console.log('\uD83D\uDC93 Keepalive heartbeat - service worker active');\n        this.performKeepalive();\n        \n        // Clear fallback timer since alarm is working\n        if (typeof fallbackKeepaliveTimer !== 'undefined' && fallbackKeepaliveTimer) {\n          clearTimeout(fallbackKeepaliveTimer);\n          fallbackKeepaliveTimer = null;\n        }\n        \n        // Quick health check and stats logging\n        if (typeof serviceWorkerStartTime !== 'undefined') {\n          const uptime = Math.floor((Date.now() - serviceWorkerStartTime) / 1000);\n          const memoryInfo = performance.memory ? {\n            used: Math.floor(performance.memory.usedJSHeapSize / 1024 / 1024),\n            total: Math.floor(performance.memory.totalJSHeapSize / 1024 / 1024)\n          } : null;\n          \n          console.log('\uD83D\uDCCA SW Status:', {\n            uptime: `${uptime}s`,\n            initialized: typeof isExtensionInitialized !== 'undefined' ? isExtensionInitialized : 'unknown',\n            memory: memoryInfo ? `${memoryInfo.used}/${memoryInfo.total}MB` : 'unknown',\n            lastActivity: typeof lastActivity !== 'undefined' ? `${Math.floor((Date.now() - lastActivity) / 1000)}s ago` : 'unknown',\n            alarmWorking: true\n          });\n        }\n        \n        // Automatic recovery if not initialized\n        if (typeof isExtensionInitialized !== 'undefined' && typeof isShuttingDown !== 'undefined' && \n            !isExtensionInitialized && !isShuttingDown && typeof initializeExtension === 'function') {\n          console.log('\uD83D\uDD27 Extension not initialized during keepalive, triggering recovery...');\n          await initializeExtension();\n        }\n        \n        // Verify alarm system health\n        if (typeof verifyAndRepairAlarmSystem === 'function') {\n          await verifyAndRepairAlarmSystem();\n        }\n        \n      } else if (alarm.name === 'steptwo-health-check' || (typeof HEALTH_CHECK_ALARM_NAME !== 'undefined' && alarm.name === HEALTH_CHECK_ALARM_NAME)) {\n        console.log('\uD83C\uDFE5 Performing comprehensive health check...');\n        this.performHealthCheck();\n        \n        if (typeof performComprehensiveHealthCheck === 'function') {\n          await performComprehensiveHealthCheck();\n        }\n      } else {\n        console.log('\uD83D\uDD14 Unknown alarm:', alarm.name);\n      }\n    } catch (error) {\n      console.error('\u274C Alarm handler error:', error);\n      \n      // Phase 2: Track keepalive failures\n      keepaliveAlarmFailures++;\n      \n      if (typeof alarmFailureCount !== 'undefined') {\n        alarmFailureCount++;\n      }\n      \n      if (this.errorHandler && typeof this.errorHandler.handleError === 'function') {\n        this.errorHandler.handleError(error, 'Alarm Handler', { \n          alarmName: alarm.name, \n          failureCount: typeof alarmFailureCount !== 'undefined' ? alarmFailureCount : 0\n        }, 'medium');\n      }\n      \n      // If alarm handler fails repeatedly, start fallback mechanisms\n      if (typeof alarmFailureCount !== 'undefined' && alarmFailureCount >= 3 && typeof activateFallbackKeepalive === 'function') {\n        console.warn('\u26A0\uFE0F Multiple alarm failures detected, activating fallback keepalive...');\n        activateFallbackKeepalive();\n      }\n    }\n  }\n\n  /**\n   * Handle runtime messages with proper context binding\n   */\n  handleMessageBound(message, sender, sendResponse) {\n    this.handleMessage(message, sender, sendResponse);\n    return true; // Keep message channel open for async responses\n  }\n\n  /**\n   * ENHANCED: Perform keepalive to prevent service worker suspension\n   */\n  performKeepalive() {\n    console.log('\uD83D\uDC93 Service worker keepalive');\n    this.updateHealthStatus('active');\n    \n    // Ping all connected ports to maintain connections\n    for (const [portName, connections] of this.portConnections) {\n      for (const connection of connections) {\n        if (connection.connected) {\n          try {\n            connection.port.postMessage({\n              action: 'PORT_KEEPALIVE',\n              timestamp: Date.now()\n            });\n          } catch (error) {\n            console.warn('Failed to send keepalive to port:', portName);\n            this.handlePortDisconnection(connection.port);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * ENHANCED: Perform comprehensive health check with validation telemetry\n   */\n  performHealthCheck() {\n    const now = Date.now();\n    const uptime = this.performanceMetrics ? now - this.performanceMetrics.startTime : 0;\n    \n    const healthData = {\n      status: 'healthy',\n      uptime,\n      messageCount: this.performanceMetrics ? this.performanceMetrics.messageCount : 0,\n      errorCount: this.performanceMetrics ? this.performanceMetrics.errorCount : 0,\n      portConnections: this.portConnections.size,\n      memoryUsage: this.getMemoryUsage(),\n      timestamp: now,\n      // ENHANCED: Include validation telemetry\n      validation: {\n        validationErrors: this.performanceMetrics ? this.performanceMetrics.validationErrors : 0,\n        normalizedMessages: this.performanceMetrics ? this.performanceMetrics.normalizedMessages : 0,\n        legacyMessages: this.performanceMetrics ? this.performanceMetrics.legacyMessages : 0,\n        broadcastsSent: this.performanceMetrics ? this.performanceMetrics.broadcastsSent : 0,\n        broadcastValidationErrors: this.performanceMetrics ? this.performanceMetrics.broadcastValidationErrors : 0,\n        recentFailures: this.validationFailures ? this.validationFailures.length : 0\n      }\n    };\n\n    // ENHANCED: Check for validation issues\n    if (this.performanceMetrics) {\n      const validationErrorRate = this.performanceMetrics.validationErrors / Math.max(this.performanceMetrics.messageCount, 1);\n      \n      if (validationErrorRate > 0.1) { // More than 10% validation failures\n        healthData.status = 'degraded';\n        healthData.warning = `High validation failure rate: ${(validationErrorRate * 100).toFixed(1)}%`;\n      } else if (this.performanceMetrics.errorCount > 50) {\n        healthData.status = 'degraded';\n        healthData.warning = 'High general error count detected';\n      }\n\n      if (uptime > 3600000 && this.performanceMetrics.messageCount === 0) {\n        healthData.status = 'inactive';\n        healthData.warning = 'No messages processed recently';\n      }\n\n      // Check for broadcast validation issues\n      if (this.performanceMetrics.broadcastValidationErrors > 10) {\n        healthData.status = 'degraded';\n        healthData.warning = 'High broadcast validation failures detected';\n      }\n    }\n\n    this.updateHealthStatus(healthData.status, healthData);\n    console.log('\uD83C\uDFE5 Enhanced health check completed:', {\n      ...healthData,\n      validationSummary: {\n        errorRate: this.performanceMetrics ? (this.performanceMetrics.validationErrors / Math.max(this.performanceMetrics.messageCount, 1) * 100).toFixed(1) + '%' : '0%',\n        legacyMessageRate: this.performanceMetrics ? (this.performanceMetrics.legacyMessages / Math.max(this.performanceMetrics.messageCount, 1) * 100).toFixed(1) + '%' : '0%'\n      }\n    });\n  }\n\n  /**\n   * ENHANCED: Collect performance metrics\n   */\n  collectPerformanceMetrics() {\n    if (!this.performanceMetrics) {\n      console.warn('\u26A0\uFE0F Performance metrics not initialized, skipping collection');\n      return;\n    }\n    \n    const memUsage = this.getMemoryUsage();\n    \n    this.performanceMetrics.memoryUsage.push({\n      usage: memUsage,\n      timestamp: Date.now()\n    });\n\n    // Keep only last 100 entries\n    if (this.performanceMetrics.memoryUsage.length > 100) {\n      this.performanceMetrics.memoryUsage.shift();\n    }\n\n    // Check for memory leaks\n    if (this.performanceMetrics.memoryUsage.length > 10) {\n      const recent = this.performanceMetrics.memoryUsage.slice(-10);\n      const growth = recent[recent.length - 1].usage - recent[0].usage;\n      \n      if (growth > 50 * 1024 * 1024) { // 50MB growth\n        console.warn('\u26A0\uFE0F Potential memory leak detected');\n        this.broadcastUpdate('warning', {\n          type: 'memory_leak',\n          message: 'High memory usage detected',\n          growth: growth / (1024 * 1024) + 'MB'\n        });\n      }\n    }\n  }\n\n  /**\n   * Broadcast method for RetryManager compatibility\n   * Delegates to broadcastUpdate method\n   */\n  broadcast(message) {\n    try {\n      if (!message || typeof message !== 'object') {\n        console.warn('\u26A0\uFE0F Invalid broadcast message:', message);\n        return;\n      }\n\n      // Extract update type and data from the message\n      const updateType = message.updateType || message.action || 'unknown_update';\n      const data = message.data || message;\n      const options = {\n        priority: message.priority,\n        fallbackToMessage: message.fallbackToMessage\n      };\n\n      console.log(`\uD83D\uDCE1 [BROADCAST] RetryManager broadcast:`, {\n        updateType,\n        dataSize: JSON.stringify(data).length,\n        source: message.source || 'unknown'\n      });\n\n      // Use the existing broadcastUpdate method\n      this.broadcastUpdate(updateType, data, options);\n      \n    } catch (error) {\n      console.error('\u274C Error in broadcast method:', error);\n    }\n  }\n\n  /**\n   * ENHANCED: Get memory usage estimate\n   */\n  getMemoryUsage() {\n    // Estimate memory usage based on stored data\n    let estimatedUsage = 0;\n    \n    // Count cached data\n    estimatedUsage += this.messageQueue.length * 1024; // ~1KB per message\n    estimatedUsage += this.portConnections.size * 2048; // ~2KB per connection\n    \n    // Add state size\n    try {\n      const stateStr = JSON.stringify(this.state);\n      estimatedUsage += stateStr.length * 2; // UTF-16 encoding\n    } catch (error) {\n      // Ignore serialization errors\n    }\n\n    return estimatedUsage;\n  }\n\n  /**\n   * ENHANCED: Track validation failure for telemetry\n   * @param {string} error - Validation error message\n   * @param {Object} message - Original message that failed validation\n   * @param {Object} sender - Chrome sender object\n   */\n  trackValidationFailure(error, message, sender) {\n    try {\n      if (this.performanceMetrics) {\n        this.performanceMetrics.validationErrors++;\n      }\n\n      // Log structured validation failure data\n      const failureData = {\n        error,\n        timestamp: Date.now(),\n        messageAction: message?.action || message?.type || 'unknown',\n        messageSize: JSON.stringify(message || {}).length,\n        senderTabId: sender?.tab?.id || 'no-tab',\n        senderUrl: sender?.tab?.url || sender?.url || 'unknown'\n      };\n\n      console.warn('\uD83D\uDCCA [TELEMETRY] Validation failure tracked:', failureData);\n\n      // Store failure for health reporting (keep last 100)\n      if (!this.validationFailures) {\n        this.validationFailures = [];\n      }\n      this.validationFailures.push(failureData);\n      \n      // Keep only last 100 failures to prevent memory growth\n      if (this.validationFailures.length > 100) {\n        this.validationFailures.shift();\n      }\n\n      // Update error count for health checks\n      if (this.performanceMetrics) {\n        this.performanceMetrics.errorCount++;\n      }\n\n    } catch (trackingError) {\n      console.error('\u274C Failed to track validation failure:', trackingError);\n    }\n  }\n\n  /**\n   * ENHANCED: Create validated error response using proper StepTwoResponse format\n   * @param {string} requestId - Request ID for response correlation\n   * @param {string} error - Error message\n   * @param {Object} metadata - Additional response metadata\n   * @returns {Object} Validated StepTwoResponse\n   */\n  createValidatedErrorResponse(requestId, error, metadata = {}) {\n    try {\n      // Use the MessageValidator to create proper response format\n      if (globalThis.StepTwoMessageSchema?.MessageValidator) {\n        return globalThis.StepTwoMessageSchema.MessageValidator.createResponse(\n          requestId,\n          false,\n          null,\n          error,\n          {\n            timestamp: Date.now(),\n            source: 'proxy_router',\n            validationContext: true,\n            ...metadata\n          }\n        );\n      } else {\n        // Fallback response format\n        return {\n          ok: false,\n          error,\n          requestId,\n          timestamp: Date.now(),\n          metadata: {\n            source: 'proxy_router_fallback',\n            validationContext: true,\n            ...metadata\n          }\n        };\n      }\n    } catch (responseError) {\n      console.error('\u274C Failed to create validated error response:', responseError);\n      // Ultimate fallback\n      return {\n        ok: false,\n        error: `Response creation failed: ${responseError.message}`,\n        requestId: requestId || 'unknown',\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  /**\n   * ENHANCED: Create error response (legacy compatibility)\n   * @param {string} requestId - Request ID for response correlation\n   * @param {string} error - Error message\n   * @returns {Object} Error response\n   */\n  createErrorResponse(requestId, error) {\n    return this.createValidatedErrorResponse(requestId, error, { legacy: true });\n  }\n\n  /**\n   * Set up message routing through chrome.runtime.onMessage\n   * MV3 COMPLIANT: Does NOT register event listeners (done at top level)\n   */\n  setupMessageRouting() {\n    // NOTE: Event listener is registered at top level during script evaluation\n    console.log('\uD83D\uDCE8 Message routing established');\n  }\n\n  /**\n   * Set up port connection handling through chrome.runtime.onConnect\n   * MV3 COMPLIANT: Does NOT register event listeners (done at top level)\n   */\n  setupPortHandling() {\n    // NOTE: Event listener is registered at top level during script evaluation\n    console.log('\uD83D\uDD0C Port handling established');\n  }\n\n  /**\n   * Handle incoming messages with validation and routing\n   * ENHANCED: Added defensive checks and bounded queue\n   */\n  async handleMessage(message, sender, sendResponse) {\n    const startTime = performance.now();\n    const requestId = message.requestId || `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Defensive check: Bounded messageQueue to prevent memory leaks\n      if (this.messageQueue.length >= this.maxQueueSize) {\n        console.warn(`\u26A0\uFE0F Message queue full (${this.messageQueue.length}), dropping oldest messages`);\n        this.messageQueue.splice(0, Math.floor(this.maxQueueSize * 0.1)); // Drop 10% of oldest\n      }\n      \n      // Add message to queue for processing history\n      this.messageQueue.push({\n        requestId,\n        action: message.action || message.type,\n        timestamp: Date.now(),\n        size: JSON.stringify(message).length\n      });\n      \n      // Keep queue bounded\n      if (this.messageQueue.length > this.maxQueueSize) {\n        this.messageQueue.shift();\n      }\n      // Extract action from message (support legacy 'type' field)\n      let action = message.action || message.type;\n      \n      // ENHANCED LOGGING: Track message metadata\n      const messageMetadata = {\n        requestId,\n        action,\n        messageSize: JSON.stringify(message).length,\n        hasPayload: !!message.payload,\n        senderTabId: sender.tab?.id || 'no-tab',\n        senderUrl: sender.tab?.url || 'no-url',\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log(`\uD83D\uDCE8 [PROXY] Incoming message:`, messageMetadata);\n      \n      // Add source information if not present\n      if (!message.source) {\n        if (sender.tab) {\n          message.source = globalThis.StepTwoMessageSchema?.MESSAGE_SOURCES?.CONTENT_SCRIPT || 'content_script';\n        } else {\n          message.source = globalThis.StepTwoMessageSchema?.MESSAGE_SOURCES?.POPUP || 'popup';\n        }\n      }\n      \n      // Track message processing performance\n      if (this.performanceMetrics) {\n        this.performanceMetrics.messageCount++;\n      }\n      \n      // ENHANCED: Validate and normalize message with comprehensive error handling and telemetry\n      if (globalThis.StepTwoMessageSchema?.MessageValidator) {\n        const validationStartTime = performance.now();\n        \n        // Use the new validateAndNormalize method for comprehensive handling\n        const result = globalThis.StepTwoMessageSchema.MessageValidator.validateAndNormalize(\n          message,\n          sender,\n          false // Use lenient validation for better compatibility\n        );\n        \n        const validationTime = performance.now() - validationStartTime;\n        \n        if (result.valid) {\n          // Update the message with the normalized version\n          message = result.message;\n          action = message.action; // Update action variable\n          \n          // Log successful validation with any warnings\n          console.log(`\u2705 [PROXY] Message validated and normalized (${validationTime.toFixed(2)}ms):`, {\n            requestId: message.requestId,\n            action: message.action,\n            source: message.source,\n            warnings: result.warnings?.length || 0\n          });\n          \n          // Log warnings if present\n          if (result.warnings?.length > 0) {\n            console.warn(`\u26A0\uFE0F [PROXY] Message validation warnings:`, {\n              requestId: message.requestId,\n              warnings: result.warnings\n            });\n          }\n        } else {\n          // Track validation failures for telemetry\n          this.trackValidationFailure(result.error, message, sender);\n          \n          console.error(`\u274C [PROXY] Message validation failed (${validationTime.toFixed(2)}ms):`, {\n            error: result.error,\n            requestId: result.message?.requestId || 'unknown',\n            originalAction: message?.action || message?.type || 'unknown',\n            messageKeys: Object.keys(message),\n            warnings: result.warnings\n          });\n          \n          // Use the normalized message's requestId for better error reporting\n          const fallbackRequestId = result.message?.requestId || requestId;\n          sendResponse(this.createValidatedErrorResponse(fallbackRequestId, `Message validation failed: ${result.error}`));\n          return;\n        }\n      } else {\n        // ENHANCED: Improved fallback validation when schema is unavailable\n        console.warn(`\u26A0\uFE0F [PROXY] MessageValidator not available, using enhanced fallback:`, {\n          requestId,\n          action,\n          hasAction: !!action,\n          schemaAvailable: false\n        });\n        \n        // Apply basic normalization manually\n        if (!action) {\n          console.error(`\u274C [PROXY] No action specified in fallback validation:`, {\n            requestId,\n            messageKeys: Object.keys(message),\n            possibleActions: ['action', 'type']\n          });\n          this.trackValidationFailure('No action specified', message, sender);\n          sendResponse(this.createValidatedErrorResponse(requestId, 'Message must specify an action'));\n          return;\n        }\n        \n        // Basic normalization for fallback\n        if (!message.source) {\n          message.source = sender?.tab ? 'content_script' : 'popup';\n        }\n        \n        if (!message.requestId) {\n          message.requestId = requestId;\n        }\n      }\n\n      // Route message to appropriate handler\n      const handler = this.messageHandlers.get(action);\n      if (handler) {\n        const handlerStartTime = performance.now();\n        console.log(`\uD83D\uDE80 [PROXY] Routing to handler:`, {\n          requestId,\n          action,\n          handlerExists: true,\n          availableHandlers: Array.from(this.messageHandlers.keys())\n        });\n        \n        try {\n          await handler(message, sender, sendResponse, requestId);\n          const handlerTime = performance.now() - handlerStartTime;\n          console.log(`\u2705 [PROXY] Handler completed (${handlerTime.toFixed(2)}ms):`, {\n            requestId,\n            action,\n            success: true\n          });\n        } catch (handlerError) {\n          const handlerTime = performance.now() - handlerStartTime;\n          console.error(`\u274C [PROXY] Handler failed (${handlerTime.toFixed(2)}ms):`, {\n            requestId,\n            action,\n            error: handlerError.message,\n            stack: handlerError.stack\n          });\n          throw handlerError;\n        }\n      } else {\n        // BUGFIX: Try legacy handler fallback before failing\n        if (this.legacyHandler && typeof this.legacyHandler.handleMessage === 'function') {\n          console.log(`\uD83D\uDD04 [PROXY] Falling back to legacy handler:`, {\n            requestId,\n            action,\n            legacyHandlerAvailable: true\n          });\n          \n          try {\n            await this.legacyHandler.handleMessage(message, sender, sendResponse);\n            console.log(`\u2705 [PROXY] Legacy handler completed:`, {\n              requestId,\n              action,\n              success: true\n            });\n            return;\n          } catch (legacyError) {\n            console.error(`\u274C [PROXY] Legacy handler failed:`, {\n              requestId,\n              action,\n              error: legacyError.message\n            });\n            // Fall through to error response\n          }\n        }\n        \n        console.error(`\u274C [PROXY] No handler found:`, {\n          requestId,\n          action,\n          availableHandlers: Array.from(this.messageHandlers.keys()),\n          legacyHandlerAvailable: !!(this.legacyHandler && this.legacyHandler.handleMessage),\n          messageType: typeof message,\n          messageKeys: Object.keys(message)\n        });\n        sendResponse(this.createErrorResponse(requestId, `No handler for action: ${action}`));\n      }\n      \n    } catch (error) {\n      const totalTime = performance.now() - startTime;\n      if (this.performanceMetrics) {\n        this.performanceMetrics.errorCount++;\n      }\n      \n      console.error(`\uD83D\uDCA5 [PROXY] Message handling error (${totalTime.toFixed(2)}ms):`, {\n        requestId,\n        action: message?.action || message?.type,\n        error: error.message,\n        stack: error.stack,\n        messageSize: JSON.stringify(message || {}).length,\n        senderInfo: {\n          tabId: sender.tab?.id,\n          url: sender.tab?.url,\n          origin: sender.origin\n        }\n      });\n      \n      sendResponse(this.createErrorResponse(requestId, error.message));\n    } finally {\n      const totalTime = performance.now() - startTime;\n      console.log(`\u23F1\uFE0F [PROXY] Message processing completed:`, {\n        requestId,\n        totalTime: `${totalTime.toFixed(2)}ms`,\n        action: message?.action || message?.type\n      });\n    }\n  }\n\n  /**\n   * Handle port connections with name-based routing\n   */\n  handlePortConnection(port) {\n    const connectionStartTime = performance.now();\n    \n    // Phase 2: Track connection metrics\n    connectionMetrics.totalConnections++;\n    connectionMetrics.activePorts++;\n    \n    try {\n      const connectionInfo = {\n        port,\n        portId: `${port.name}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        connected: true,\n        lastActivity: Date.now(),\n        subscriptions: new Set(),\n        connectTime: Date.now()\n      };\n      \n      console.log(`\uD83D\uDD0C [PORT] Connection established:`, {\n        portName: port.name,\n        portId: connectionInfo.portId,\n        timestamp: new Date().toISOString(),\n        sender: port.sender,\n        existingConnections: this.portConnections.get(port.name)?.size || 0\n      });\n      \n      // Store port connection in set\n      if (!this.portConnections.has(port.name)) {\n        this.portConnections.set(port.name, new Set());\n      }\n      this.portConnections.get(port.name).add(connectionInfo);\n      \n      const totalConnections = Array.from(this.portConnections.values())\n        .reduce((sum, connections) => sum + connections.size, 0);\n      \n      console.log(`\uD83D\uDCCA [PORT] Connection stats:`, {\n        portName: port.name,\n        connectionsForThisPort: this.portConnections.get(port.name).size,\n        totalConnections,\n        allPortNames: Array.from(this.portConnections.keys())\n      });\n      \n      // Set up port message handling with logging\n      port.onMessage.addListener((message) => {\n        console.log(`\uD83D\uDCE8 [PORT] Message received:`, {\n          portName: port.name,\n          portId: connectionInfo.portId,\n          action: message.action || message.type,\n          messageSize: JSON.stringify(message).length,\n          timestamp: new Date().toISOString()\n        });\n        this.handlePortMessage(port, message);\n      });\n      \n      // Handle port disconnection with enhanced logging\n      port.onDisconnect.addListener(() => {\n        const disconnectTime = Date.now();\n        const connectionDuration = disconnectTime - connectionInfo.connectTime;\n        \n        console.log(`\uD83D\uDD0C\u274C [PORT] Disconnection detected:`, {\n          portName: port.name,\n          portId: connectionInfo.portId,\n          connectionDuration: `${connectionDuration}ms`,\n          reason: chrome.runtime.lastError?.message || 'unknown',\n          timestamp: new Date().toISOString()\n        });\n        \n        this.handlePortDisconnection(port);\n      });\n      \n      // Send connection confirmation\n      const confirmationMessage = {\n        action: globalThis.StepTwoMessageSchema?.MESSAGE_ACTIONS?.PORT_CONNECT || 'PORT_CONNECT',\n        data: { \n          status: 'connected', \n          timestamp: Date.now(),\n          portId: connectionInfo.portId\n        }\n      };\n      \n      try {\n        this.sendToPort(port.name, confirmationMessage);\n        console.log(`\u2705 [PORT] Confirmation sent:`, {\n          portName: port.name,\n          portId: connectionInfo.portId\n        });\n      } catch (confirmError) {\n        console.error(`\u274C [PORT] Failed to send confirmation:`, {\n          portName: port.name,\n          portId: connectionInfo.portId,\n          error: confirmError.message\n        });\n      }\n      \n      // Start keepalive for this port\n      this.startPortKeepalive(port.name);\n      \n      const setupTime = performance.now() - connectionStartTime;\n      console.log(`\u26A1 [PORT] Setup completed (${setupTime.toFixed(2)}ms):`, {\n        portName: port.name,\n        portId: connectionInfo.portId\n      });\n      \n    } catch (error) {\n      const setupTime = performance.now() - connectionStartTime;\n      console.error(`\uD83D\uDCA5 [PORT] Connection setup failed (${setupTime.toFixed(2)}ms):`, {\n        portName: port.name,\n        error: error.message,\n        stack: error.stack,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Try to send error notification if port is still available\n      try {\n        port.postMessage({\n          action: 'PORT_ERROR',\n          error: error.message,\n          timestamp: Date.now()\n        });\n      } catch (notifyError) {\n        console.warn(`\u26A0\uFE0F [PORT] Could not notify client of connection error:`, notifyError.message);\n      }\n    }\n  }\n\n  /**\n   * Handle messages received through port connections\n   */\n  async handlePortMessage(port, message) {\n    try {\n      // Update last activity for this specific port\n      const connections = this.portConnections.get(port.name);\n      if (connections) {\n        for (const connection of connections) {\n          if (connection.port === port) {\n            connection.lastActivity = Date.now();\n            break;\n          }\n        }\n      }\n      \n      // Handle port-specific messages\n      const action = message.action || message.type;\n      \n      if (action === (globalThis.StepTwoMessageSchema?.MESSAGE_ACTIONS?.UI_SUBSCRIBE || 'UI_SUBSCRIBE')) {\n        this.handleSubscription(port.name, message.payload);\n      } else if (action === (globalThis.StepTwoMessageSchema?.MESSAGE_ACTIONS?.UI_UNSUBSCRIBE || 'UI_UNSUBSCRIBE')) {\n        this.handleUnsubscription(port.name, message.payload);\n      } else if (action === (globalThis.StepTwoMessageSchema?.MESSAGE_ACTIONS?.PORT_KEEPALIVE || 'PORT_KEEPALIVE')) {\n        // Respond to keepalive ping\n        this.sendToPort(port.name, {\n          action: action,\n          data: { timestamp: Date.now(), status: 'alive' }\n        });\n      } else {\n        // Route to regular message handler\n        const requestId = message.requestId || `port_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        await this.handleMessage(message, { port }, (response) => {\n          this.sendToPort(port.name, response);\n        });\n      }\n      \n    } catch (error) {\n      console.error('\u274C Port message handling error:', error);\n    }\n  }\n\n  /**\n   * Handle port disconnection cleanup\n   */\n  handlePortDisconnection(port) {\n    // Phase 2: Track disconnection metrics\n    connectionMetrics.disconnections++;\n    if (connectionMetrics.activePorts > 0) {\n      connectionMetrics.activePorts--;\n    }\n    \n    try {\n      console.log(`\uD83D\uDD0C Port disconnected: ${port.name}`);\n      \n      // Remove specific port connection from set\n      const connections = this.portConnections.get(port.name);\n      if (connections) {\n        for (const connection of connections) {\n          if (connection.port === port) {\n            connections.delete(connection);\n            // If no more connections for this port name, clean up the set\n            if (connections.size === 0) {\n              this.portConnections.delete(port.name);\n              this.subscriptions.delete(port.name);\n            }\n            break;\n          }\n        }\n      }\n      \n      // Clear keepalive timer\n      if (this.portKeepaliveTimers.has(port.name)) {\n        clearInterval(this.portKeepaliveTimers.get(port.name));\n        this.portKeepaliveTimers.delete(port.name);\n      }\n      \n    } catch (error) {\n      console.error('\u274C Port disconnection error:', error);\n    }\n  }\n\n  /**\n   * Register a message handler for a specific action\n   * @param {string} action - The action name to handle\n   * @param {Function} handler - The handler function\n   */\n  registerMessageHandler(action, handler) {\n    if (typeof handler !== 'function') {\n      throw new Error('Handler must be a function');\n    }\n    \n    this.messageHandlers.set(action, handler);\n    console.log(`\u2705 Registered handler for action: ${action}`);\n  }\n\n  /**\n   * Register default message handlers\n   */\n  registerDefaultHandlers(existingMessageHandler = null) {\n    const schema = globalThis.StepTwoMessageSchema;\n    \n    // Health ping handler\n    this.registerHandler(\n      schema?.MESSAGE_ACTIONS?.HEALTH_PING || 'HEALTH_PING',\n      this.handleHealthPing.bind(this)\n    );\n    \n    // Phase 2: Comprehensive health check handler for dashboard\n    this.registerHandler(\n      'HEALTH_CHECK',\n      this.handleHealthCheckRequest.bind(this)\n    );\n    \n    // Permission handlers\n    this.registerHandler(\n      schema?.MESSAGE_ACTIONS?.PERMISSION_CHECK || 'PERMISSION_CHECK',\n      this.handlePermissionCheck.bind(this)\n    );\n    \n    this.registerHandler(\n      schema?.MESSAGE_ACTIONS?.PERMISSION_PROMPT || 'PERMISSION_PROMPT',\n      this.handlePermissionPrompt.bind(this)\n    );\n    \n    // Status handlers\n    this.registerHandler(\n      schema?.MESSAGE_ACTIONS?.SCAN_STATUS || 'SCAN_STATUS',\n      this.handleStatusRequest.bind(this)\n    );\n    \n    this.registerHandler(\n      schema?.MESSAGE_ACTIONS?.DOWNLOAD_STATUS || 'DOWNLOAD_STATUS',\n      this.handleStatusRequest.bind(this)\n    );\n    \n    // BUGFIX: Properly configure legacy handler fallback\n    if (existingMessageHandler) {\n      if (typeof existingMessageHandler.handleMessage === 'function') {\n        this.legacyHandler = existingMessageHandler;\n        console.log(`\uD83D\uDD17 [PROXY] Legacy handler configured:`, {\n          handlerType: typeof existingMessageHandler.handleMessage,\n          fallbackAvailable: true\n        });\n      } else if (typeof existingMessageHandler === 'function') {\n        // Wrap function handler to match expected interface\n        this.legacyHandler = {\n          handleMessage: existingMessageHandler\n        };\n        console.log(`\uD83D\uDD17 [PROXY] Legacy function handler wrapped:`, {\n          fallbackAvailable: true\n        });\n      } else {\n        console.warn(`\u26A0\uFE0F [PROXY] Invalid legacy handler provided:`, {\n          handlerType: typeof existingMessageHandler,\n          hasHandleMessage: !!(existingMessageHandler && existingMessageHandler.handleMessage)\n        });\n      }\n    } else {\n      console.log(`\u2139\uFE0F [PROXY] No legacy handler provided`);\n    }\n    \n    console.log('\uD83D\uDCCB Default message handlers registered');\n  }\n\n  /**\n   * Register a message handler for a specific action\n   */\n  registerHandler(action, handler) {\n    this.messageHandlers.set(action, handler);\n    console.log(`\uD83D\uDCDD Handler registered for action: ${action}`);\n  }\n\n  /**\n   * Handle health ping requests\n   */\n  async handleHealthPing(message, sender, sendResponse, requestId) {\n    // Count total active connections across all port names\n    let totalConnections = 0;\n    for (const connections of this.portConnections.values()) {\n      totalConnections += connections.size;\n    }\n    \n    const healthData = {\n      status: this.state.health.status,\n      timestamp: Date.now(),\n      uptime: Date.now() - serviceWorkerStartTime,\n      connections: totalConnections,\n      portNames: this.portConnections.size,\n      subscriptions: this.subscriptions.size,\n      messageHandlers: this.messageHandlers.size,\n      queueSize: this.messageQueue.length\n    };\n    \n    this.updateHealthStatus('running');\n    sendResponse(this.createSuccessResponse(requestId, healthData));\n  }\n\n  /**\n   * Phase 2: Handle comprehensive health check requests from dashboard\n   * Returns detailed health status including restart count, keepalive metrics, etc.\n   */\n  async handleHealthCheckRequest(message, sender, sendResponse, requestId) {\n    try {\n      const healthStatus = await getHealthStatus();\n      sendResponse(this.createSuccessResponse(requestId, healthStatus));\n    } catch (error) {\n      console.error('\u274C Failed to get health status:', error);\n      sendResponse(this.createErrorResponse(requestId, 'Failed to retrieve health status'));\n    }\n  }\n\n  /**\n   * Handle permission check requests\n   */\n  async handlePermissionCheck(message, sender, sendResponse, requestId) {\n    try {\n      const { permissions } = message.payload || {};\n      const results = {};\n      \n      if (permissions && Array.isArray(permissions)) {\n        for (const permission of permissions) {\n          try {\n            const hasPermission = await chrome.permissions.contains({ permissions: [permission] });\n            results[permission] = hasPermission;\n          } catch (error) {\n            results[permission] = false;\n          }\n        }\n      }\n      \n      sendResponse(this.createSuccessResponse(requestId, results));\n      \n    } catch (error) {\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle permission prompt requests (route to UI for user gesture)\n   */\n  async handlePermissionPrompt(message, sender, sendResponse, requestId) {\n    try {\n      const { permission, reason } = message.payload || {};\n      \n      // Store permission request for tracking\n      this.state.permissions.set(requestId, {\n        permission,\n        reason,\n        status: 'pending',\n        timestamp: Date.now()\n      });\n      \n      // Route to UI for user gesture (MV3 compliant)\n      this.broadcastUpdate(\n        globalThis.StepTwoMessageSchema?.UPDATE_TYPES?.PERMISSION_STATUS || 'permission_status',\n        {\n          requestId,\n          permission,\n          reason,\n          requiresUserGesture: true\n        }\n      );\n      \n      sendResponse(this.createSuccessResponse(requestId, { \n        status: 'pending', \n        message: 'Permission request routed to UI' \n      }));\n      \n    } catch (error) {\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle status requests for various systems\n   */\n  async handleStatusRequest(message, sender, sendResponse, requestId) {\n    try {\n      const action = message.action || message.type;\n      let statusData = {};\n      \n      if (action.includes('SCAN')) {\n        statusData = {\n          scanning: false, // TODO: Connect to actual scan state\n          progress: this.state.progress.get('scan') || 0\n        };\n      } else if (action.includes('DOWNLOAD')) {\n        statusData = {\n          active: false, // TODO: Connect to actual download state\n          progress: this.state.progress.get('download') || 0,\n          queue: this.state.jobs.get('download_queue') || []\n        };\n      }\n      \n      sendResponse(this.createSuccessResponse(requestId, statusData));\n      \n    } catch (error) {\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle subscription requests from UI components\n   */\n  handleSubscription(portName, subscriptionData) {\n    try {\n      const { channels } = subscriptionData || {};\n      \n      if (!this.subscriptions.has(portName)) {\n        this.subscriptions.set(portName, new Set());\n      }\n      \n      const portSubscriptions = this.subscriptions.get(portName);\n      \n      if (channels && Array.isArray(channels)) {\n        channels.forEach(channel => portSubscriptions.add(channel));\n        console.log(`\uD83D\uDCE1 Port ${portName} subscribed to channels: ${channels.join(', ')}`);\n      } else {\n        // Subscribe to all updates\n        portSubscriptions.add('*');\n        console.log(`\uD83D\uDCE1 Port ${portName} subscribed to all updates`);\n      }\n      \n      // Update port connection info for all connections with this name\n      const connections = this.portConnections.get(portName);\n      if (connections) {\n        for (const connection of connections) {\n          connection.subscriptions = new Set([...portSubscriptions]);\n        }\n      }\n      \n    } catch (error) {\n      console.error('\u274C Subscription error:', error);\n    }\n  }\n\n  /**\n   * Handle unsubscription requests from UI components\n   */\n  handleUnsubscription(portName, subscriptionData) {\n    try {\n      const { channels } = subscriptionData || {};\n      \n      if (!this.subscriptions.has(portName)) {\n        return;\n      }\n      \n      const portSubscriptions = this.subscriptions.get(portName);\n      \n      if (channels && Array.isArray(channels)) {\n        channels.forEach(channel => portSubscriptions.delete(channel));\n        console.log(`\uD83D\uDCE1 Port ${portName} unsubscribed from channels: ${channels.join(', ')}`);\n      } else {\n        // Unsubscribe from all\n        portSubscriptions.clear();\n        console.log(`\uD83D\uDCE1 Port ${portName} unsubscribed from all updates`);\n      }\n      \n    } catch (error) {\n      console.error('\u274C Unsubscription error:', error);\n    }\n  }\n\n  /**\n   * ENHANCED: Broadcast update to subscribed UI components with validation\n   */\n  broadcastUpdate(updateType, data, options = {}) {\n    const broadcastStartTime = performance.now();\n    const broadcastId = `${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    \n    try {\n      const schema = globalThis.StepTwoMessageSchema;\n      \n      // ENHANCED: Create properly formatted broadcast message\n      const broadcastMessage = {\n        action: schema?.MESSAGE_ACTIONS?.BROADCAST_UPDATE || 'BROADCAST_UPDATE',\n        updateType,\n        data,\n        timestamp: Date.now(),\n        priority: options.priority || (schema?.MESSAGE_PRIORITY?.MEDIUM || 2),\n        targets: options.targets,\n        broadcastId\n      };\n\n      // ENHANCED: Validate broadcast before emission\n      if (schema?.MessageValidator?.validateBroadcast) {\n        const validation = schema.MessageValidator.validateBroadcast(broadcastMessage);\n        \n        if (!validation.valid) {\n          // Track broadcast validation failures\n          if (this.performanceMetrics) {\n            this.performanceMetrics.broadcastValidationErrors++;\n          }\n          \n          console.error(`\u274C [BROADCAST] Validation failed (${broadcastId}):`, {\n            error: validation.error,\n            updateType,\n            dataKeys: data ? Object.keys(data) : null,\n            broadcastId\n          });\n          \n          // Don't emit invalid broadcasts\n          return;\n        }\n        \n        console.log(`\u2705 [BROADCAST] Validation passed (${broadcastId}):`, {\n          updateType,\n          dataSize: JSON.stringify(data || {}).length,\n          broadcastId\n        });\n      }\n\n      const channel = schema?.MessageSchemaUtils?.getUpdateChannel(updateType) || 'general';\n      const priority = broadcastMessage.priority;\n      \n      console.log(`\uD83D\uDCE1 [BROADCAST] Starting:`, {\n        broadcastId,\n        updateType,\n        channel,\n        priority,\n        dataSize: JSON.stringify(data).length,\n        subscriberCount: this.subscriptions.size,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Apply throttling to prevent overwhelming UI\n      const throttleKey = `${channel}_${updateType}`;\n      const now = Date.now();\n      const lastUpdate = this.updateThrottle.get(throttleKey) || 0;\n      const timeSinceLastUpdate = now - lastUpdate;\n      \n      if (timeSinceLastUpdate < this.maxUpdateRate) {\n        console.warn(`\uD83D\uDD70\uFE0F [BROADCAST] Throttled (${timeSinceLastUpdate}ms since last):`, {\n          broadcastId,\n          updateType,\n          channel,\n          throttleKey,\n          maxUpdateRate: this.maxUpdateRate\n        });\n        return;\n      }\n      \n      this.updateThrottle.set(throttleKey, now);\n      \n      // Create broadcast message\n      const broadcast = {\n        action: schema?.MESSAGE_ACTIONS?.BROADCAST_UPDATE || 'BROADCAST_UPDATE',\n        updateType,\n        data,\n        timestamp: now,\n        priority,\n        channel,\n        broadcastId,\n        ...options\n      };\n      \n      // Send to subscribed ports with detailed tracking\n      let sentCount = 0;\n      let failedCount = 0;\n      const deliveryResults = [];\n      \n      for (const [portName, subscriptions] of this.subscriptions.entries()) {\n        const deliveryStartTime = performance.now();\n        let delivered = false;\n        let reason = 'not_subscribed';\n        \n        if (subscriptions.has('*') || subscriptions.has(channel) || subscriptions.has(updateType)) {\n          const connections = this.portConnections.get(portName);\n          if (connections && connections.size > 0) {\n            // Check if any connection is subscribed to this update\n            let hasSubscription = false;\n            for (const connection of connections) {\n              if (connection.subscriptions.has('*') || connection.subscriptions.has(channel) || connection.subscriptions.has(updateType)) {\n                hasSubscription = true;\n                break;\n              }\n            }\n            if (hasSubscription) {\n              delivered = this.sendToPort(portName, broadcast);\n              reason = delivered ? 'delivered' : 'send_failed';\n              if (delivered) {\n                sentCount++;\n              } else {\n                failedCount++;\n              }\n            } else {\n              reason = 'no_connection_subscription';\n            }\n          } else {\n            reason = 'no_connections';\n          }\n        }\n        \n        const deliveryTime = performance.now() - deliveryStartTime;\n        deliveryResults.push({\n          portName,\n          delivered,\n          reason,\n          deliveryTime: `${deliveryTime.toFixed(2)}ms`,\n          subscriptions: Array.from(subscriptions),\n          connectionCount: this.portConnections.get(portName)?.size || 0\n        });\n      }\n      \n      console.log(`\uD83D\uDCE6 [BROADCAST] Delivery results:`, {\n        broadcastId,\n        updateType,\n        sentCount,\n        failedCount,\n        totalSubscribers: this.subscriptions.size,\n        deliveryResults\n      });\n      \n      // Fallback to sendMessage for non-port subscribers\n      if (sentCount === 0 && options.fallbackToMessage) {\n        console.log(`\uD83D\uDD04 [BROADCAST] Using fallback messaging:`, { broadcastId, updateType });\n        this.fallbackBroadcast(broadcast);\n      }\n      \n      const totalTime = performance.now() - broadcastStartTime;\n      console.log(`\u2705 [BROADCAST] Completed (${totalTime.toFixed(2)}ms):`, {\n        broadcastId,\n        updateType,\n        channel,\n        sentCount,\n        failedCount,\n        success: sentCount > 0 || options.fallbackToMessage\n      });\n      \n    } catch (error) {\n      const totalTime = performance.now() - broadcastStartTime;\n      console.error(`\uD83D\uDCA5 [BROADCAST] Error (${totalTime.toFixed(2)}ms):`, {\n        broadcastId,\n        updateType,\n        error: error.message,\n        stack: error.stack,\n        subscriptionsCount: this.subscriptions.size\n      });\n    }\n  }\n\n  /**\n   * Send message to all connections for a specific port name\n   */\n  sendToPort(portName, message) {\n    try {\n      const connections = this.portConnections.get(portName);\n      if (!connections || connections.size === 0) {\n        return false;\n      }\n      \n      let sentCount = 0;\n      const deadConnections = new Set();\n      \n      for (const connection of connections) {\n        try {\n          if (connection.connected && connection.port) {\n            connection.port.postMessage(message);\n            connection.lastActivity = Date.now();\n            sentCount++;\n          }\n        } catch (error) {\n          console.error(`\u274C Failed to send to port ${portName} connection ${connection.portId}:`, error);\n          connection.connected = false;\n          deadConnections.add(connection);\n        }\n      }\n      \n      // Clean up dead connections\n      for (const deadConnection of deadConnections) {\n        connections.delete(deadConnection);\n      }\n      \n      return sentCount > 0;\n    } catch (error) {\n      console.error(`\u274C Error sending to port ${portName}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Fallback broadcast using chrome.runtime.sendMessage\n   */\n  async fallbackBroadcast(broadcast) {\n    try {\n      // Send to all tabs (content scripts) - using async/await to avoid context issues\n      const tabs = await chrome.tabs.query({});\n      for (const tab of tabs) {\n        try {\n          await chrome.tabs.sendMessage(tab.id, broadcast);\n        } catch (error) {\n          // Ignore errors for tabs without content scripts\n        }\n      }\n    } catch (error) {\n      console.error('\u274C Fallback broadcast error:', error);\n    }\n  }\n\n  /**\n   * Start port keepalive system\n   */\n  startPortKeepalive(portName = null) {\n    const ports = portName ? [portName] : Array.from(this.portConnections.keys());\n    \n    ports.forEach(name => {\n      if (this.portKeepaliveTimers.has(name)) {\n        clearInterval(this.portKeepaliveTimers.get(name));\n      }\n      \n      const timer = setInterval(() => {\n        const connections = this.portConnections.get(name);\n        if (connections && connections.size > 0) {\n          const deadConnections = new Set();\n          \n          for (const connection of connections) {\n            if (connection.connected) {\n              const timeSinceActivity = Date.now() - connection.lastActivity;\n              if (timeSinceActivity > this.portKeepaliveInterval) {\n                // Send keepalive ping to this specific connection\n                try {\n                  connection.port.postMessage({\n                    action: globalThis.StepTwoMessageSchema?.MESSAGE_ACTIONS?.PORT_KEEPALIVE || 'PORT_KEEPALIVE',\n                    timestamp: Date.now()\n                  });\n                  connection.lastActivity = Date.now();\n                } catch (error) {\n                  console.warn(`Failed to send keepalive to ${name}:`, error);\n                  connection.connected = false;\n                  deadConnections.add(connection);\n                }\n              }\n            } else {\n              deadConnections.add(connection);\n            }\n          }\n          \n          // Remove dead connections\n          for (const deadConnection of deadConnections) {\n            connections.delete(deadConnection);\n          }\n          \n          // If no connections left, clean up\n          if (connections.size === 0) {\n            this.portConnections.delete(name);\n            this.subscriptions.delete(name);\n            clearInterval(timer);\n            this.portKeepaliveTimers.delete(name);\n          }\n        } else {\n          // No connections, clean up timer\n          clearInterval(timer);\n          this.portKeepaliveTimers.delete(name);\n        }\n      }, this.portKeepaliveInterval);\n      \n      this.portKeepaliveTimers.set(name, timer);\n    });\n  }\n\n  /**\n   * Load state from chrome.storage.session\n   */\n  async loadState() {\n    const loadStartTime = performance.now();\n    const loadId = `load_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    \n    try {\n      console.log(`\uD83D\uDCC1 [STATE] Loading state:`, {\n        loadId,\n        stateKey: this.stateKey,\n        timestamp: new Date().toISOString()\n      });\n      \n      const result = await chrome.storage.session.get(this.stateKey);\n      if (result[this.stateKey]) {\n        const savedState = result[this.stateKey];\n        const stateAge = Date.now() - (savedState.timestamp || 0);\n        const serializedSize = JSON.stringify(savedState).length;\n        \n        console.log(`\uD83D\uDCCA [STATE] Found saved state:`, {\n          loadId,\n          stateAge: `${stateAge}ms ago`,\n          stateSize: `${serializedSize} bytes`,\n          hasJobs: !!savedState.jobs,\n          hasProgress: !!savedState.progress,\n          hasPermissions: !!savedState.permissions,\n          hasHealth: !!savedState.health,\n          lastSaved: savedState.timestamp ? new Date(savedState.timestamp).toISOString() : 'unknown'\n        });\n        \n        // Restore state with validation and logging\n        let restoredCount = 0;\n        if (savedState.jobs) {\n          this.state.jobs = new Map(savedState.jobs);\n          restoredCount++;\n          console.log(`\uD83D\uDD04 [STATE] Jobs restored: ${this.state.jobs.size} entries`);\n        }\n        if (savedState.progress) {\n          this.state.progress = new Map(savedState.progress);\n          restoredCount++;\n          console.log(`\uD83D\uDD04 [STATE] Progress restored: ${this.state.progress.size} entries`);\n        }\n        if (savedState.permissions) {\n          this.state.permissions = new Map(savedState.permissions);\n          restoredCount++;\n          console.log(`\uD83D\uDD04 [STATE] Permissions restored: ${this.state.permissions.size} entries`);\n        }\n        if (savedState.health) {\n          this.state.health = { ...this.state.health, ...savedState.health };\n          restoredCount++;\n          console.log(`\uD83D\uDD04 [STATE] Health status restored:`, this.state.health);\n        }\n        \n        const loadTime = performance.now() - loadStartTime;\n        console.log(`\u2705 [STATE] Load completed (${loadTime.toFixed(2)}ms):`, {\n          loadId,\n          restoredSections: restoredCount,\n          totalEntries: this.state.jobs.size + this.state.progress.size + this.state.permissions.size\n        });\n        \n      } else {\n        const loadTime = performance.now() - loadStartTime;\n        console.log(`\uD83C\uDD95 [STATE] No saved state found (${loadTime.toFixed(2)}ms):`, {\n          loadId,\n          usingDefaults: true\n        });\n      }\n    } catch (error) {\n      const loadTime = performance.now() - loadStartTime;\n      console.error(`\uD83D\uDCA5 [STATE] Load failed (${loadTime.toFixed(2)}ms):`, {\n        loadId,\n        error: error.message,\n        stack: error.stack\n      });\n    }\n  }\n\n  /**\n   * Save state to chrome.storage.session\n   */\n  async saveState() {\n    const saveStartTime = performance.now();\n    const saveId = `save_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    \n    try {\n      const now = Date.now();\n      const timeSinceLastSave = now - this.lastStateSave;\n      \n      if (timeSinceLastSave < this.stateSaveInterval) {\n        console.log(`\uD83D\uDD70\uFE0F [STATE] Save skipped (${timeSinceLastSave}ms since last):`, {\n          saveId,\n          stateSaveInterval: this.stateSaveInterval,\n          lastSave: new Date(this.lastStateSave).toISOString()\n        });\n        return;\n      }\n      \n      const stateToSave = {\n        jobs: Array.from(this.state.jobs.entries()),\n        progress: Array.from(this.state.progress.entries()),\n        permissions: Array.from(this.state.permissions.entries()),\n        health: this.state.health,\n        timestamp: now\n      };\n      \n      const serializedState = JSON.stringify(stateToSave);\n      const stateSize = serializedState.length;\n      \n      console.log(`\uD83D\uDCBE [STATE] Saving state:`, {\n        saveId,\n        stateSize: `${stateSize} bytes`,\n        jobsCount: this.state.jobs.size,\n        progressCount: this.state.progress.size,\n        permissionsCount: this.state.permissions.size,\n        healthStatus: this.state.health.status,\n        timeSinceLastSave: `${timeSinceLastSave}ms`\n      });\n      \n      await chrome.storage.session.set({\n        [this.stateKey]: stateToSave\n      });\n      \n      this.lastStateSave = now;\n      const saveTime = performance.now() - saveStartTime;\n      \n      console.log(`\u2705 [STATE] Save completed (${saveTime.toFixed(2)}ms):`, {\n        saveId,\n        stateSize: `${stateSize} bytes`,\n        success: true\n      });\n      \n    } catch (error) {\n      const saveTime = performance.now() - saveStartTime;\n      console.error(`\uD83D\uDCA5 [STATE] Save failed (${saveTime.toFixed(2)}ms):`, {\n        saveId,\n        error: error.message,\n        stack: error.stack,\n        quotaExceeded: error.name === 'QuotaExceededError'\n      });\n    }\n  }\n\n  /**\n   * Start periodic state saving\n   */\n  startPeriodicStateSave() {\n    setInterval(() => {\n      this.saveState();\n    }, this.stateSaveInterval);\n  }\n\n  /**\n   * Update health status\n   */\n  updateHealthStatus(status, details = null) {\n    this.state.health = {\n      status,\n      lastCheck: Date.now(),\n      details\n    };\n    \n    // Broadcast health update\n    this.broadcastUpdate(\n      globalThis.StepTwoMessageSchema?.UPDATE_TYPES?.HEALTH_STATUS || 'health_status',\n      this.state.health\n    );\n  }\n\n  /**\n   * Create success response\n   */\n  createSuccessResponse(requestId, data = null, metadata = {}) {\n    if (globalThis.StepTwoMessageSchema?.MessageValidator) {\n      return globalThis.StepTwoMessageSchema.MessageValidator.createResponse(\n        requestId, true, data, null, metadata\n      );\n    }\n    \n    return {\n      ok: true,\n      requestId,\n      data,\n      timestamp: Date.now(),\n      ...metadata\n    };\n  }\n\n\n  /**\n   * Get current router status\n   */\n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      connections: this.portConnections.size,\n      subscriptions: this.subscriptions.size,\n      handlers: this.messageHandlers.size,\n      queueSize: this.messageQueue.length,\n      health: this.state.health,\n      retryManager: this.retryManager ? {\n        isInitialized: this.retryManager.isInitialized,\n        queueSize: this.retryManager.retryQueue?.size || 0,\n        activeRetries: this.retryManager.activeRetries?.size || 0,\n        circuitBreakers: this.retryManager.circuitBreakers?.size || 0\n      } : null\n    };\n  }\n\n  // ============================================================================\n  // PHASE 1B: RETRY MANAGER INTEGRATION METHODS\n  // ============================================================================\n\n  /**\n   * Initialize ErrorHandlingSystem for RetryManager integration\n   */\n  async initializeErrorHandling() {\n    try {\n      // Check if ErrorHandlingSystem is available\n      if (typeof globalThis.ErrorHandlingSystem !== 'undefined') {\n        this.errorHandler = new globalThis.ErrorHandlingSystem({\n          enableConsoleLogging: true,\n          enableUserNotifications: false, // Handled by ProxyRouter\n          enableErrorReporting: true,\n          enableRecoveryMechanisms: true\n        });\n        \n        console.log('\u2705 ErrorHandlingSystem initialized for RetryManager');\n      } else {\n        console.warn('\u26A0\uFE0F ErrorHandlingSystem not available, retry error classification will be limited');\n      }\n    } catch (error) {\n      console.error('\u274C Failed to initialize ErrorHandlingSystem:', error);\n    }\n  }\n\n  /**\n   * Initialize RetryManager with ErrorHandlingSystem integration\n   */\n  async initializeRetryManager() {\n    try {\n      // Check if RetryManager is available\n      if (typeof globalThis.RetryManager !== 'undefined') {\n        this.retryManager = new globalThis.RetryManager({\n          stateKey: 'steptwo_retry_manager_state',\n          enableBroadcasting: true,\n          enableStateLogging: true,\n          alarmNamePrefix: 'steptwo_retry_'\n        });\n\n        // Set up RetryManager callbacks\n        this.retryManager.setCallbacks({\n          onRetryAttempt: (retryTask) => {\n            this.broadcastRetryUpdate('retry_attempt', {\n              taskId: retryTask.taskId,\n              attemptCount: retryTask.attemptCount,\n              maxAttempts: retryTask.maxAttempts,\n              errorCategory: retryTask.errorCategory,\n              nextRetryAt: retryTask.nextRetryAt\n            });\n          },\n          onRetrySuccess: (retryTask, result) => {\n            this.broadcastRetryUpdate('retry_success', {\n              taskId: retryTask.taskId,\n              attemptCount: retryTask.attemptCount,\n              totalTime: Date.now() - retryTask.startTime,\n              errorCategory: retryTask.errorCategory\n            });\n          },\n          onRetryFailure: (retryTask, reason) => {\n            this.broadcastRetryUpdate('retry_failure', {\n              taskId: retryTask.taskId,\n              attemptCount: retryTask.attemptCount,\n              reason,\n              errorCategory: retryTask.errorCategory,\n              totalTime: Date.now() - retryTask.startTime\n            });\n          },\n          onCircuitBreakerTriggered: (errorCategory, circuitBreaker) => {\n            this.broadcastRetryUpdate('circuit_breaker_opened', {\n              errorCategory,\n              failureCount: circuitBreaker.failureCount,\n              cooldownMs: this.retryManager.options.circuitBreakerCooldown\n            });\n          },\n          onCircuitBreakerReset: (errorCategory, circuitBreaker) => {\n            this.broadcastRetryUpdate('circuit_breaker_reset', {\n              errorCategory,\n              successCount: circuitBreaker.successCount\n            });\n          },\n          onStateChange: (updateType, data) => {\n            // Update internal retry state tracking\n            this.state.retries.set(updateType, {\n              ...data,\n              timestamp: Date.now()\n            });\n          }\n        });\n\n        // Initialize RetryManager\n        await this.retryManager.initialize(this.errorHandler, this);\n\n        // Initialize ChromeSafe with RetryManager\n        if (typeof globalThis.ChromeSafe !== 'undefined') {\n          globalThis.ChromeSafe.initialize(this.retryManager);\n          console.log('\u2705 ChromeSafe initialized with RetryManager');\n        }\n\n        console.log('\u2705 RetryManager initialized and integrated with ProxyRouter');\n      } else {\n        console.warn('\u26A0\uFE0F RetryManager not available, retry functionality will be disabled');\n      }\n    } catch (error) {\n      console.error('\u274C Failed to initialize RetryManager:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register retry-specific message handlers\n   */\n  registerRetryHandlers() {\n    try {\n      // Retry task management\n      this.messageHandlers.set('RETRY_TASK', this.handleRetryTask.bind(this));\n      this.messageHandlers.set('CANCEL_RETRY', this.handleCancelRetry.bind(this));\n      this.messageHandlers.set('PAUSE_RETRY_CATEGORY', this.handlePauseRetryCategory.bind(this));\n      this.messageHandlers.set('RESUME_RETRY_CATEGORY', this.handleResumeRetryCategory.bind(this));\n      this.messageHandlers.set('PAUSE_ALL_RETRIES', this.handlePauseAllRetries.bind(this));\n      this.messageHandlers.set('RESUME_ALL_RETRIES', this.handleResumeAllRetries.bind(this));\n\n      // Retry status and information\n      this.messageHandlers.set('GET_RETRY_STATS', this.handleGetRetryStats.bind(this));\n      this.messageHandlers.set('GET_RETRY_QUEUE', this.handleGetRetryQueue.bind(this));\n      this.messageHandlers.set('GET_CIRCUIT_BREAKER_STATUS', this.handleGetCircuitBreakerStatus.bind(this));\n\n      // Enhanced download with retry\n      this.messageHandlers.set('DOWNLOAD_WITH_RETRY', this.handleDownloadWithRetry.bind(this));\n\n      console.log('\u2705 Retry message handlers registered');\n    } catch (error) {\n      console.error('\u274C Failed to register retry handlers:', error);\n    }\n  }\n\n  /**\n   * Initialize Demo Mode functionality\n   */\n  async initializeDemoMode() {\n    try {\n      console.log('\uD83C\uDFAD Initializing Demo Mode...');\n      \n      // Check if sample data system is available\n      if (typeof DemoModeManager !== 'undefined') {\n        this.demoModeManager = new DemoModeManager();\n        await this.demoModeManager.initializeDemoMode();\n        \n        // Update demo state\n        this.state.demo.isActive = false; // Demo mode starts inactive\n        this.state.demo.sessionStartTime = Date.now();\n        \n        console.log('\u2705 Demo Mode initialized successfully');\n      } else {\n        console.warn('\u26A0\uFE0F DemoModeManager not available, demo functionality will be disabled');\n      }\n    } catch (error) {\n      console.error('\u274C Failed to initialize Demo Mode:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register demo mode message handlers\n   */\n  registerDemoModeHandlers() {\n    try {\n      console.log('\uD83C\uDFAD Registering Demo Mode handlers...');\n      \n      // Demo mode control\n      this.messageHandlers.set('DEMO_MODE_ENABLE', this.handleDemoModeEnable.bind(this));\n      this.messageHandlers.set('DEMO_MODE_DISABLE', this.handleDemoModeDisable.bind(this));\n      this.messageHandlers.set('DEMO_MODE_STATUS', this.handleDemoModeStatus.bind(this));\n      this.messageHandlers.set('DEMO_MODE_RESET', this.handleDemoModeReset.bind(this));\n      \n      // Sample data management\n      this.messageHandlers.set('LOAD_SAMPLE_DATA', this.handleLoadSampleData.bind(this));\n      this.messageHandlers.set('LOAD_ALL_SAMPLE_DATA', this.handleLoadAllSampleData.bind(this));\n      this.messageHandlers.set('GET_SAMPLE_GALLERY_TYPES', this.handleGetSampleGalleryTypes.bind(this));\n      this.messageHandlers.set('GET_CURRENT_SAMPLE_DATA', this.handleGetCurrentSampleData.bind(this));\n      \n      // Demo mode simulation\n      this.messageHandlers.set('SIMULATE_SCRAPING_PROGRESS', this.handleSimulateScrapingProgress.bind(this));\n      this.messageHandlers.set('EXPORT_SAMPLE_DATA', this.handleExportSampleData.bind(this));\n      this.messageHandlers.set('GET_DEMO_STATS', this.handleGetDemoStats.bind(this));\n      \n      console.log('\u2705 Demo Mode handlers registered');\n    } catch (error) {\n      console.error('\u274C Failed to register demo mode handlers:', error);\n    }\n  }\n\n  /**\n   * Handle retry task creation\n   */\n  async handleRetryTask(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const { taskId, operation, retryOptions } = message.payload;\n      \n      if (!taskId || !operation) {\n        throw new Error('taskId and operation are required');\n      }\n\n      // Create operation function (this would typically be handled differently in real implementation)\n      const operationFunction = async () => {\n        // This is a placeholder - in real implementation, operations would be predefined\n        // or passed as serializable configurations\n        throw new Error('Operation functions must be predefined for security');\n      };\n\n      const success = await this.retryManager.retryTask(taskId, operationFunction, retryOptions);\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        taskId, \n        queued: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error handling retry task:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle retry task cancellation\n   */\n  async handleCancelRetry(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const { taskId } = message.payload;\n      const success = await this.retryManager.cancelTask(taskId);\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        taskId, \n        cancelled: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error cancelling retry:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle pausing retry category\n   */\n  async handlePauseRetryCategory(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const { errorCategory } = message.payload;\n      const success = this.retryManager.pauseCategory(errorCategory);\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        errorCategory, \n        paused: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error pausing retry category:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle resuming retry category\n   */\n  async handleResumeRetryCategory(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const { errorCategory } = message.payload;\n      const success = this.retryManager.resumeCategory(errorCategory);\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        errorCategory, \n        resumed: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error resuming retry category:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle pausing all retries\n   */\n  async handlePauseAllRetries(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const success = this.retryManager.pauseAll();\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        allPaused: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error pausing all retries:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle resuming all retries\n   */\n  async handleResumeAllRetries(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const success = this.retryManager.resumeAll();\n\n      sendResponse(this.createSuccessResponse(requestId, { \n        allResumed: success \n      }));\n\n    } catch (error) {\n      console.error('\u274C Error resuming all retries:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting retry statistics\n   */\n  async handleGetRetryStats(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const stats = this.retryManager.getStats();\n\n      sendResponse(this.createSuccessResponse(requestId, stats));\n\n    } catch (error) {\n      console.error('\u274C Error getting retry stats:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting retry queue status\n   */\n  async handleGetRetryQueue(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const queueStatus = this.retryManager.getQueueStatus();\n\n      sendResponse(this.createSuccessResponse(requestId, queueStatus));\n\n    } catch (error) {\n      console.error('\u274C Error getting retry queue:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting circuit breaker status\n   */\n  async handleGetCircuitBreakerStatus(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const circuitBreakerStats = this.retryManager.getCircuitBreakerStats();\n\n      sendResponse(this.createSuccessResponse(requestId, circuitBreakerStats));\n\n    } catch (error) {\n      console.error('\u274C Error getting circuit breaker status:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle download with retry integration\n   */\n  async handleDownloadWithRetry(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.retryManager) {\n        throw new Error('RetryManager not available');\n      }\n\n      const { downloadOptions, retryOptions } = message.payload;\n      \n      if (!downloadOptions || !downloadOptions.url) {\n        throw new Error('Download options with URL are required');\n      }\n\n      // Use ChromeSafe download with retry\n      if (typeof globalThis.ChromeSafe !== 'undefined' && globalThis.ChromeSafe.downloadWithRetry) {\n        const downloadId = await globalThis.ChromeSafe.downloadWithRetry(downloadOptions, retryOptions);\n        \n        sendResponse(this.createSuccessResponse(requestId, { \n          downloadId,\n          taskId: retryOptions?.taskId \n        }));\n      } else {\n        throw new Error('ChromeSafe downloadWithRetry not available');\n      }\n\n    } catch (error) {\n      console.error('\u274C Error handling download with retry:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * DEMO MODE HANDLERS - Enable demo functionality through DemoModeManager\n   */\n\n  /**\n   * Handle demo mode enable\n   */\n  async handleDemoModeEnable(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const { galleryType } = message.payload || {};\n      await this.demoModeManager.initializeDemoMode();\n      \n      // Load default gallery type if specified\n      if (galleryType) {\n        await this.demoModeManager.loadSampleData(galleryType);\n      }\n\n      this.state.demo = {\n        isActive: true,\n        currentGalleryType: galleryType || null,\n        sessionStartTime: Date.now(),\n        stats: this.demoModeManager.getDemoStatus()\n      };\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        enabled: true,\n        galleryType: galleryType || null,\n        status: this.demoModeManager.getDemoStatus()\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error enabling demo mode:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle demo mode disable\n   */\n  async handleDemoModeDisable(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      this.demoModeManager.exitDemoMode();\n      this.state.demo = {\n        isActive: false,\n        currentGalleryType: null,\n        sampleData: null,\n        sessionStartTime: null,\n        stats: {}\n      };\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        disabled: true,\n        status: this.demoModeManager.getDemoStatus()\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error disabling demo mode:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle demo mode status request\n   */\n  async handleDemoModeStatus(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const status = this.demoModeManager.getDemoStatus();\n      sendResponse(this.createSuccessResponse(requestId, status));\n\n    } catch (error) {\n      console.error('\u274C Error getting demo mode status:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle demo mode reset\n   */\n  async handleDemoModeReset(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      this.demoModeManager.resetDemoMode();\n      this.state.demo.sessionStartTime = Date.now();\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        reset: true,\n        status: this.demoModeManager.getDemoStatus()\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error resetting demo mode:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle loading sample data\n   */\n  async handleLoadSampleData(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const { galleryType } = message.payload || {};\n      if (!galleryType) {\n        throw new Error('Gallery type is required');\n      }\n\n      const sampleData = await this.demoModeManager.loadSampleData(galleryType);\n      this.state.demo.currentGalleryType = galleryType;\n      this.state.demo.sampleData = sampleData;\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        galleryType,\n        sampleData,\n        imageCount: sampleData.images?.length || 0\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error loading sample data:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle loading all sample data\n   */\n  async handleLoadAllSampleData(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const allSampleData = await this.demoModeManager.loadAllSampleData();\n      this.state.demo.currentGalleryType = 'all';\n      this.state.demo.sampleData = allSampleData;\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        allSampleData,\n        totalImages: allSampleData.metadata?.totalImages || 0\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error loading all sample data:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting sample gallery types\n   */\n  async handleGetSampleGalleryTypes(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const galleryTypes = this.demoModeManager.getAvailableGalleryTypes();\n      sendResponse(this.createSuccessResponse(requestId, {\n        galleryTypes,\n        count: Object.keys(galleryTypes).length\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error getting sample gallery types:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting current sample data\n   */\n  async handleGetCurrentSampleData(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const currentData = this.demoModeManager.currentSampleData;\n      const loadedType = this.demoModeManager.loadedGalleryType;\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        currentSampleData: currentData,\n        loadedGalleryType: loadedType,\n        hasData: currentData !== null,\n        imageCount: currentData?.images?.length || currentData?.metadata?.totalImages || 0\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error getting current sample data:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle simulating scraping progress\n   */\n  async handleSimulateScrapingProgress(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const { totalImages, callbackPort } = message.payload || {};\n      \n      // Create progress callback function\n      const progressCallback = (progress) => {\n        this.broadcastUpdate('demo_progress', progress);\n        \n        // Send progress to specific port if provided\n        if (callbackPort && this.portConnections.has(callbackPort)) {\n          for (const connection of this.portConnections.get(callbackPort)) {\n            if (connection.connected) {\n              try {\n                connection.port.postMessage({\n                  action: 'DEMO_PROGRESS_UPDATE',\n                  data: progress\n                });\n              } catch (error) {\n                console.warn('Failed to send progress update:', error);\n              }\n            }\n          }\n        }\n      };\n\n      // Start simulation (non-blocking)\n      this.demoModeManager.simulateScrapingProgress(progressCallback, totalImages)\n        .then(() => {\n          this.broadcastUpdate('demo_simulation_complete', { \n            completed: true, \n            totalImages: totalImages || 20 \n          });\n        })\n        .catch((error) => {\n          console.error('\u274C Demo simulation error:', error);\n          this.broadcastUpdate('demo_simulation_error', { \n            error: error.message \n          });\n        });\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        started: true,\n        totalImages: totalImages || 20,\n        estimatedDuration: (totalImages || 20) * 150\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error starting scraping simulation:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle exporting sample data\n   */\n  async handleExportSampleData(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const { format, galleryType } = message.payload || {};\n      const exportData = await this.demoModeManager.exportSampleData(format, galleryType);\n\n      sendResponse(this.createSuccessResponse(requestId, exportData));\n\n    } catch (error) {\n      console.error('\u274C Error exporting sample data:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Handle getting demo statistics\n   */\n  async handleGetDemoStats(message, sender, sendResponse, requestId) {\n    try {\n      if (!this.demoModeManager) {\n        throw new Error('DemoModeManager not available');\n      }\n\n      const stats = this.demoModeManager.demoStats;\n      const status = this.demoModeManager.getDemoStatus();\n\n      sendResponse(this.createSuccessResponse(requestId, {\n        stats,\n        status,\n        sessionTime: status.sessionTime\n      }));\n\n    } catch (error) {\n      console.error('\u274C Error getting demo stats:', error);\n      sendResponse(this.createErrorResponse(requestId, error.message));\n    }\n  }\n\n  /**\n   * Broadcast retry updates to connected UI components\n   */\n  broadcastRetryUpdate(updateType, data) {\n    try {\n      this.broadcast({\n        action: 'BROADCAST_UPDATE',\n        updateType: `retry_${updateType}`,\n        data: {\n          ...data,\n          timestamp: Date.now()\n        },\n        source: 'retry_manager'\n      });\n    } catch (error) {\n      console.error('\u274C Error broadcasting retry update:', error);\n    }\n  }\n}\n\n// ============================================================================\n// PROXYROUTER INITIALIZATION WITH ERROR HANDLING\n// ============================================================================\n\n/**\n * Initialize ProxyRouter with proper error handling and queue processing\n * This runs after the class definition to ensure proper initialization order\n */\nasync function initializeProxyRouter() {\n  if (proxyRouterReady) {\n    console.log('\u2705 ProxyRouter already initialized, skipping...');\n    return true;\n  }\n\n  try {\n    console.log('\uD83D\uDE80 Initializing ProxyRouter after class definition...');\n    \n    // Create the ProxyRouter instance now that the class is defined\n    globalProxyRouter = new ProxyRouter();\n    \n    // Initialize the router with existing systems integration\n    const initSuccess = await globalProxyRouter.initialize();\n    \n    if (initSuccess) {\n      // Mark router as ready\n      proxyRouterReady = true;\n      \n      // Clear initialization timeout on success\n      if (initTimeoutId) {\n        clearTimeout(initTimeoutId);\n        console.log('\u2705 ProxyRouter initialized successfully, timeout cleared');\n      }\n      \n      // Drain all pending queues using unified function\n      await drainPendingQueues();\n      \n      return true;\n    } else {\n      throw new Error('ProxyRouter initialization returned false');\n    }\n    \n  } catch (error) {\n    console.error('\u274C Failed to initialize ProxyRouter:', error);\n    \n    // Ensure graceful degradation - keep event listeners working with fallback\n    console.warn('\u26A0\uFE0F Running in degraded mode without ProxyRouter');\n    \n    // Clear queued items with error responses\n    clearQueuedItemsWithError('ProxyRouter initialization failed');\n    \n    return false;\n  }\n}\n\n/**\n * CR-011 FIX: Process queued messages that arrived before ProxyRouter was ready\n * Enhanced with comprehensive error handling and tracking\n */\nasync function processQueuedMessages() {\n  if (pendingMessages.length === 0) {\n    return;\n  }\n  \n  console.log(`\uD83D\uDCEC Processing ${pendingMessages.length} queued messages...`);\n  \n  const messages = [...pendingMessages];\n  pendingMessages.length = 0; // Clear the queue\n  \n  let processedCount = 0;\n  let expiredCount = 0;\n  let errorCount = 0;\n  \n  for (const { message, sender, sendResponse, timestamp } of messages) {\n    try {\n      // Check if message is still valid (not too old)\n      const age = Date.now() - timestamp;\n      if (age > 30000) { // 30 seconds timeout\n        console.warn('\u23F0 Dropping expired queued message:', message?.action || message?.type);\n        try {\n          sendResponse({ error: 'Message expired while service worker was initializing' });\n        } catch (responseError) {\n          console.warn('\u274C Failed to send expiry response:', responseError);\n        }\n        expiredCount++;\n        continue;\n      }\n      \n      // Process the message\n      if (globalProxyRouter && typeof globalProxyRouter.handleMessage === 'function') {\n        globalProxyRouter.handleMessage(message, sender, sendResponse);\n        processedCount++;\n      } else {\n        try {\n          sendResponse({ error: 'ProxyRouter not available' });\n        } catch (responseError) {\n          console.warn('\u274C Failed to send error response:', responseError);\n        }\n        errorCount++;\n      }\n    } catch (error) {\n      console.error('\u274C Error processing queued message:', error);\n      try {\n        sendResponse({ error: 'Failed to process queued message' });\n      } catch (responseError) {\n        console.warn('\u274C Failed to send error response:', responseError);\n      }\n      errorCount++;\n    }\n  }\n  \n  console.log(`\u2705 Queue processing complete: ${processedCount} processed, ${expiredCount} expired, ${errorCount} errors`);\n}\n\n/**\n * CR-011 FIX: Process queued port connections that arrived before ProxyRouter was ready\n * Enhanced with comprehensive error handling and tracking\n */\nasync function processQueuedConnections() {\n  if (pendingConnections.length === 0) {\n    return;\n  }\n  \n  console.log(`\uD83D\uDD0C Processing ${pendingConnections.length} queued port connections...`);\n  \n  const connections = [...pendingConnections];\n  pendingConnections.length = 0; // Clear the queue\n  \n  let processedCount = 0;\n  let expiredCount = 0;\n  let errorCount = 0;\n  \n  for (const { port, timestamp } of connections) {\n    try {\n      // Check if connection is still valid\n      const age = Date.now() - timestamp;\n      if (age > 30000) { // 30 seconds timeout\n        console.warn('\u23F0 Dropping expired queued connection:', port?.name);\n        expiredCount++;\n        continue;\n      }\n      \n      // Process the connection\n      if (globalProxyRouter && typeof globalProxyRouter.handlePortConnection === 'function') {\n        globalProxyRouter.handlePortConnection(port);\n        processedCount++;\n      } else {\n        console.warn('\u26A0\uFE0F ProxyRouter not available for connection:', port?.name);\n        errorCount++;\n      }\n    } catch (error) {\n      console.error('\u274C Error processing queued connection:', error);\n      errorCount++;\n    }\n  }\n  \n  console.log(`\u2705 Connection queue processing complete: ${processedCount} processed, ${expiredCount} expired, ${errorCount} errors`);\n}\n\n/**\n * CR-011 FIX: Unified function to drain all pending queues when ProxyRouter becomes ready\n * Implements mutex-based synchronization to prevent race conditions\n * Ensures queue is drained ONLY ONCE after ProxyRouter is ready\n */\nasync function drainPendingQueues() {\n  // CR-011 FIX: Check if already drained to prevent duplicate processing\n  if (queueDrained) {\n    console.log('\u2705 Queue already drained, skipping...');\n    return;\n  }\n  \n  // CR-011 FIX: Check if draining is in progress to prevent concurrent draining\n  if (queueDrainInProgress) {\n    console.log('\u23F3 Queue draining already in progress, waiting...');\n    // Wait for the existing drain operation to complete\n    if (queueDrainLock) {\n      await queueDrainLock;\n    }\n    return;\n  }\n  \n  // CR-011 FIX: Set the in-progress flag and create a lock promise\n  queueDrainInProgress = true;\n  let resolveLock;\n  queueDrainLock = new Promise(resolve => { resolveLock = resolve; });\n  \n  try {\n    console.log('\uD83D\uDD04 Draining all pending queues (mutex-protected)...');\n    \n    // First drain the service worker's global queues\n    await processQueuedMessages();\n    await processQueuedConnections();\n    \n    // Then drain ProxyRouter's internal queues if available\n    if (globalProxyRouter && typeof globalProxyRouter.drainQueues === 'function') {\n      await globalProxyRouter.drainQueues();\n    }\n    \n    // CR-011 FIX: Mark queue as drained ONLY after successful completion\n    queueDrained = true;\n    console.log('\u2705 All pending queues drained successfully (queue now marked as drained)');\n  } catch (error) {\n    console.error('\u274C Error draining pending queues:', error);\n    // CR-011 FIX: On error, do NOT mark as drained so it can be retried\n    // But still release the lock to prevent deadlock\n    console.warn('\u26A0\uFE0F Queue draining failed, queue will remain in pending state for retry');\n  } finally {\n    // CR-011 FIX: Always release the lock and clear in-progress flag\n    queueDrainInProgress = false;\n    if (resolveLock) {\n      resolveLock();\n    }\n  }\n}\n\n/**\n * Clear queued items with error responses when initialization fails\n */\nfunction clearQueuedItemsWithError(errorMessage) {\n  // Clear pending messages with error responses\n  for (const { sendResponse } of pendingMessages) {\n    try {\n      sendResponse({ error: errorMessage });\n    } catch (error) {\n      console.error('\u274C Failed to send error response to queued message:', error);\n    }\n  }\n  pendingMessages.length = 0;\n  \n  // Clear pending connections (they'll disconnect naturally)\n  pendingConnections.length = 0;\n  \n  console.log('\uD83E\uDDF9 Cleared queued items due to initialization failure');\n}\n\n// Start ProxyRouter initialization immediately after class definition\ninitializeProxyRouter().then(success => {\n  if (success) {\n    console.log('\uD83C\uDF89 Service worker fully initialized and ready');\n  } else {\n    console.warn('\u26A0\uFE0F Service worker running in degraded mode');\n  }\n}).catch(error => {\n  console.error('\uD83D\uDCA5 Critical error during ProxyRouter initialization:', error);\n});\n\n// Legacy proxyRouter reference points to globalProxyRouter for compatibility\nObject.defineProperty(globalThis, 'proxyRouter', {\n  get() { return globalProxyRouter; },\n  configurable: true\n});\n\n// ============================================================================\n// MV3 COMPLIANCE: Chrome.alarms-based Keepalive System\n// ============================================================================\n\nconst KEEPALIVE_ALARM_NAME = 'steptwo-keepalive';\nconst HEALTH_CHECK_ALARM_NAME = 'steptwo-health-check';\nconst KEEPALIVE_INTERVAL = 1.0; // 1 minute - MV3 compliance (minimum allowed periodInMinutes)\nconst HEALTH_CHECK_INTERVAL = 2; // 2 minutes - comprehensive health monitoring\n\n// Initialize MV3 keepalive system\nasync function initializeKeepaliveSystem() {\n  try {\n    console.log('\uD83D\uDD04 Initializing MV3 keepalive system...');\n    \n    // Clear any existing alarms first to prevent duplicates\n    try {\n      await chrome.alarms.clear(KEEPALIVE_ALARM_NAME);\n      await chrome.alarms.clear(HEALTH_CHECK_ALARM_NAME);\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Could not clear existing alarms:', error);\n    }\n    \n    // Create keepalive alarm - MV3 compliant (\u22651 minute)\n    await chrome.alarms.create(KEEPALIVE_ALARM_NAME, {\n      delayInMinutes: KEEPALIVE_INTERVAL,\n      periodInMinutes: KEEPALIVE_INTERVAL\n    });\n    \n    // Create health check alarm - less frequent but comprehensive\n    await chrome.alarms.create(HEALTH_CHECK_ALARM_NAME, {\n      delayInMinutes: HEALTH_CHECK_INTERVAL,\n      periodInMinutes: HEALTH_CHECK_INTERVAL\n    });\n    \n    console.log('\u2705 MV3 keepalive system initialized');\n    console.log(`\uD83D\uDCCA Keepalive: ${KEEPALIVE_INTERVAL}m, Health checks: ${HEALTH_CHECK_INTERVAL}m`);\n    \n    // DIAGNOSTIC: Verify alarm creation success\n    await verifyAlarmCreation();\n    \n    // Start alarm monitoring system\n    startAlarmMonitoring();\n    \n    return true;\n  } catch (error) {\n    console.error('\u274C Failed to initialize keepalive system:', error);\n    return false;\n  }\n}\n\n// Enhanced alarm handling with fallback mechanisms\nlet lastAlarmHeartbeat = Date.now();\nlet alarmFailureCount = 0;\nlet fallbackKeepaliveTimer = null;\n\n// REMOVED: Duplicate alarm listener - now handled by top-level onAlarmWrapper\n// Functionality moved to ProxyRouter.handleAlarmEvent method\n\n// Comprehensive health check with recovery mechanisms\nasync function performComprehensiveHealthCheck() {\n  const healthCheck = {\n    timestamp: new Date().toISOString(),\n    serviceWorker: true, // If we're running, SW is alive\n    components: {},\n    actions: []\n  };\n  \n  try {\n    // Check all major components\n    healthCheck.components = {\n      downloadManager: downloadManager && downloadManager.isReady ? downloadManager.isReady() : false,\n      messageHandler: messageHandler && messageHandler.isInitialized ? messageHandler.isInitialized : false,\n      exportSystem: exportSystem !== null,\n      errorHandler: errorHandler !== null,\n      performanceMonitor: performanceMonitor && performanceMonitor.isInitialized ? performanceMonitor.isInitialized : false,\n      memoryManagement: memoryManagementSystem && memoryManagementSystem.isInitialized ? memoryManagementSystem.isInitialized : false,\n      contextMenuManager: contextMenuManager !== null\n    };\n    \n    // Count unhealthy components\n    const unhealthyComponents = Object.entries(healthCheck.components)\n      .filter(([, healthy]) => !healthy)\n      .map(([component]) => component);\n    \n    console.log('\uD83C\uDFE5 Health check results:', {\n      healthy: unhealthyComponents.length === 0,\n      unhealthyComponents: unhealthyComponents.length,\n      details: healthCheck.components\n    });\n    \n    // Trigger recovery if multiple components are unhealthy (but only if not already in recovery)\n    if (unhealthyComponents.length > 0 && !isInRecoveryMode) {\n      console.warn('\u26A0\uFE0F Unhealthy components detected:', unhealthyComponents);\n      healthCheck.actions.push('recovery_triggered');\n      \n      // Set recovery flag to prevent infinite recursion\n      isInRecoveryMode = true;\n      \n      try {\n        // If more than 2 components are unhealthy or extension isn't initialized, full recovery\n        if (!isExtensionInitialized || unhealthyComponents.length > 2) {\n          console.log('\uD83D\uDD27 Triggering full system recovery...');\n          healthCheck.actions.push('full_recovery');\n          await initializeExtension();\n        } else {\n          // Try to recover individual components\n          healthCheck.actions.push('component_recovery');\n          await recoverIndividualComponents(unhealthyComponents);\n        }\n      } finally {\n        // Always clear recovery flag when done\n        isInRecoveryMode = false;\n      }\n    } else if (unhealthyComponents.length > 0 && isInRecoveryMode) {\n      console.log('\u26A0\uFE0F Unhealthy components detected but recovery already in progress, skipping to prevent recursion');\n      healthCheck.actions.push('recovery_skipped_recursion_prevention');\n    } else {\n      console.log('\u2705 All systems healthy');\n    }\n    \n    // DIAGNOSTIC: Add E2E communication verification to health checks\n    if (unhealthyComponents.length === 0) {\n      const e2eResults = await verifyE2ECommunication();\n      healthCheck.e2eDiagnostics = e2eResults;\n      \n      // Test orchestrator communication with active tabs if available\n      try {\n        const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });\n        if (activeTabs.length > 0 && activeTabs[0].url && !activeTabs[0].url.startsWith('chrome://')) {\n          const orchestratorTest = await testOrchestratorCommunication(activeTabs[0].id);\n          healthCheck.orchestratorTest = orchestratorTest;\n        }\n      } catch (error) {\n        healthCheck.orchestratorTestError = error.message;\n      }\n    }\n    \n    // Log to performance monitor if available\n    if (performanceMonitor && performanceMonitor.logEvent) {\n      performanceMonitor.logEvent('health-check', healthCheck);\n    }\n    \n    return healthCheck;\n  } catch (error) {\n    console.error('\u274C Health check failed:', error);\n    healthCheck.error = error.message;\n    healthCheck.actions.push('health_check_failed');\n    return healthCheck;\n  }\n}\n\n// Recovery for individual components\nasync function recoverIndividualComponents(unhealthyComponents) {\n  for (const component of unhealthyComponents) {\n    try {\n      console.log(`\uD83D\uDD27 Attempting to recover component: ${component}`);\n      \n      switch (component) {\n        case 'downloadManager':\n          if (!downloadManager) {\n            downloadManager = new SimpleDownloadManager({\n              enableNotifications: true,\n              enableProgress: true,\n              maxConcurrentDownloads: 3,\n              errorHandler: errorHandler,\n              performanceMonitor: performanceMonitor\n            });\n          }\n          break;\n          \n        case 'messageHandler':\n          if (!messageHandler) {\n            messageHandler = SimpleMessageHandler.getInstance();\n            await messageHandler.initialize(downloadManager, exportSystem);\n            if (errorHandler && messageHandler) {\n              messageHandler.errorHandler = errorHandler;\n              messageHandler.performanceMonitor = performanceMonitor;\n            }\n          }\n          break;\n          \n        case 'exportSystem':\n          if (!exportSystem && typeof AdvancedExportSystem !== 'undefined') {\n            exportSystem = new AdvancedExportSystem();\n          }\n          break;\n          \n        default:\n          console.warn(`\u26A0\uFE0F No recovery method for component: ${component}`);\n      }\n      \n      console.log(`\u2705 Component recovery attempted: ${component}`);\n    } catch (error) {\n      console.error(`\u274C Failed to recover component ${component}:`, error);\n    }\n  }\n}\n\n// ============================================================================\n// DIAGNOSTIC TOOLS: MV3 Compliance Verification\n// ============================================================================\n\n// Verify alarm creation success and provide diagnostics\nasync function verifyAlarmCreation() {\n  try {\n    console.log('\uD83D\uDD0D Verifying alarm creation...');\n    \n    // Get all current alarms\n    const alarms = await chrome.alarms.getAll();\n    const alarmNames = alarms.map(alarm => alarm.name);\n    \n    // Check if our alarms exist\n    const keepaliveExists = alarms.find(alarm => alarm.name === KEEPALIVE_ALARM_NAME);\n    const healthCheckExists = alarms.find(alarm => alarm.name === HEALTH_CHECK_ALARM_NAME);\n    \n    const diagnostics = {\n      totalAlarms: alarms.length,\n      alarmNames: alarmNames,\n      keepaliveAlarm: {\n        exists: !!keepaliveExists,\n        periodInMinutes: keepaliveExists?.periodInMinutes,\n        compliant: keepaliveExists?.periodInMinutes >= 1\n      },\n      healthCheckAlarm: {\n        exists: !!healthCheckExists,\n        periodInMinutes: healthCheckExists?.periodInMinutes,\n        compliant: healthCheckExists?.periodInMinutes >= 1\n      }\n    };\n    \n    console.log('\uD83D\uDCCA Alarm Diagnostics:', diagnostics);\n    \n    // Verify MV3 compliance\n    if (!diagnostics.keepaliveAlarm.compliant) {\n      console.error('\u274C CRITICAL: Keepalive alarm not MV3 compliant!', diagnostics.keepaliveAlarm);\n    }\n    \n    if (!diagnostics.healthCheckAlarm.compliant) {\n      console.error('\u274C CRITICAL: Health check alarm not MV3 compliant!', diagnostics.healthCheckAlarm);\n    }\n    \n    if (diagnostics.keepaliveAlarm.compliant && diagnostics.healthCheckAlarm.compliant) {\n      console.log('\u2705 All alarms are MV3 compliant');\n    }\n    \n    return diagnostics;\n  } catch (error) {\n    console.error('\u274C Alarm verification failed:', error);\n    return { error: error.message };\n  }\n}\n\n// ============================================================================\n// ENHANCED ALARM SYSTEM: Fallback and Monitoring Mechanisms  \n// ============================================================================\n\n// Verify and repair alarm system if needed\nasync function verifyAndRepairAlarmSystem() {\n  try {\n    const alarms = await chrome.alarms.getAll();\n    const keepaliveAlarm = alarms.find(a => a.name === KEEPALIVE_ALARM_NAME);\n    const healthAlarm = alarms.find(a => a.name === HEALTH_CHECK_ALARM_NAME);\n    \n    let repaired = false;\n    \n    // Check if keepalive alarm exists and is healthy\n    if (!keepaliveAlarm) {\n      console.warn('\u26A0\uFE0F Keepalive alarm missing, recreating...');\n      await chrome.alarms.create(KEEPALIVE_ALARM_NAME, {\n        delayInMinutes: KEEPALIVE_INTERVAL,\n        periodInMinutes: KEEPALIVE_INTERVAL\n      });\n      repaired = true;\n    }\n    \n    // Check if health check alarm exists\n    if (!healthAlarm) {\n      console.warn('\u26A0\uFE0F Health check alarm missing, recreating...');\n      await chrome.alarms.create(HEALTH_CHECK_ALARM_NAME, {\n        delayInMinutes: HEALTH_CHECK_INTERVAL,\n        periodInMinutes: HEALTH_CHECK_INTERVAL\n      });\n      repaired = true;\n    }\n    \n    if (repaired) {\n      console.log('\uD83D\uDD27 Alarm system repaired successfully');\n    }\n    \n    return { repaired, alarms: await chrome.alarms.getAll() };\n  } catch (error) {\n    console.error('\u274C Failed to verify/repair alarm system:', error);\n    // If alarm API fails, activate fallback immediately\n    activateFallbackKeepalive();\n    return { repaired: false, error: error.message };\n  }\n}\n\n// Start monitoring alarm system health\nfunction startAlarmMonitoring() {\n  console.log('\uD83D\uDD0D Starting alarm monitoring system...');\n  \n  // Check alarm health every 2 minutes\n  const monitorInterval = setInterval(async () => {\n    try {\n      const timeSinceLastAlarm = Date.now() - lastAlarmHeartbeat;\n      const expectedInterval = KEEPALIVE_INTERVAL * 60 * 1000; // Convert to ms\n      \n      // If no alarm for more than 1.5x the expected interval, there's a problem\n      if (timeSinceLastAlarm > expectedInterval * 1.5) {\n        console.warn(`\u26A0\uFE0F Alarm system appears to have failed! Last heartbeat: ${timeSinceLastAlarm}ms ago`);\n        \n        // Try to repair the alarm system\n        const repairResult = await verifyAndRepairAlarmSystem();\n        \n        if (!repairResult.repaired) {\n          console.error('\uD83D\uDCA5 Alarm system repair failed, activating fallback...');\n          activateFallbackKeepalive();\n        }\n      }\n    } catch (error) {\n      console.error('\u274C Alarm monitoring check failed:', error);\n    }\n  }, 120000); // Check every 2 minutes\n  \n  // Store cleanup function\n  cleanupTasks.push(() => clearInterval(monitorInterval));\n}\n\n// Activate fallback keepalive when alarms fail\nfunction activateFallbackKeepalive() {\n  if (fallbackKeepaliveTimer) {\n    return; // Already active\n  }\n  \n  console.log('\uD83C\uDD98 Activating fallback keepalive system...');\n  \n  const fallbackInterval = () => {\n    try {\n      lastActivity = Date.now();\n      console.log('\uD83D\uDC93 Fallback keepalive heartbeat - service worker active');\n      \n      // Basic health check\n      if (!isExtensionInitialized && !isShuttingDown) {\n        console.log('\uD83D\uDD27 Extension not initialized during fallback, triggering recovery...');\n        initializeExtension().catch(error => {\n          console.error('\u274C Fallback recovery failed:', error);\n        });\n      }\n      \n      // Try to restore alarm system periodically\n      if (Math.random() < 0.1) { // 10% chance each heartbeat\n        console.log('\uD83D\uDD04 Attempting to restore alarm system...');\n        verifyAndRepairAlarmSystem().then(result => {\n          if (result.repaired) {\n            console.log('\u2705 Alarm system restored, deactivating fallback...');\n            if (fallbackKeepaliveTimer) {\n              clearTimeout(fallbackKeepaliveTimer);\n              fallbackKeepaliveTimer = null;\n            }\n          }\n        }).catch(error => {\n          console.warn('\u26A0\uFE0F Alarm system restoration failed:', error);\n        });\n      }\n      \n      // Schedule next heartbeat\n      fallbackKeepaliveTimer = setTimeout(fallbackInterval, 60000); // 1 minute\n      \n    } catch (error) {\n      console.error('\u274C Fallback keepalive error:', error);\n      // Schedule retry\n      fallbackKeepaliveTimer = setTimeout(fallbackInterval, 60000);\n    }\n  };\n  \n  // Start immediately\n  fallbackInterval();\n  \n  // Add cleanup\n  cleanupTasks.push(() => {\n    if (fallbackKeepaliveTimer) {\n      clearTimeout(fallbackKeepaliveTimer);\n      fallbackKeepaliveTimer = null;\n    }\n  });\n}\n\n// Verify E2E communication flow\nasync function verifyE2ECommunication() {\n  try {\n    console.log('\uD83D\uDD0D Verifying E2E communication flow...');\n    \n    const diagnostics = {\n      timestamp: new Date().toISOString(),\n      messageHandler: {\n        singleton: !!messageHandler,\n        initialized: messageHandler?.isInitialized,\n        listenerCount: SimpleMessageHandler.listenerCount\n      },\n      communication: {\n        testResults: []\n      }\n    };\n    \n    // Test if we can get active tabs\n    try {\n      const tabs = await chrome.tabs.query({ active: true });\n      diagnostics.communication.activeTabs = tabs.length;\n    } catch (error) {\n      diagnostics.communication.tabsError = error.message;\n    }\n    \n    console.log('\uD83D\uDCCA E2E Communication Diagnostics:', diagnostics);\n    \n    // Verify critical conditions\n    if (SimpleMessageHandler.listenerCount > 1) {\n      console.error('\u274C CRITICAL: Multiple message listeners detected!', SimpleMessageHandler.listenerCount);\n    } else if (SimpleMessageHandler.listenerCount === 1) {\n      console.log('\u2705 Exactly one message listener registered (correct)');\n    } else {\n      console.warn('\u26A0\uFE0F No message listeners registered');\n    }\n    \n    return diagnostics;\n  } catch (error) {\n    console.error('\u274C E2E communication verification failed:', error);\n    return { error: error.message };\n  }\n}\n\n// Test orchestrator communication with a specific tab\nasync function testOrchestratorCommunication(tabId) {\n  try {\n    console.log(`\uD83E\uDDEA Testing orchestrator communication with tab ${tabId}...`);\n    \n    const testResults = {\n      tabId,\n      timestamp: Date.now(),\n      tests: []\n    };\n    \n    // Test 1: Check orchestrator status\n    try {\n      const response = await chrome.tabs.sendMessage(tabId, {\n        action: 'check_orchestrator_status'\n      });\n      \n      testResults.tests.push({\n        test: 'check_orchestrator_status',\n        success: !!response?.success,\n        available: response?.available,\n        components: response?.components,\n        response: response\n      });\n    } catch (error) {\n      testResults.tests.push({\n        test: 'check_orchestrator_status',\n        success: false,\n        error: error.message\n      });\n    }\n    \n    // Test 2: Try to score a mock element\n    try {\n      const mockElementData = {\n        element: { tagName: 'IMG', src: 'test.jpg' },\n        src: 'test.jpg'\n      };\n      \n      const response = await chrome.tabs.sendMessage(tabId, {\n        action: 'orchestrator_score_element',\n        elementData: mockElementData,\n        options: { enableSmartPatternRecognition: true }\n      });\n      \n      testResults.tests.push({\n        test: 'orchestrator_score_element',\n        success: !!response?.success,\n        confidence: response?.confidence,\n        response: response\n      });\n    } catch (error) {\n      testResults.tests.push({\n        test: 'orchestrator_score_element', \n        success: false,\n        error: error.message\n      });\n    }\n    \n    console.log('\uD83E\uDDEA Orchestrator test results:', testResults);\n    return testResults;\n  } catch (error) {\n    console.error('\u274C Orchestrator communication test failed:', error);\n    return { error: error.message, tabId };\n  }\n}\n\n// ============================================================================\n// MV3 COMPLIANCE: Event-driven Re-initialization Handlers\n// ============================================================================\n\n// Handle Chrome startup - extension was already installed and Chrome is starting\nchrome.runtime.onStartup.addListener(async () => {\n  console.log('\uD83D\uDE80 STEPTWO Extension: Chrome startup detected');\n  \n  // Reset all state variables for fresh start\n  serviceWorkerStartTime = Date.now();\n  lastActivity = Date.now();\n  isShuttingDown = false;\n  isExtensionInitialized = false;\n  initializationAttempts = 0;\n  \n  try {\n    // Initialize keepalive system first (critical for MV3)\n    await initializeKeepaliveSystem();\n    \n    // Initialize the extension\n    await initializeExtension();\n    \n    // MV3 BEST PRACTICE: Initialize context menus on startup\n    try {\n      if (typeof ContextMenuManager !== 'undefined') {\n        if (!contextMenuManager) {\n          contextMenuManager = new ContextMenuManager();\n        }\n        await contextMenuManager.setupContextMenus();\n        console.log('\u2705 Context menus initialized on startup');\n      }\n    } catch (error) {\n      console.error('\u274C Context menu initialization failed on startup:', error);\n    }\n    \n    console.log('\u2705 Extension startup initialization completed');\n  } catch (error) {\n    console.error('\u274C Startup initialization failed:', error);\n    // Continue anyway - error mode will be activated if needed\n  }\n});\n\n// Handle extension installation/update - fresh install or update\nchrome.runtime.onInstalled.addListener(async (details) => {\n  console.log('\uD83D\uDCE6 STEPTWO Extension: Installation/update detected', details);\n  \n  // Reset all state variables for fresh start\n  serviceWorkerStartTime = Date.now();\n  lastActivity = Date.now();\n  isShuttingDown = false;\n  isExtensionInitialized = false;\n  initializationAttempts = 0;\n  \n  try {\n    // Initialize keepalive system first (critical for MV3)\n    await initializeKeepaliveSystem();\n    \n    // Initialize the extension\n    await initializeExtension();\n    \n    // MV3 BEST PRACTICE: Initialize context menus on install/update\n    try {\n      if (typeof ContextMenuManager !== 'undefined') {\n        if (!contextMenuManager) {\n          contextMenuManager = new ContextMenuManager();\n        }\n        await contextMenuManager.setupContextMenus();\n        console.log('\u2705 Context menus initialized on install/update');\n      }\n    } catch (error) {\n      console.error('\u274C Context menu initialization failed on install/update:', error);\n    }\n    \n    // Handle different installation scenarios\n    if (details.reason === 'install') {\n      console.log('\uD83C\uDF89 Fresh installation - extension ready');\n      \n      // Show welcome notification\n      if (chrome.notifications) {\n        chrome.notifications.create('welcome', {\n          type: 'basic',\n          iconUrl: 'icons/48.png',\n          title: 'StepTwo Gallery Scraper',\n          message: 'Extension installed successfully! Click the icon to get started.'\n        });\n      }\n      \n    } else if (details.reason === 'update') {\n      console.log('\uD83D\uDD04 Extension updated from version', details.previousVersion);\n      \n      // Perform any necessary migration or cleanup\n      await handleExtensionUpdate(details.previousVersion);\n    }\n    \n    console.log('\u2705 Extension installation/update initialization completed');\n  } catch (error) {\n    console.error('\u274C Installation initialization failed:', error);\n    // Continue anyway - error mode will be activated if needed\n  }\n});\n\n// Handle extension updates and migrations\nasync function handleExtensionUpdate(previousVersion) {\n  try {\n    console.log(`\uD83D\uDD04 Handling update from version ${previousVersion}`);\n    \n    // Clear old alarms that might have different names\n    const allAlarms = await chrome.alarms.getAll();\n    for (const alarm of allAlarms) {\n      if (alarm.name.includes('steptwo') || alarm.name.includes('gallery')) {\n        await chrome.alarms.clear(alarm.name);\n        console.log(`\uD83E\uDDF9 Cleared old alarm: ${alarm.name}`);\n      }\n    }\n    \n    // Clear any old notification that might be hanging around\n    try {\n      const notifications = await chrome.notifications.getAll();\n      for (const [id] of Object.entries(notifications)) {\n        if (id.includes('steptwo') || id.includes('gallery')) {\n          await chrome.notifications.clear(id);\n        }\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Could not clear old notifications:', error);\n    }\n    \n    // Log successful update\n    console.log('\u2705 Extension update handling completed');\n  } catch (error) {\n    console.error('\u274C Extension update handling failed:', error);\n  }\n}\n\n// Enhanced script loading with comprehensive error handling\n// Critical libraries MUST be loaded first\nconst criticalLibraries = [\n  '../lib/xlsx.full.min.js',\n  '../lib/jszip.min.js',\n  '../lib/papaparse.min.js'\n];\n\nconst supportingScripts = [\n  '../lib/consolidated-utilities.js'\n  // Note: consolidated-systems.js is included in consolidated-background.js\n];\n\nconst coreScripts = [\n  './advanced-export-system.js'\n  // Note: ./consolidated-background.js is already imported at line 8\n];\n\nlet criticalLibrariesLoaded = 0;\nconst criticalLibraryErrors = [];\n\n// NOTE: importScripts library loading removed for ES module compatibility and MV3 compliance\n// All libraries (XLSX, JSZip, Papa Parse) are bundled into dist/background.js via esbuild\n// The following code is preserved as comments for reference only:\n/*\nfor (const script of criticalLibraries) {\n  try {\n    importScripts(script);\n    criticalLibrariesLoaded++;\n  } catch (error) {\n    criticalLibraryErrors.push({ script, error: error.message });\n  }\n}\n\ntry {\n  if (typeof XLSX !== 'undefined') {\n    globalThis.XLSX = XLSX;\n  }\n  \n  if (typeof JSZip !== 'undefined') {\n    globalThis.JSZip = JSZip;\n  }\n  \n  if (typeof Papa !== 'undefined') {\n    globalThis.Papa = Papa;\n  }\n} catch (error) {\n  criticalLibraryErrors.push({ script: 'Library exposure', error: error.message });\n}\n\nfor (const script of supportingScripts) {\n  try {\n    importScripts(script);\n    criticalLibrariesLoaded++;\n  } catch (error) {\n    criticalLibraryErrors.push({ script, error: error.message });\n  }\n}\n\nfor (const script of coreScripts) {\n  try {\n    importScripts(script);\n    criticalLibrariesLoaded++;\n  } catch (error) {\n    criticalLibraryErrors.push({ script, error: error.message });\n  }\n}\n*/\n\n// ============================================================================\n// MV3 COMPLIANCE: Cleanup and State Management\n// ============================================================================\n\n// Cleanup previous initialization attempts to ensure idempotent behavior\nasync function cleanupPreviousInitialization() {\n  console.log('\uD83E\uDDF9 Cleaning up previous initialization state...');\n  \n  try {\n    // Clear existing intervals and timeouts\n    if (healthCheckInterval) {\n      clearInterval(healthCheckInterval);\n      healthCheckInterval = null;\n    }\n    \n    // Run registered cleanup tasks\n    for (const cleanupTask of cleanupTasks) {\n      try {\n        await cleanupTask();\n      } catch (error) {\n        console.warn('\u26A0\uFE0F Cleanup task failed:', error);\n      }\n    }\n    \n    // Reset cleanup tasks array\n    cleanupTasks.length = 0;\n    \n    // Cleanup any hanging notifications\n    try {\n      const notifications = await chrome.notifications.getAll();\n      for (const [id] of Object.entries(notifications)) {\n        if (id.includes('steptwo') || id.includes('extension') || id.includes('error')) {\n          await chrome.notifications.clear(id);\n        }\n      }\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Could not clear old notifications:', error);\n    }\n    \n    console.log('\u2705 Previous initialization cleanup completed');\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Some cleanup operations failed:', error);\n    // Don't throw - cleanup failures shouldn't prevent initialization\n  }\n}\n\n// MV3 COMPLIANCE: Circuit Breaker Pattern for Error Recovery\nclass CircuitBreaker {\n  constructor(name, threshold = 5, timeout = 60000, monitor = 30000) {\n    this.name = name;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n    this.threshold = threshold;\n    this.timeout = timeout;\n    this.monitor = monitor;\n    this.successCount = 0;\n  }\n  \n  async execute(operation) {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime > this.timeout) {\n        this.state = 'HALF_OPEN';\n        console.log(`\uD83D\uDD04 Circuit breaker ${this.name}: Moving to HALF_OPEN state`);\n      } else {\n        throw new Error(`Circuit breaker ${this.name} is OPEN - operation blocked`);\n      }\n    }\n    \n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n  \n  onSuccess() {\n    this.failureCount = 0;\n    this.successCount++;\n    \n    if (this.state === 'HALF_OPEN') {\n      this.state = 'CLOSED';\n      console.log(`\u2705 Circuit breaker ${this.name}: Recovered to CLOSED state`);\n    }\n  }\n  \n  onFailure(error) {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n    \n    console.warn(`\u26A0\uFE0F Circuit breaker ${this.name}: Failure ${this.failureCount}/${this.threshold}`, error.message);\n    \n    if (this.failureCount >= this.threshold) {\n      this.state = 'OPEN';\n      console.error(`\u274C Circuit breaker ${this.name}: OPEN - too many failures`);\n    }\n  }\n  \n  getStats() {\n    return {\n      name: this.name,\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      lastFailureTime: this.lastFailureTime\n    };\n  }\n}\n\n// Initialize circuit breakers for major operations\nconst circuitBreakers = {\n  initialization: new CircuitBreaker('initialization', 3, 30000),\n  messageHandling: new CircuitBreaker('messageHandling', 5, 15000),\n  downloadOperations: new CircuitBreaker('downloadOperations', 10, 60000),\n  exportOperations: new CircuitBreaker('exportOperations', 5, 30000)\n};\n\n// Enhanced initialization - comprehensive system management\nlet downloadManager = null;\nlet messageHandler = null;\nlet contextMenuManager = null;\nlet exportSystem = null;\nlet errorHandler = null;\nlet performanceMonitor = null;\nlet memoryManagementSystem = null; // Properly declare memoryManagementSystem variable\nlet isExtensionInitialized = false;\nlet initializationAttempts = 0;\nlet healthCheckInterval = null;\nlet cleanupTasks = [];\nlet isInRecoveryMode = false; // Flag to prevent infinite recursion in health checks\n\n// Service worker lifecycle management\nlet serviceWorkerStartTime = Date.now();\nlet lastActivity = Date.now();\nlet isShuttingDown = false;\n\n// ============================================================================\n// MV3 COMPLIANCE: Idempotent Extension Initialization\n// ============================================================================\n\n// Enhanced extension initialization with idempotent design and comprehensive error handling\nasync function initializeExtension() {\n  // MV3 COMPLIANCE: Idempotent initialization check\n  if (isExtensionInitialized && !isShuttingDown) {\n    console.log('\u2705 Extension already initialized, performing health check...');\n    \n    // Verify all systems are still healthy\n    const healthCheck = await performComprehensiveHealthCheck();\n    if (healthCheck.components && Object.values(healthCheck.components).every(Boolean)) {\n      console.log('\u2705 All systems healthy, skipping duplicate initialization');\n      return true;\n    } else {\n      console.log('\u26A0\uFE0F Some systems unhealthy, proceeding with re-initialization...');\n      isExtensionInitialized = false; // Allow re-initialization\n    }\n  }\n  \n  if (isShuttingDown) {\n    console.log('\u23F9\uFE0F Skipping initialization - service worker is shutting down');\n    return false;\n  }\n\n  initializationAttempts++;\n  const maxAttempts = 5; // Increased for MV3 resilience\n  \n  // MV3 COMPLIANCE: Cleanup previous initialization attempts\n  try {\n    await cleanupPreviousInitialization();\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Cleanup of previous initialization failed:', error);\n    // Continue anyway - cleanup failure shouldn't prevent initialization\n  }\n  \n  try {\n    console.log(`\uD83D\uDD04 Initializing STEPTWO extension (attempt ${initializationAttempts}/${maxAttempts})...`);\n    \n    // Check critical script loading\n    if (criticalLibraryErrors.length > 0) {\n      throw new Error(`Critical scripts failed to load: ${criticalLibraryErrors.map(e => e.script).join(', ')}`);\n    }\n\n    // Initialize error handling system first (highest priority)\n    if (typeof ErrorHandlingSystem !== 'undefined') {\n      try {\n        errorHandler = new ErrorHandlingSystem({\n          enableConsoleLogging: true,\n          enableUserNotifications: true,\n          enableErrorReporting: false,\n          maxRetryAttempts: 3,\n          circuitBreakerThreshold: 5,\n          notificationDuration: 8000\n        });\n        console.log('\u2705 Enhanced error handling system initialized');\n      } catch (error) {\n        console.error('\u274C Critical: Error handling system failed to initialize:', error);\n        // Continue with basic error handling\n        errorHandler = {\n          handleError: (err, context, metadata, severity) => {\n            console.error(`[${severity}] ${context}:`, err);\n          }\n        };\n      }\n    }\n\n    // Initialize performance monitoring system\n    if (typeof PerformanceMonitoringSystem !== 'undefined') {\n      try {\n        performanceMonitor = new PerformanceMonitoringSystem({\n          enableMemoryMonitoring: true,\n          enablePerformanceTracking: true,\n          enableHealthChecks: true,\n          memoryWarningThreshold: 150 * 1024 * 1024, // 150MB\n          memoryCriticalThreshold: 250 * 1024 * 1024, // 250MB\n          slowOperationThreshold: 2000, // 2 seconds\n          healthCheckInterval: 120000, // 2 minutes\n          reportingInterval: 300000 // 5 minutes\n        });\n        \n        await performanceMonitor.initialize();\n        \n        // Register service worker health checker\n        performanceMonitor.registerHealthChecker('service-worker', async () => {\n          const uptime = Date.now() - serviceWorkerStartTime;\n          const timeSinceActivity = Date.now() - lastActivity;\n          \n          return {\n            healthy: !isShuttingDown && timeSinceActivity < 300000, // 5 minutes\n            message: isShuttingDown ? 'Service worker shutting down' : 'Service worker healthy',\n            details: {\n              uptime: `${Math.floor(uptime / 1000)}s`,\n              lastActivity: `${Math.floor(timeSinceActivity / 1000)}s ago`,\n              initialized: isExtensionInitialized\n            }\n          };\n        });\n        \n        console.log('\u2705 Performance monitoring system initialized');\n      } catch (error) {\n        console.error('\u274C Performance monitoring failed to initialize:', error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Performance Monitor Initialization', {}, 'medium');\n        }\n      }\n    }\n\n    // Initialize memory management system\n    if (typeof MemoryManagementSystem !== 'undefined') {\n      try {\n        memoryManagementSystem = new MemoryManagementSystem({\n          enableMemoryMonitoring: true,\n          enableLeakDetection: true,\n          enableAutoCleanup: true,\n          enableGarbageCollection: true,\n          memoryWarningThreshold: 100 * 1024 * 1024, // 100MB\n          memoryCriticalThreshold: 200 * 1024 * 1024, // 200MB\n          memoryEmergencyThreshold: 300 * 1024 * 1024, // 300MB\n          memoryCheckInterval: 30000, // 30 seconds\n          leakDetectionInterval: 60000, // 1 minute\n          autoCleanupInterval: 300000 // 5 minutes\n        });\n        \n        await memoryManagementSystem.initialize();\n        \n        // Integrate with existing error handler and performance monitor\n        if (errorHandler && memoryManagementSystem) {\n          memoryManagementSystem.errorHandler = errorHandler;\n        }\n        \n        if (performanceMonitor && memoryManagementSystem) {\n          memoryManagementSystem.performanceMonitor = performanceMonitor;\n        }\n        \n        // Register memory management health checker with performance monitor\n        if (performanceMonitor) {\n          performanceMonitor.registerHealthChecker('memory-management', async () => {\n            const stats = memoryManagementSystem.getStats();\n            const currentUsage = memoryManagementSystem.getCurrentMemoryUsage();\n            \n            return {\n              healthy: memoryManagementSystem.isInitialized && currentUsage < memoryManagementSystem.options.memoryCriticalThreshold,\n              message: memoryManagementSystem.isInitialized ? 'Memory management system healthy' : 'Memory management system not initialized',\n              details: {\n                initialized: memoryManagementSystem.isInitialized,\n                currentUsage: memoryManagementSystem.formatBytes(currentUsage),\n                peakUsage: memoryManagementSystem.formatBytes(memoryManagementSystem.peakMemoryUsage),\n                leaksDetected: stats.leaksDetected,\n                cleanupsPerformed: stats.cleanupsPerformed\n              }\n            };\n          });\n        }\n        \n        // Register cleanup task for memory management system\n        cleanupTasks.push(() => {\n          if (memoryManagementSystem && memoryManagementSystem.cleanup) {\n            try {\n              memoryManagementSystem.cleanup();\n              console.log('\u2705 Memory management system cleanup completed');\n            } catch (error) {\n              console.error('\u274C Memory management system cleanup failed:', error);\n            }\n          }\n        });\n        \n        console.log('\u2705 Memory management system initialized');\n      } catch (error) {\n        console.error('\u274C Memory management system failed to initialize:', error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Memory Management System Initialization', {}, 'medium');\n        }\n        // Memory management is important but not critical - continue without it\n        console.warn('\u26A0\uFE0F Extension will continue without memory management system');\n      }\n    } else {\n      console.warn('\u26A0\uFE0F MemoryManagementSystem not available');\n    }\n\n    // Track initialization performance\n    const initTimer = performanceMonitor?.startOperation('extension-initialization', 'lifecycle') || { end: () => {} };\n\n    // Initialize export system with error handling\n    try {\n      if (typeof AdvancedExportSystem !== 'undefined') {\n        exportSystem = new AdvancedExportSystem();\n        console.log('\u2705 Advanced export system initialized');\n      } else {\n        console.warn('\u26A0\uFE0F AdvancedExportSystem not available');\n      }\n    } catch (error) {\n      console.error('\u274C Export system initialization failed:', error);\n      if (errorHandler) {\n        errorHandler.handleError(error, 'Export System Initialization', {}, 'medium');\n      }\n    }\n\n    // Initialize download manager with enhanced monitoring\n    try {\n      downloadManager = new SimpleDownloadManager({\n        enableNotifications: true,\n        enableProgress: true,\n        maxConcurrentDownloads: 3,\n        errorHandler: errorHandler,\n        performanceMonitor: performanceMonitor\n      });\n      console.log('\u2705 Download manager initialized');\n    } catch (error) {\n      console.error('\u274C Download manager initialization failed:', error);\n      if (errorHandler) {\n        errorHandler.handleError(error, 'Download Manager Initialization', {}, 'high');\n      }\n      throw error; // Download manager is critical\n    }\n\n    // Initialize message handler with all systems and enhanced error handling\n    try {\n      messageHandler = SimpleMessageHandler.getInstance();\n      await messageHandler.initialize(downloadManager, exportSystem);\n      \n      // Enhance message handler with error reporting\n      if (errorHandler && messageHandler) {\n        messageHandler.errorHandler = errorHandler;\n        messageHandler.performanceMonitor = performanceMonitor;\n      }\n      \n      console.log('\u2705 Message handler initialized');\n    } catch (error) {\n      console.error('\u274C Message handler initialization failed:', error);\n      if (errorHandler) {\n        errorHandler.handleError(error, 'Message Handler Initialization', {}, 'critical');\n      }\n      throw error; // Message handler is critical\n    }\n\n    // Initialize ProxyRouter with enhanced message routing and validation\n    try {\n      console.log('\uD83D\uDD04 Initializing ProxyRouter...');\n      \n      // Create ProxyRouter instance with message validation enabled\n      if (typeof ProxyRouter !== 'undefined') {\n        globalProxyRouter = new ProxyRouter({\n          enableMessageValidation: true,\n          strictValidation: false, // Allow unknown actions with warnings\n          maxPendingMessages: 100,\n          maxPendingConnections: 50,\n          messageTimeout: 10000\n        });\n        \n        // Initialize with dependencies\n        await globalProxyRouter.initialize({\n          errorHandler: errorHandler,\n          downloadQueue: downloadManager,\n          exportSystem: exportSystem\n        });\n        \n        // Register handlers for download and export operations\n        if (messageHandler) {\n          // Route download operations through existing messageHandler\n          globalProxyRouter.registerMessageHandler('SCRAPE_DONE', messageHandler.handleScrapeResults.bind(messageHandler));\n          globalProxyRouter.registerMessageHandler('START_DOWNLOAD', messageHandler.handleStartDownload.bind(messageHandler));\n          globalProxyRouter.registerMessageHandler('GET_QUEUE_STATUS', messageHandler.handleGetQueueStatus.bind(messageHandler));\n          globalProxyRouter.registerMessageHandler('EXPORT_DATA', messageHandler.handleExportData.bind(messageHandler));\n          globalProxyRouter.registerMessageHandler('CHECK_PERMISSIONS', messageHandler.handleCheckPermissions.bind(messageHandler));\n          \n          // Register scan and content routing handlers\n          globalProxyRouter.registerMessageHandler('SCAN_START', async (message) => {\n            try {\n              const { tabId, options } = message.payload || {};\n              if (!tabId) {\n                return { success: false, error: 'Tab ID required' };\n              }\n              \n              // Inject content script and trigger scan\n              await chrome.scripting.executeScript({\n                target: { tabId },\n                func: () => {\n                  if (window.__STEPTWO_CONTENT_READY) {\n                    window.postMessage({ type: 'STEPTWO_SCAN_START', options: arguments[0] }, '*');\n                  }\n                },\n                args: [options]\n              });\n              \n              return { success: true, message: 'Scan initiated' };\n            } catch (error) {\n              console.error('SCAN_START handler error:', error);\n              return { success: false, error: error.message };\n            }\n          });\n          \n          globalProxyRouter.registerMessageHandler('ROUTE_TO_CONTENT', async (message) => {\n            try {\n              const { tabId, action, options } = message.payload || {};\n              if (!tabId) {\n                return { success: false, error: 'Tab ID required' };\n              }\n              \n              // Route message to content script\n              const [result] = await chrome.scripting.executeScript({\n                target: { tabId },\n                func: (contentAction, contentOptions) => {\n                  if (window.__STEPTWO_CONTENT_READY) {\n                    window.postMessage({ \n                      type: 'STEPTWO_ACTION', \n                      action: contentAction, \n                      options: contentOptions \n                    }, '*');\n                    return { success: true, message: 'Action routed to content script' };\n                  }\n                  return { success: false, error: 'Content script not ready' };\n                },\n                args: [action, options]\n              });\n              \n              return result?.result || { success: false, error: 'No response from content script' };\n            } catch (error) {\n              console.error('ROUTE_TO_CONTENT handler error:', error);\n              return { success: false, error: error.message };\n            }\n          });\n        }\n        \n        // Mark ProxyRouter as ready and drain any queued items\n        proxyRouterReady = true;\n        \n        // Clear initialization timeout on success\n        if (initTimeoutId) {\n          clearTimeout(initTimeoutId);\n          console.log('\u2705 ProxyRouter initialized successfully, timeout cleared');\n        }\n        \n        console.log('\u2705 ProxyRouter ready, draining queues...');\n        \n        // Drain all pending queues using unified function\n        await drainPendingQueues();\n        \n        console.log('\u2705 ProxyRouter initialization completed successfully');\n      } else {\n        throw new Error('ProxyRouter class not available');\n      }\n    } catch (error) {\n      console.error('\u274C ProxyRouter initialization failed:', error);\n      if (errorHandler) {\n        errorHandler.handleError(error, 'ProxyRouter Initialization', {}, 'high');\n      }\n      \n      // Ensure proxyRouterReady is false on failure\n      proxyRouterReady = false;\n      \n      // Drain queued items using fallback handling\n      console.warn('\u26A0\uFE0F Draining queues with fallback handling...');\n      drainQueuesFallback();\n      \n      console.warn('\u26A0\uFE0F Extension will continue with legacy message handling');\n    }\n\n    // NOTE: Context menu initialization moved to chrome.runtime.onInstalled and onStartup\n    // This follows MV3 best practices to prevent duplicate menu ID errors\n\n    // Set up enhanced systems\n    await setupEnhancedNotificationHandlers();\n    await setupEnhancedEventListeners();\n    setupLifecycleManagement();\n    setupResourceCleanup();\n\n    // Start health monitoring\n    if (performanceMonitor) {\n      startServiceWorkerHealthChecks();\n    }\n\n    // Mark as initialized\n    isExtensionInitialized = true;\n    lastActivity = Date.now();\n    \n    // End initialization timer\n    initTimer.end({ success: true, attempt: initializationAttempts });\n\n    console.log(`\u2705 STEPTWO extension initialized successfully (attempt ${initializationAttempts})`);\n    console.log(`\uD83D\uDCCA Initialization summary: ${scriptsLoaded}/${requiredScripts.length} scripts loaded`);\n    \n    // CRITICAL: Add comprehensive startup verification\n    await logStartupSummary();\n    \n    // Perform self-diagnostic check\n    const diagnosticResult = await performStartupDiagnostics();\n    if (!diagnosticResult.healthy) {\n      console.warn('\u26A0\uFE0F Startup diagnostics detected issues:', diagnosticResult.issues);\n    }\n    \n    return true;\n\n  } catch (error) {\n    console.error(`\u274C Extension initialization failed (attempt ${initializationAttempts}):`, error);\n    \n    if (errorHandler) {\n      errorHandler.handleError(error, 'Extension Initialization', {\n        attempt: initializationAttempts,\n        maxAttempts,\n        scriptLoadErrors: scriptLoadErrors.length,\n        uptime: Date.now() - serviceWorkerStartTime\n      }, 'critical');\n    }\n\n    // Retry initialization if not at max attempts\n    if (initializationAttempts < maxAttempts && !isShuttingDown) {\n      console.log(`\uD83D\uDD04 Retrying initialization in 2 seconds (attempt ${initializationAttempts + 1}/${maxAttempts})...`);\n      setTimeout(() => {\n        initializeExtension();\n      }, 2000);\n    } else {\n      console.error('\uD83D\uDCA5 Extension initialization failed permanently');\n      // Set up minimal error-only functionality\n      setupMinimalErrorMode();\n    }\n\n    return false;\n  }\n}\n\n// Minimal error mode when initialization fails completely\nfunction setupMinimalErrorMode() {\n  console.log('\u26A0\uFE0F Setting up minimal error mode...');\n  \n  // REMOVED: Emergency message listener - conflicts with top-level onMessageWrapper\n  // Emergency handling is now built into the top-level message wrapper\n  console.log('\uD83D\uDEA8 Service worker in error mode - using top-level message handler');\n\n  // REMOVED: Duplicate action listener - handled by top-level onActionClickWrapper\n}\n\n// Enhanced event listeners with comprehensive error handling and monitoring\nasync function setupEnhancedEventListeners() {\n  try {\n    console.log('\uD83D\uDD04 Setting up enhanced event listeners...');\n    // NOTE: All event listeners are now registered at top level for MV3 compliance\n\n    // REMOVED: Duplicate action click listener - handled by top-level onActionClickWrapper\n\n    // REMOVED: Duplicate context menu listener - handled by top-level onContextMenuClickWrapper\n\n    // REMOVED: Duplicate command listener - handled by top-level onCommandWrapper\n\n    // REMOVED: Duplicate tab update listener - handled by top-level onTabUpdatedWrapper\n\n    // REMOVED: Tab removal listener - resource cleanup can be handled elsewhere if needed\n\n    // REMOVED: Download change listener - can be handled elsewhere if needed\n\n    console.log('\u2705 Enhanced event listeners set up successfully');\n  } catch (error) {\n    console.error('\u274C Failed to set up enhanced event listeners:', error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'Event Listener Setup', {}, 'high');\n    }\n    throw error;\n  }\n}\n\n// Enhanced notification handlers with error handling and performance monitoring\nasync function setupEnhancedNotificationHandlers() {\n  try {\n    console.log('\uD83D\uDD04 Setting up enhanced notification handlers...');\n\n    // Handle notification clicks with comprehensive error handling\n    if (chrome.notifications && chrome.notifications.onClicked) {\n      chrome.notifications.onClicked.addListener(async (notificationId) => {\n        const operation = performanceMonitor?.startOperation('notification-click', 'ui') || { end: () => {} };\n        lastActivity = Date.now();\n        \n        try {\n          console.log('\uD83D\uDD14 Notification clicked:', notificationId);\n          \n          // Handle different types of notifications\n          if (notificationId.includes('download_')) {\n            try {\n              await chrome.downloads.showDefaultFolder();\n              operation.addMetadata({ notificationType: 'download', action: 'showFolder' });\n            } catch (error) {\n              console.warn('\u26A0\uFE0F Could not show download folder:', error);\n              // Fallback to opening downloads page\n              await chrome.tabs.create({ url: 'chrome://downloads/' });\n              operation.addMetadata({ notificationType: 'download', action: 'fallbackDownloadsPage' });\n            }\n          } else if (notificationId.includes('scraping_')) {\n            try {\n              const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n              if (tabs[0]) {\n                await openDashboard(tabs[0]);\n                operation.addMetadata({ notificationType: 'scraping', action: 'openDashboard', tabId: tabs[0].id });\n              } else {\n                throw new Error('No active tab found');\n              }\n            } catch (error) {\n              console.error('\u274C Failed to open dashboard from notification:', error);\n              if (errorHandler) {\n                errorHandler.handleError(error, 'Notification Dashboard Open', { notificationId }, 'medium');\n              }\n            }\n          } else if (notificationId.includes('error-')) {\n            // Handle error notifications - could provide recovery options\n            operation.addMetadata({ notificationType: 'error', action: 'acknowledged' });\n          }\n          \n          // Clear the notification\n          await chrome.notifications.clear(notificationId);\n          operation.end({ success: true, notificationId });\n          \n        } catch (error) {\n          console.error('\u274C Notification click handler failed:', error);\n          if (errorHandler) {\n            errorHandler.handleError(error, 'Notification Click Handler', { notificationId }, 'low');\n          }\n          operation.end({ success: false, error: error.message });\n        }\n      });\n    }\n\n    // Handle notification button clicks with enhanced error handling\n    if (chrome.notifications && chrome.notifications.onButtonClicked) {\n      chrome.notifications.onButtonClicked.addListener(async (notificationId, buttonIndex) => {\n        const operation = performanceMonitor?.startOperation('notification-button-click', 'ui') || { end: () => {} };\n        lastActivity = Date.now();\n        \n        try {\n          console.log('\uD83D\uDD18 Notification button clicked:', notificationId, buttonIndex);\n          \n          if (notificationId.includes('download_')) {\n            if (buttonIndex === 0) {\n              // Show download folder\n              try {\n                await chrome.downloads.showDefaultFolder();\n                operation.addMetadata({ action: 'showFolder' });\n              } catch (error) {\n                console.warn('\u26A0\uFE0F Could not show download folder, opening downloads page');\n                await chrome.tabs.create({ url: 'chrome://downloads/' });\n                operation.addMetadata({ action: 'fallbackDownloadsPage' });\n              }\n            } else if (buttonIndex === 1) {\n              // Open download manager\n              await chrome.tabs.create({ url: 'chrome://downloads/' });\n              operation.addMetadata({ action: 'openDownloadsPage' });\n            }\n          } else if (notificationId.includes('error-')) {\n            if (buttonIndex === 0) {\n              // Retry action\n              operation.addMetadata({ action: 'retry' });\n              // Could implement retry logic here\n            } else if (buttonIndex === 1) {\n              // Dismiss/ignore\n              operation.addMetadata({ action: 'dismiss' });\n            }\n          }\n          \n          await chrome.notifications.clear(notificationId);\n          operation.end({ success: true, notificationId, buttonIndex });\n          \n        } catch (error) {\n          console.error('\u274C Notification button click handler failed:', error);\n          if (errorHandler) {\n            errorHandler.handleError(error, 'Notification Button Handler', { notificationId, buttonIndex }, 'low');\n          }\n          operation.end({ success: false, error: error.message });\n        }\n      });\n    }\n\n    console.log('\u2705 Enhanced notification handlers set up successfully');\n  } catch (error) {\n    console.error('\u274C Failed to set up enhanced notification handlers:', error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'Notification Handler Setup', {}, 'medium');\n    }\n    throw error;\n  }\n}\n\n// Service worker lifecycle management\nfunction setupLifecycleManagement() {\n  try {\n    console.log('\uD83D\uDD04 Setting up service worker lifecycle management...');\n\n    // Handle service worker installation\n    self.addEventListener('install', (event) => {\n      console.log('\u2699\uFE0F Service worker installing...');\n      event.waitUntil(\n        (async () => {\n          try {\n            // Perform any installation tasks\n            console.log('\u2705 Service worker installation completed');\n          } catch (error) {\n            console.error('\u274C Service worker installation failed:', error);\n            if (errorHandler) {\n              errorHandler.handleError(error, 'Service Worker Installation', {}, 'critical');\n            }\n          }\n        })()\n      );\n    });\n\n    // Handle service worker activation\n    self.addEventListener('activate', (event) => {\n      console.log('\uD83D\uDD04 Service worker activating...');\n      event.waitUntil(\n        (async () => {\n          try {\n            // Claim all existing clients\n            await self.clients.claim();\n            \n            // Initialize extension if not already done\n            if (!isExtensionInitialized && !isShuttingDown) {\n              console.log('\uD83D\uDE80 Initializing extension on activation...');\n              await initializeExtension();\n            }\n            \n            safeConsole.log('\u2705 Service worker activation completed');\n          } catch (error) {\n            safeConsole.error('\u274C Service worker activation failed:', error);\n            if (errorHandler) {\n              errorHandler.handleError(error, 'Service Worker Activation', {}, 'critical');\n            }\n          }\n        })()\n      );\n    });\n\n    // Handle service worker fetch events (if needed for caching)\n    self.addEventListener('fetch', (event) => {\n      // Only handle extension requests with Chrome API check\n      try {\n        if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.getURL) {\n          if (event.request.url.startsWith(chrome.runtime.getURL(''))) {\n            lastActivity = Date.now();\n            // Add custom fetch handling if needed\n          }\n        }\n      } catch (error) {\n        // Fallback: Check if URL looks like an extension URL\n        if (event.request.url.includes('chrome-extension://') || event.request.url.includes('moz-extension://')) {\n          lastActivity = Date.now();\n          console.log('\uD83C\uDF0D Handling extension request (fallback mode):', event.request.url);\n        }\n      }\n    });\n\n    // Handle beforeunload for cleanup\n    self.addEventListener('beforeunload', () => {\n      safeConsole.log('\u26A0\uFE0F Service worker unloading, performing cleanup...');\n      performCleanupTasks();\n    });\n\n    // NOTE: No module-scope logging for MV3 compliance\n  } catch (error) {\n    // Safe console error logging to prevent \"Illegal invocation\"\n    try {\n      if (typeof console !== 'undefined' && console.error && typeof console.error === 'function') {\n        safeConsole.error('\u274C Failed to set up lifecycle management:', error);\n      } else if (typeof console !== 'undefined' && console.log && typeof console.log === 'function') {\n        safeConsole.log('ERROR: \u274C Failed to set up lifecycle management:', error);\n      }\n    } catch (consoleError) {\n      // Silent failure if console methods fail\n    }\n    \n    if (errorHandler) {\n      errorHandler.handleError(error, 'Lifecycle Management Setup', {}, 'high');\n    }\n  }\n}\n\n// Resource cleanup management\nfunction setupResourceCleanup() {\n  try {\n    console.log('\uD83D\uDD04 Setting up resource cleanup management...');\n\n    // Periodic cleanup task\n    const cleanupInterval = setInterval(() => {\n      try {\n        performCleanupTasks();\n      } catch (error) {\n        console.error('\u274C Periodic cleanup failed:', error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Periodic Cleanup', {}, 'low');\n        }\n      }\n    }, 300000); // Every 5 minutes\n\n    cleanupTasks.push(() => clearInterval(cleanupInterval));\n\n    // Memory pressure cleanup\n    if (performanceMonitor) {\n      performanceMonitor.registerHealthChecker('memory-cleanup', async () => {\n        const memoryUsage = performanceMonitor.getCurrentMemoryUsage();\n        if (memoryUsage && memoryUsage > 200 * 1024 * 1024) { // 200MB\n          performCleanupTasks();\n          return { \n            healthy: true, \n            message: 'Memory cleanup performed',\n            details: { memoryUsage: performanceMonitor.formatBytes(memoryUsage) }\n          };\n        }\n        return { healthy: true, message: 'Memory usage normal' };\n      });\n    }\n\n    console.log('\u2705 Resource cleanup management set up');\n  } catch (error) {\n    console.error('\u274C Failed to set up resource cleanup:', error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'Resource Cleanup Setup', {}, 'medium');\n    }\n  }\n}\n\n// Perform cleanup tasks\nfunction performCleanupTasks() {\n  try {\n    console.log('\uD83E\uDDF9 Performing cleanup tasks...');\n\n    // Run all registered cleanup tasks\n    cleanupTasks.forEach((cleanupTask, index) => {\n      try {\n        cleanupTask();\n      } catch (error) {\n        console.warn(`\u26A0\uFE0F Cleanup task ${index} failed:`, error);\n      }\n    });\n\n    // Clear old performance data\n    if (performanceMonitor) {\n      const stats = performanceMonitor.getStats();\n      if (stats.operations.completed > 1000) {\n        console.log('\uD83D\uDDD1\uFE0F Trimming performance history...');\n        // The performance monitor handles its own cleanup\n      }\n    }\n\n    // Clear old error data\n    if (errorHandler && errorHandler.errorHistory?.length > 100) {\n      console.log('\uD83D\uDDD1\uFE0F Trimming error history...');\n      // The error handler handles its own cleanup\n    }\n\n    // Perform memory management system automatic cleanup\n    if (memoryManagementSystem && memoryManagementSystem.performAutomaticCleanup) {\n      try {\n        console.log('\uD83E\uDDE0 Performing memory management system cleanup...');\n        memoryManagementSystem.performAutomaticCleanup();\n      } catch (error) {\n        console.error('\u274C Memory management system cleanup failed:', error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Memory Management Cleanup', {}, 'low');\n        }\n      }\n    }\n\n    // Suggest garbage collection if available (or use memory management system)\n    if (memoryManagementSystem && memoryManagementSystem.triggerGarbageCollection) {\n      try {\n        console.log('\uD83D\uDDD1\uFE0F Triggering garbage collection via memory management system...');\n        memoryManagementSystem.triggerGarbageCollection('cleanup-routine');\n      } catch (error) {\n        console.warn('\u26A0\uFE0F Memory management GC failed, falling back to manual GC');\n        if (typeof window !== 'undefined' && window.gc) {\n          window.gc();\n        }\n      }\n    } else if (typeof window !== 'undefined' && window.gc) {\n      console.log('\uD83D\uDDD1\uFE0F Triggering garbage collection...');\n      window.gc();\n    }\n\n    console.log('\u2705 Cleanup tasks completed');\n  } catch (error) {\n    console.error('\u274C Cleanup tasks failed:', error);\n  }\n}\n\n// Cleanup resources for specific tab\nfunction cleanupTabResources(tabId) {\n  try {\n    console.log(`\uD83E\uDDF9 Cleaning up resources for tab ${tabId}...`);\n\n    // Cleanup download manager resources for this tab\n    if (downloadManager && downloadManager.cleanupTabResources) {\n      downloadManager.cleanupTabResources(tabId);\n    }\n\n    // Cleanup message handler resources for this tab\n    if (messageHandler && messageHandler.cleanupTabResources) {\n      messageHandler.cleanupTabResources(tabId);\n    }\n\n    // Cleanup memory management system resources for this tab\n    if (memoryManagementSystem && memoryManagementSystem.cleanupTabResources) {\n      try {\n        memoryManagementSystem.cleanupTabResources(tabId);\n        console.log(`\uD83E\uDDE0 Memory management system cleanup for tab ${tabId} completed`);\n      } catch (error) {\n        console.error(`\u274C Memory management system cleanup for tab ${tabId} failed:`, error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Memory Management Tab Cleanup', { tabId }, 'low');\n        }\n      }\n    }\n\n    // Cleanup any tab-specific performance tracking\n    if (performanceMonitor) {\n      const activeOps = Array.from(performanceMonitor.activeOperations.values());\n      const tabOps = activeOps.filter(op => op.metadata?.tabId === tabId);\n      tabOps.forEach(op => {\n        performanceMonitor.endOperation(op.id, { success: false, reason: 'Tab closed' });\n      });\n    }\n\n    console.log(`\u2705 Tab ${tabId} resources cleaned up`);\n  } catch (error) {\n    console.error(`\u274C Failed to cleanup resources for tab ${tabId}:`, error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'Tab Resource Cleanup', { tabId }, 'low');\n    }\n  }\n}\n\n// Service worker health checks\nfunction startServiceWorkerHealthChecks() {\n  try {\n    console.log('\uD83C\uDFE5 Starting service worker health checks...');\n\n    healthCheckInterval = setInterval(async () => {\n      try {\n        if (!isShuttingDown && performanceMonitor) {\n          const healthStatus = await performanceMonitor.performHealthCheck();\n          \n          // Log health status periodically\n          if (healthStatus.overall !== 'healthy') {\n            console.warn('\u26A0\uFE0F Health check failed:', healthStatus);\n            \n            // Take corrective action if needed\n            if (healthStatus.failureCount > 5) {\n              console.error('\uD83D\uDCA5 Multiple health check failures, attempting recovery...');\n              attemptSystemRecovery();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('\u274C Health check failed:', error);\n        if (errorHandler) {\n          errorHandler.handleError(error, 'Health Check', {}, 'medium');\n        }\n      }\n    }, 120000); // Every 2 minutes\n\n    cleanupTasks.push(() => {\n      if (healthCheckInterval) {\n        clearInterval(healthCheckInterval);\n        healthCheckInterval = null;\n      }\n    });\n\n    console.log('\u2705 Service worker health checks started');\n  } catch (error) {\n    console.error('\u274C Failed to start health checks:', error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'Health Check Setup', {}, 'medium');\n    }\n  }\n}\n\n// Attempt system recovery when health checks fail\nasync function attemptSystemRecovery() {\n  try {\n    console.log('\uD83D\uDD27 Attempting system recovery...');\n    \n    if (isShuttingDown) {\n      return;\n    }\n\n    // Reset failure counters\n    if (performanceMonitor) {\n      performanceMonitor.healthStatus.failureCount = 0;\n    }\n\n    // Cleanup resources\n    performCleanupTasks();\n\n    // Reinitialize critical systems if needed\n    if (!isExtensionInitialized) {\n      console.log('\uD83D\uDD04 Reinitializing extension systems...');\n      await initializeExtension();\n    }\n\n    console.log('\u2705 System recovery completed');\n  } catch (error) {\n    console.error('\u274C System recovery failed:', error);\n    if (errorHandler) {\n      errorHandler.handleError(error, 'System Recovery', {}, 'critical');\n    }\n  }\n}\n\n// Open dashboard - simplified\nasync function openDashboard(tab) {\n  try {\n    // Check permissions first\n    const hasPermissions = await chrome.permissions.contains({\n      permissions: ['tabs']\n    });\n\n    if (!hasPermissions) {\n      console.warn('\u26A0\uFE0F MV3 COMPLIANCE: Cannot request permissions from service worker');\n      // MV3 FIX: Cannot request permissions from service worker context\n      // Must notify UI to handle permission request with user gesture\n      try {\n        await chrome.runtime.sendMessage({\n          type: 'PERMISSION_NEEDED',\n          permission: 'tabs',\n          reason: 'Tabs permission required to open dashboard'\n        });\n      } catch (error) {\n        console.warn('Could not notify UI about permission need:', error.message);\n      }\n      \n      // Show notification to user explaining they need to grant permissions via UI\n      await showPermissionNotification(\n        'StepTwo needs permissions to access tabs and manage downloads. Please click the extension icon and grant permissions to continue.'\n      );\n      return;\n    }\n\n    // Create dashboard window\n    const dashboardUrl = chrome.runtime.getURL('ui/windowed-dashboard.html');\n    const urlWithParams = `${dashboardUrl}?sourceTabId=${tab.id}&sourceTabUrl=${encodeURIComponent(tab.url)}&sourceTabTitle=${encodeURIComponent(tab.title)}`;\n\n    const window = await chrome.windows.create({\n      url: urlWithParams,\n      type: 'popup',\n      width: 1200,\n      height: 800,\n      focused: true\n    });\n\n    console.log('\u2705 Dashboard opened:', window.id);\n  } catch (error) {\n    console.error('\u274C Failed to open dashboard:', error);\n  }\n}\n\n// Handle keyboard commands\nasync function handleKeyboardCommand(command, tab) {\n  switch (command) {\n    case 'start-scraper':\n      await startScraping(tab);\n      break;\n    case 'open-dashboard':\n      await openDashboard(tab);\n      break;\n    case 'toggle-selector':\n      await toggleSelector(tab);\n      break;\n    default:\n      console.log('Unknown command:', command);\n  }\n}\n\n// Start scraping - simplified\nasync function startScraping(tab) {\n  try {\n    console.log('\uD83D\uDE80 Starting scraping on tab:', tab.id);\n    \n    // Inject content script on-demand before sending message\n    await injectContentScript(tab.id, false);\n    \n    // Send message to content script to start scraping\n    const response = await chrome.tabs.sendMessage(tab.id, {\n      action: 'quickScan',\n      settings: {}\n    });\n\n    if (response && response.success) {\n      console.log('\u2705 Scraping completed:', response.itemCount, 'items found');\n    } else {\n      console.error('\u274C Scraping failed:', response?.error);\n    }\n  } catch (error) {\n    console.error('\u274C Failed to start scraping:', error);\n    await showErrorNotification('Scraping failed. Please ensure the page is loaded and try again.');\n  }\n}\n\n// Toggle selector mode - simplified\nasync function toggleSelector(tab) {\n  try {\n    console.log('\uD83C\uDFAF Toggling selector mode on tab:', tab.id);\n    \n    // Inject content script on-demand before sending message\n    await injectContentScript(tab.id, false);\n    \n    await chrome.tabs.sendMessage(tab.id, {\n      action: 'toggleSelector'\n    });\n  } catch (error) {\n    console.error('\u274C Failed to toggle selector:', error);\n    await showErrorNotification('Failed to toggle selector. Please refresh the page and try again.');\n  }\n}\n\n// REMOVED: Duplicate listeners - main initialization handlers are at lines 208-276\n\n// Helper functions for user notifications\nasync function showPermissionNotification(message) {\n  try {\n    if (chrome.notifications && chrome.notifications.create) {\n      await chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'StepTwo Gallery Scraper - Permissions Required',\n        message: message\n      });\n    } else {\n      console.log('\uD83D\uDCE2 Permission message:', message);\n    }\n  } catch (error) {\n    console.error('\u274C Failed to show permission notification:', error);\n  }\n}\n\nasync function showErrorNotification(message) {\n  try {\n    if (chrome.notifications && chrome.notifications.create) {\n      await chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'StepTwo Gallery Scraper - Error',\n        message: message\n      });\n    } else {\n      console.log('\u26A0\uFE0F Error message:', message);\n    }\n  } catch (error) {\n    console.error('\u274C Failed to show error notification:', error);\n  }\n}\n\nasync function showSuccessNotification(message) {\n  try {\n    if (chrome.notifications && chrome.notifications.create) {\n      await chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/48.png',\n        title: 'StepTwo Gallery Scraper - Success',\n        message: message\n      });\n    } else {\n      console.log('\u2705 Success message:', message);\n    }\n  } catch (error) {\n    console.error('\u274C Failed to show success notification:', error);\n  }\n}\n\n// CRITICAL: Comprehensive startup verification functions\nasync function logStartupSummary() {\n  console.log('\\n' + '='.repeat(60));\n  console.log('\uD83D\uDCCA STEPTWO EXTENSION STARTUP SUMMARY');\n  console.log('='.repeat(60));\n  \n  const summary = {\n    timestamp: new Date().toISOString(),\n    uptime: `${Math.floor((Date.now() - serviceWorkerStartTime) / 1000)}s`,\n    initializationAttempts,\n    keepaliveSystem: !!chrome.alarms,\n    scriptsLoaded: `${scriptsLoaded}/${requiredScripts.length}`,\n    scriptLoadErrors: scriptLoadErrors.length,\n    components: {\n      downloadManager: downloadManager ? '\u2705 Ready' : '\u274C Not Ready',\n      messageHandler: messageHandler && messageHandler.isInitialized ? '\u2705 Ready' : '\u274C Not Ready',\n      exportSystem: exportSystem ? '\u2705 Ready' : '\u274C Not Ready',\n      errorHandler: errorHandler ? '\u2705 Ready' : '\u274C Not Ready',\n      performanceMonitor: performanceMonitor && performanceMonitor.isInitialized ? '\u2705 Ready' : '\u274C Not Ready',\n      memoryManagement: memoryManagementSystem && memoryManagementSystem.isInitialized ? '\u2705 Ready' : '\u274C Not Ready'\n    },\n    messageHandling: messageHandler ? `Single handler (${messageHandler.isInitialized ? 'initialized' : 'not initialized'})` : 'No handler',\n    keepaliveSystemStatus: await getKeepaliveStatus()\n  };\n  \n  console.log('\uD83D\uDCCA Startup Summary:', summary);\n  \n  // Verify keepalive system is called exactly once\n  try {\n    const alarms = await chrome.alarms.getAll();\n    const keepaliveAlarms = alarms.filter(a => \n      a.name === KEEPALIVE_ALARM_NAME || a.name === HEALTH_CHECK_ALARM_NAME\n    );\n    console.log(`\u23F0 Keepalive alarms active: ${keepaliveAlarms.length}/2 expected`);\n    if (keepaliveAlarms.length !== 2) {\n      console.warn('\u26A0\uFE0F Keepalive system may not be properly initialized!');\n    }\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Could not verify keepalive alarms:', error);\n  }\n  \n  console.log('='.repeat(60) + '\\n');\n}\n\n// Get keepalive system status\nasync function getKeepaliveStatus() {\n  try {\n    const alarms = await chrome.alarms.getAll();\n    const keepaliveAlarm = alarms.find(a => a.name === KEEPALIVE_ALARM_NAME);\n    const healthCheckAlarm = alarms.find(a => a.name === HEALTH_CHECK_ALARM_NAME);\n    \n    return {\n      keepalive: keepaliveAlarm ? `Active (${keepaliveAlarm.periodInMinutes}m)` : 'Not Active',\n      healthCheck: healthCheckAlarm ? `Active (${healthCheckAlarm.periodInMinutes}m)` : 'Not Active',\n      totalAlarms: alarms.length\n    };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\n// CRITICAL: Self-diagnostic checks and error reporting\nasync function performStartupDiagnostics() {\n  console.log('\uD83D\uDD0D Performing startup diagnostics...');\n  \n  const diagnostics = {\n    healthy: true,\n    issues: [],\n    checks: {}\n  };\n  \n  try {\n    // Check 1: Verify scripts loaded\n    diagnostics.checks.scriptsLoaded = scriptLoadErrors.length === 0;\n    if (!diagnostics.checks.scriptsLoaded) {\n      diagnostics.issues.push(`${scriptLoadErrors.length} scripts failed to load`);\n      diagnostics.healthy = false;\n    }\n    \n    // Check 2: Verify message handler coordination (CRITICAL ISSUE 2)\n    diagnostics.checks.messageHandlerReady = messageHandler && messageHandler.isInitialized;\n    if (!diagnostics.checks.messageHandlerReady) {\n      diagnostics.issues.push('Message handler not properly initialized');\n      diagnostics.healthy = false;\n    }\n    \n    // Check 3: Verify keepalive system (CRITICAL ISSUE 3)\n    try {\n      const alarms = await chrome.alarms.getAll();\n      const hasKeepalive = alarms.some(a => a.name === KEEPALIVE_ALARM_NAME);\n      const hasHealthCheck = alarms.some(a => a.name === HEALTH_CHECK_ALARM_NAME);\n      diagnostics.checks.keepaliveSystem = hasKeepalive && hasHealthCheck;\n      if (!diagnostics.checks.keepaliveSystem) {\n        diagnostics.issues.push('Keepalive system not properly configured');\n        diagnostics.healthy = false;\n      }\n    } catch (error) {\n      diagnostics.issues.push('Cannot access chrome.alarms API');\n      diagnostics.healthy = false;\n    }\n    \n    // Check 4: Test basic Chrome API access (CRITICAL ISSUE 4)\n    diagnostics.checks.chromeAPIs = {\n      runtime: !!chrome.runtime,\n      tabs: !!chrome.tabs,\n      notifications: !!chrome.notifications,\n      action: !!chrome.action\n    };\n    \n    const missingAPIs = Object.entries(diagnostics.checks.chromeAPIs)\n      .filter(([, available]) => !available)\n      .map(([api]) => api);\n    \n    if (missingAPIs.length > 0) {\n      diagnostics.issues.push(`Missing Chrome APIs: ${missingAPIs.join(', ')}`);\n      diagnostics.healthy = false;\n    }\n    \n    // Check 5: Memory status\n    if (performance.memory) {\n      const memoryUsage = performance.memory.usedJSHeapSize / 1024 / 1024;\n      diagnostics.checks.memoryUsage = `${Math.floor(memoryUsage)}MB`;\n      if (memoryUsage > 100) { // 100MB threshold\n        diagnostics.issues.push(`High memory usage: ${Math.floor(memoryUsage)}MB`);\n      }\n    }\n    \n    // Check 6: Test dashboard communication capability\n    try {\n      // Verify we can access tabs API for dashboard communication\n      await chrome.tabs.query({ active: true, currentWindow: true });\n      diagnostics.checks.dashboardCommunication = 'Ready';\n    } catch (error) {\n      diagnostics.issues.push('Cannot access tabs for dashboard communication');\n      diagnostics.checks.dashboardCommunication = 'Failed';\n      diagnostics.healthy = false;\n    }\n    \n    console.log(`\uD83D\uDD0D Diagnostics complete: ${diagnostics.healthy ? '\u2705 Healthy' : '\u26A0\uFE0F Issues found'}`);\n    if (diagnostics.issues.length > 0) {\n      console.warn('\u26A0\uFE0F Diagnostic issues:', diagnostics.issues);\n    }\n    console.log('\uD83D\uDCCA Diagnostic details:', diagnostics.checks);\n    \n  } catch (error) {\n    console.error('\u274C Startup diagnostics failed:', error);\n    diagnostics.healthy = false;\n    diagnostics.issues.push(`Diagnostics failed: ${error.message}`);\n  }\n  \n  return diagnostics;\n}\n\n// NOTE: Module-scope initialization removed for MV3 compliance\n// ProxyRouter and extension will be initialized by event handlers\n// The following code is commented out to ensure no chrome.* API access at module load:\n/*\n(async () => {\n  try {\n    await globalProxyRouter.initialize();\n  } catch (error) {\n    console.error('Early ProxyRouter initialization failed:', error);\n  }\n})();\n\ninitializeExtension();\n*/\n\n// MV3 COMPLIANT: Service worker setup complete\n// All initialization will happen via chrome.runtime.onInstalled/onStartup events"],
  "mappings": "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",
  "names": ["AdvancedExportSystem", "XLSX", "filename", "exportSystem", "activeExports", "ContextMenuManager", "window"]
}
